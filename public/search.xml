<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>进程管理工具 Supervisor</title>
      <link href="/2020/04/23/os/supervisor/"/>
      <url>/2020/04/23/os/supervisor/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我是平也，这有一个专注Gopher技术成长的开源项目<a href="https://github.com/pingyeaa/go-home" target="_blank" rel="noopener">「go home」</a></p></blockquote><p>要想在终端后台常驻进程，首先想到的是在命令后加 &amp; 符号，来达到隐藏程序在后台的目的，尽管看起来进程已经在后台运行了，实际上终端会话关闭时进程还是会被 kill 掉，这种问题一般是采用搭配 nohup 命令来解决的，nohup 作用是忽略 SIGHUP 信号，而会话关闭时正好发送了该信号给会话内所有运行程序，简而言之，nohup 命令搭配 &amp; 不仅可以在后台运行，还不受会话关闭的影响。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup /bin/cat &amp;</span></span><br></pre></td></tr></table></figure><p><img src="https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587648951163.png" alt="file"></p><p>那么问题来了，虽然做到了后台运行，也避免了挂断操作带来的影响，但是它避免不了常驻进程自己出现问题，一旦它因自身异常终止了进程，这对黄金搭档就无力回天了。那怎么才能把挂了的常驻进程拉起来呢？这就是我们要讲的主题 Supervisor。</p><h3 id="Supervisor-介绍"><a href="#Supervisor-介绍" class="headerlink" title="Supervisor 介绍"></a>Supervisor 介绍</h3><p>Supervisor 是专门用来在<a href="#unix">类 Unix</a> 系统上监控管理进程的工具，发布于 2004 年，虽然名字气势磅礴，但它的志向并不是统筹整个操作系统的进程，而是致力于做一个听话的贴身助理，你只需要告诉它要管理的程序，它就按你的要求监控进程，救死扶伤，保证进程的持续运行。</p><p><img src="https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587649424854.png" alt="file"></p><p><span id="unix"></span></p><blockquote><p>类 Unix 系统就是由 Unix 设计风格演变出的操作系统，除了 Windows 市面上绝大多数系统都是类 Unix 系统。</p></blockquote><p>官方文档介绍 Supervisor 是 C/S 架构体系，它对应的角色分别为 Supervisorctl 和 Supervisord。后者的主要作用是启动配置好的程序、响应 Supervisorctl 发过来的指令以及重启退出的子进程，而前者是 Supervisor 的客户端，它以命令行的形式提供了一系列参数，来方便用户向 Supervisord 发送指令，常用的有启动、暂停、移除、更新等命令。</p><h3 id="Supervisor-安装与配置"><a href="#Supervisor-安装与配置" class="headerlink" title="Supervisor 安装与配置"></a>Supervisor 安装与配置</h3><p>安装 Supervisor 很简单，在各大操作系统的软件包管理器中都可以直接安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install -y supervisor</span></span><br></pre></td></tr></table></figure><p>安装好的 Supervisor 配置文件默认为 /etc/supervisor.conf，如果找不到配置文件可以<a href="#gen_conf">通过官方命令生成</a>，该配置文件包含了一个空的配置目录 /etc/supervisor.d（不同 OS 可能不一样），只需在该目录添加配置文件即可动态扩展，所以 supervisor.conf 一般不需要做改动。</p><p>我们以最简单的 cat 命令为例，cat 命令不加参数会阻塞住等待标准输入，所以很适合做常驻进程的演示。现在创建一个配置文件 cat.ini 到 /etc/supervisor.d/，第一行定义程序的名称，该名称用来做操作的标识，第二行定义命令路径，它才是程序执行的根本命令。</p><figure class="highlight shell"><figcaption><span>/etc/supervisor.d/cat.ini</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[program:foo]</span><br><span class="line">command=/bin/cat</span><br></pre></td></tr></table></figure><p>配置好后，启动 supervisord 服务，注意通过 -c 指定 supervisor 的配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> supervisord -c /etc/supervisord.conf</span></span><br></pre></td></tr></table></figure><p>当然也可以不指定配置路径，那么它会按以下顺序逐个搜索配置文件：</p><ul><li>$CWD/supervisord.conf</li><li>$CWD/etc/supervisord.conf</li><li>/etc/supervisord.conf</li><li>/etc/supervisor/supervisord.conf</li><li>../etc/supervisord.conf</li><li>../supervisord.conf</li></ul><p><span id="gen_conf"></span></p><p>如果你是通过 Mac OS 安装的 Supervisor，可能从上述目录都找不到配置文件，可以利用官方提供的命令生成配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> echo_supervisord_conf &gt; supervisor.conf</span></span><br></pre></td></tr></table></figure><p>这个时候 cat 进程应该已经跑起来了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ps aux | grep /bin/cat</span></span><br></pre></td></tr></table></figure><p>杀掉进程，进程 id 会发生变化，证明 supervisor 又把 cat 拉了起来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo <span class="built_in">kill</span> 9 &lt;进程ID&gt;</span></span><br></pre></td></tr></table></figure><h3 id="核心配置讲解"><a href="#核心配置讲解" class="headerlink" title="核心配置讲解"></a>核心配置讲解</h3><p>配置文件中的选项并不止 command，官方提供了很多配置项。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[program:name]</span></span><br><span class="line"><span class="attr">command</span>=sh /tmp/echo_time.sh</span><br><span class="line"><span class="attr">priority</span>=<span class="number">999</span></span><br><span class="line"><span class="attr">numprocs</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">startsecs</span>=<span class="number">10</span></span><br><span class="line"><span class="attr">startretries</span>=<span class="number">3</span> </span><br><span class="line"><span class="attr">exitcodes</span>=<span class="number">0</span>,<span class="number">2</span></span><br><span class="line"><span class="attr">stopsignal</span>=QUIT</span><br><span class="line"><span class="attr">stopwaitsecs</span>=<span class="number">10</span></span><br><span class="line"><span class="attr">user</span>=root</span><br><span class="line"><span class="attr">log_stdout</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">log_stderr</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">logfile</span>=/tmp/echo_time.log</span><br><span class="line"><span class="attr">logfile_maxbytes</span>=<span class="number">1</span>MB</span><br><span class="line"><span class="attr">logfile_backups</span>=<span class="number">10</span> </span><br><span class="line"><span class="attr">stdout_logfile_maxbytes</span>=<span class="number">20</span>MB </span><br><span class="line"><span class="attr">stdout_logfile_backups</span>=<span class="number">20</span> </span><br><span class="line"><span class="attr">stdout_logfile</span>=/tmp/echo_time.stdout.log</span><br></pre></td></tr></table></figure><p>下面挑选几个配置简要说明</p><ul><li>command：要执行的命令</li><li>priority：执行优先级，值越高就越晚启动，越早关闭</li><li>numprocs：进程数量</li><li>autostart：是否与 supervisord 一起启动</li><li>autorestart：自动重启</li><li>startsecs：延时启动时间，默认为 10 秒</li><li>startretries：启动重试次数，默认为 3 次</li><li>exitcodes：当程序的退出码为 0 或 2 时，重启</li><li>stopsignal：停止信号</li><li>stopwaitsecs：延时停止时间，收到停止指令后多久停止</li><li>user：以哪个用户执行</li></ul><h3 id="动态操作子程序"><a href="#动态操作子程序" class="headerlink" title="动态操作子程序"></a>动态操作子程序</h3><p>添加新的程序，只需增加配置文件，然后执行 supervisorctl update 即可动态添加新的程序，并不需要重启 supervisord 服务。如果出现 refused connection 的提示，可能是没找到配置文件，需要加上配置选项。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> supervisorctl update</span></span><br><span class="line">foo1: added process group</span><br></pre></td></tr></table></figure><p>删除同理，remove 时会先将进程关闭，再从列表中移除。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo1: stopped</span><br><span class="line">foo1: removed process group</span><br></pre></td></tr></table></figure><p>如果需要单独停止某个程序，可以使用 stop 命令，stop 后跟的是 program 名称。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> supervisorctl stop foo</span></span><br><span class="line">foo: stopped</span><br></pre></td></tr></table></figure><p>当然还可以通过 stop all 命令更加暴力的停止所有进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> supervisorctl stop all</span></span><br><span class="line">foo: stopped</span><br><span class="line">foo1: stopped</span><br></pre></td></tr></table></figure><p>反之亦然，启动进程只需要将 stop 改为 start。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> supervisorctl start all</span></span><br></pre></td></tr></table></figure><h4 id="连接到某个进程"><a href="#连接到某个进程" class="headerlink" title="连接到某个进程"></a>连接到某个进程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> supervisorctl <span class="built_in">fg</span> &lt;program 名称&gt;</span></span><br></pre></td></tr></table></figure><h4 id="重启-supervisord"><a href="#重启-supervisord" class="headerlink" title="重启 supervisord"></a>重启 supervisord</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> supervisorctl reload</span></span><br></pre></td></tr></table></figure><h4 id="动态加载-supervisor-conf"><a href="#动态加载-supervisor-conf" class="headerlink" title="动态加载 supervisor.conf"></a>动态加载 supervisor.conf</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> supervisorctl reread</span></span><br></pre></td></tr></table></figure><h4 id="查看所有进程运行状况"><a href="#查看所有进程运行状况" class="headerlink" title="查看所有进程运行状况"></a>查看所有进程运行状况</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> supervisorctl status</span></span><br></pre></td></tr></table></figure><h3 id="Web-界面操作"><a href="#Web-界面操作" class="headerlink" title="Web 界面操作"></a>Web 界面操作</h3><p>官方提供了界面操作方式，需要在 supervisor.conf 中去掉 inet_http_server 的注释。</p><figure class="highlight ini"><figcaption><span>supervisor.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[inet_http_server]</span>         <span class="comment">; inet (TCP) server disabled by default</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9001</span>        <span class="comment">; ip_address:port specifier, *:port for all iface</span></span><br><span class="line"><span class="attr">username</span>=user              <span class="comment">; default is no username (open server)</span></span><br><span class="line"><span class="attr">password</span>=<span class="number">123</span>               <span class="comment">; default is no password (open server)</span></span><br></pre></td></tr></table></figure><p>重启 supervisord。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> supervisorctl reload</span></span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:9001" target="_blank" rel="noopener">http://localhost:9001</a> 可以看到 supervisor 的操作界面。</p><p><img src="https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587696070630.png" alt="file"></p><p>今天文章就到这里，想要了解更多，欢迎查看<a href="http://supervisord.org/" target="_blank" rel="noopener">官方文档</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> supervisor </tag>
            
            <tag> 进程 </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用Github钩子做自动部署</title>
      <link href="/2020/04/22/other/github-webhooks/"/>
      <url>/2020/04/22/other/github-webhooks/</url>
      
        <content type="html"><![CDATA[<p>最近机缘巧合的购置了域名和服务器，不用实在是浪费，再加上一直没有属于自己的个人网站，所以打算用hexo在服务器上玩一下，这样也就不用再纠结用Github pages还是Gitee pages了。当然，今天的主题并不是博客搭建，而是如何利用Github的钩子，将博客代码部署到服务器上。</p><p>毕竟Github的钩子已经历史悠久了，网上有很多开源项目可以拿来用，所以我并没有造轮子，而是去找了5K star的开源Go项目<code>webhook</code>，这个工具的作用是接收Github仓库的变动通知，然后调用你配置好的shell脚本，脚本可以写上代码拉取的命令或是编译的操作等，具体根据个人需求而定。简而言之，它只起着拉通Github与你服务器的作用。</p><p><img src="https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587526481705.png" alt="file"></p><h3 id="webhook工具安装"><a href="#webhook工具安装" class="headerlink" title="webhook工具安装"></a>webhook工具安装</h3><p>因为webhook是Go语言开发的，所以要先安装Go语言。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y golang</span><br></pre></td></tr></table></figure><p>然后就可以用go命令安装webhook了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/adnanh/webhook</span><br></pre></td></tr></table></figure><p>命令安装位置可以通过<code>go env</code>查看，GOPATH就是命令安装路径，比如我的命令就安装在/root/go/bin/webhook。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">go env</span><br><span class="line">...</span><br><span class="line">GOOS="linux"</span><br><span class="line">GOPATH="/root/go"</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h3><p>在编写脚本之前确保服务器有权限拉取github代码，如果已经做了配置可跳过本节去看<a href="#部署脚本编写">部署脚本编写</a>。ssh key是代码托管平台（github、gitee、coding、gitlab等）鉴别你是否有权拉取代码的身份标识，生成只需一行命令和一路回车就行了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line"></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:M6sCf/J/hOu3zLxMkFUVmv3iWIa30CfbxiWqmWCt1YE root@iZwz96y36tk2ecnykzituxZ</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|            ..o. |</span><br><span class="line">|           . o   |</span><br><span class="line">|          . o    |</span><br><span class="line">|       . o .     |</span><br><span class="line">|      E S.  .    |</span><br><span class="line">|  .  . ..Oo ..   |</span><br><span class="line">|   oo o ==Boo .  |</span><br><span class="line">|   .++.+o#== .   |</span><br><span class="line">|    .=*+=+@o     |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p>生成后可通过<code>cat ~/.ssh/id_rsa.pub</code>命令查看，最后将key加入github即可，加法不再赘述，请自行谷歌。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQHBAAABAQCv7LGVJUFdcLL+HZyRFTQIQCdre61Gch76lDVpmWSX9BGGRU3iQS7EU5qApFn1VSvt+yf4rMt2LEkuxGCm1wIyBKZ6LYDViZBeTAfx4BcM1mcpxOX6I/+r07mQ4llTz+poQB1Zp9Y60uk0tbGOVWlCoDBEvf9qeEnQ0qEczEkv7wcawV6pVhlXjFKZgq0EOQbCYoWMvPUl+dwDbTcl/h+7At1nlgfF7IuRHlKf18qvgnTRT2wpiuz4pWdoAi8LcY1JiR1z5OB0oCJ2euhyDND39G2NxZRS1FIVdgCEvioHtdoHOSoWBlcSj0fLFSnscBfRBrCd7yhOP7fFKfrowHMj root@iZwz96y36tk2ecnykzituxZ</span><br></pre></td></tr></table></figure><h3 id="部署脚本编写"><a href="#部署脚本编写" class="headerlink" title="部署脚本编写"></a>部署脚本编写</h3><p>该shell脚本的主要目的是从github拉取代码，脚本内容很简单，只做了目录的简要判断，代码目录存在则更新，不存在则克隆仓库，工作目录和仓库名称、地址请换成自己的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">cd /home/www/website</span><br><span class="line"></span><br><span class="line">if [ ! -d "go-home" ]; then</span><br><span class="line">  git clone https://github.com/pingyeaa/go-home.git</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">cd go-home</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="webhook配置与启动"><a href="#webhook配置与启动" class="headerlink" title="webhook配置与启动"></a>webhook配置与启动</h3><p>编写配置文件hooks.json，格式如下。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"deploy-webhook"</span>,</span><br><span class="line">    <span class="attr">"execute-command"</span>: <span class="string">"deploy.sh"</span>,</span><br><span class="line">    <span class="attr">"command-working-directory"</span>: <span class="string">"/home"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>id：钩子的id，可自定义</li><li>execute-command：要执行的脚本名，就是刚才编写的部署脚本</li><li>command-working-directory：脚本所在目录</li></ul><p>完成后通过webhook命令启动，可以看到id为deploy-webhook的配置已经加载了，我们需要注意的是监听的端口和路径，等下要用到。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/root/go/bin/webhook -hooks hooks.json -verbose</span><br><span class="line"></span><br><span class="line">[webhook] 2020/04/22 15:18:22 version 2.6.11 starting</span><br><span class="line">[webhook] 2020/04/22 15:18:22 setting up os signal watcher</span><br><span class="line">[webhook] 2020/04/22 15:18:22 attempting to load hooks from hooks.json</span><br><span class="line">[webhook] 2020/04/22 15:18:22 found 1 hook(s) in file</span><br><span class="line">[webhook] 2020/04/22 15:18:22   loaded: deploy-webhook</span><br><span class="line">[webhook] 2020/04/22 15:18:22 serving hooks on http://0.0.0.0:9000/hooks/&#123;id&#125;</span><br><span class="line">[webhook] 2020/04/22 15:18:22 os signal watcher ready</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://0.0.0.0:9000/hooks/&#123;id&#125;</span><br></pre></td></tr></table></figure><h3 id="Github-Webhooks配置"><a href="#Github-Webhooks配置" class="headerlink" title="Github Webhooks配置"></a>Github Webhooks配置</h3><p>现在服务器已经启动了webhook程序监听9000端口，接下来仅需要告诉Github这个地址和端口就好了。</p><p>打开仓库设置页，添加webhook。</p><p><img src="https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587523289550.png" alt=""></p><p>配置webhooks，Payload URL就是要通知的地址，把刚才打印出的端口和路径填上即可，其他默认。</p><p><img src="https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541102651.png" alt="file"></p><p>现在可以提交代码测试了，如果推送失败Github中会有错误提示，同样的，成功不仅在Github中能看到，服务器的打印日志也有记录。</p><p><img src="https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541394355.png" alt="file"></p><p><img src="https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541482026.png" alt="file"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> webhooks </tag>
            
            <tag> 钩子 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
