<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何进行 MySQL 性能调优</title>
      <link href="/2020/04/27/database/mysql-performance/"/>
      <url>/2020/04/27/database/mysql-performance/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>众所周知，Web API 响应慢可能包含很多方面的原因，比如第三方接口超时、DNS 解析慢、API 响应内容过大、网络带宽不够、硬件配置不足、网关层出现问题等，当然最常见且容易出问题的地方当属数据库层的使用，所以我们今天的主题只围绕数据库性能调优来展开。</p><h2 id="show-status"><a href="#show-status" class="headerlink" title="show status"></a>show status</h2><p>当没有精确到具体 SQL 语句，而是觉得系统整体缓慢时，除了使用 vmstat 或 iostat 查看 CPU、进程、I/O 设备的使用情况外，还可以通过 show status 命令查询 mysql 整体执行频率。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; show status;</span><br></pre></td></tr></table></figure><p>进入 mysql 终端输入 show status 指令可以看到很多选项，比如语句的执行次数、连接数、锁表次数以及慢查询次数等等，但是我相信你想看的更多的是从上次 mysql 启动到现在的执行频率，所以只需要加上 global 就可以了，它会查询自服务启动后的统计结果，若不加，默认执行的是 show session status，意味着只查询本次连接内的统计结果，说实话我并没有想到它的应用场景，了解真相的同学可以留言给我。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; show global status;</span><br></pre></td></tr></table></figure><p>常见的变量有</p><ul><li>Com_select：执行 Select 操作的次数</li><li>Com_update：执行 Update 操作的次数</li><li>Com_insert：执行 Insert 操作的次数</li><li>Com_delete: 执行 Delete 操作的次数</li><li>Com_rollback：回滚次数</li><li>Com_commit：提交次数</li><li>Com_*：Com 开头的都是数据库相关操作的次数</li><li>Innodb_row_lock_time：行锁定花费的总时间，单位毫秒</li><li>Innodb_row_lock_time_avg：行锁定平均花费时间，单位毫秒</li><li>Max_used_connections：服务器启动后使用的最大连接数量</li><li>Uptime：服务器运行时间，单位秒</li><li>Threads_connected：当前打开的连接数量</li><li>Connections：试图连接 MySQL 服务器的数量，无论成功与否</li><li>Aborted_connects：试图连接到服务器但失败的数量</li></ul><p>从 show status 能看出什么问题呢，这个仁者见仁智者见智了，比如回滚次数 Com_rollback 非常多，那意味着代码一定存在问题，连接失败次数 Aborted_connects 过多可能是因为代码中没有及时或正确的关闭 mysql 连接等。</p><h2 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h2><p>show status 虽然可以查询系统整体的运行概况，但是无法精准定位到具体的 SQL 语句，哪个语句执行慢实际上是记录在 mysql 中的，当然它也有自己的开关，可以通过 show varirables 命令查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; show variables like '%slow_query_log%';</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+---------------------+--------------------------------------+</span><br><span class="line">| Variable_name       | Value                                |</span><br><span class="line">+---------------------+--------------------------------------+</span><br><span class="line">| slow_query_log      | OFF                                  |</span><br><span class="line">| slow_query_log_file | /var/lib/mysql/400d5ed8dd00-slow.log |</span><br><span class="line">+---------------------+--------------------------------------+</span><br><span class="line">2 rows in set (0.06 sec)</span><br></pre></td></tr></table></figure><p>slow_query_log 意为开关，slow_query_log_file 是慢查询所在路径，开关可以通过 set 命令控制，但是只针对当前数据库生效，MySQL 重启会失效，如果要永久生效，必须修改 mysql 的配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; set global slow_query_log=1;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> /etc/mysql/mysql.conf.d/mysqld.cnf</span></span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">......</span><br><span class="line">slow_query_log=1</span><br><span class="line">slow_query_log_file=/tmp/slow.log</span><br><span class="line">long_query_time=1</span><br></pre></td></tr></table></figure><p>定义“慢”的权利是掌握在用户手里的，可以通过 long_query_time 设置几秒以上才算慢，慢查询文件格式如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Time: 2020-04-28T07:33:20.364348Z</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> User@Host: root[root] @  [172.17.0.1]  Id:     2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Query_time: 1.848906  Lock_time: 0.000206 Rows_sent: 0  Rows_examined: 2219780</span></span><br><span class="line">use gorm;</span><br><span class="line">SET timestamp=1588059200;</span><br><span class="line">select * from vote_record where create_time like '%abc%';</span><br></pre></td></tr></table></figure><p>mysql 会将所有执行超过 long_query_time 的语句记录下来，除此之外还包括时间戳、连接信息、执行时间等。</p><h2 id="show-processlist"><a href="#show-processlist" class="headerlink" title="show processlist"></a>show processlist</h2><p>慢查询已经满足了绝大部分需求，但是只有在执行完毕的语句才会被记录，正在执行中的语句可以通过 show processlist 查看，我们执行 select sleep(5) 来做个测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; select sleep(5);</span><br><span class="line">mysql &gt; show processlist;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+----+------+------------------+------+---------+------+------------+------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Id | User | Host             | db   | Command | Time | State      | Info                                                                                                 |</span><br><span class="line">+----+------+------------------+------+---------+------+------------+------------------------------------------------------------------------------------------------------+</span><br><span class="line">|  2 | root | 172.17.0.1:53890 | gorm | Sleep   |   84 |            | NULL                                                                                                 |</span><br><span class="line">|  3 | root | 172.17.0.1:53892 | gorm | Query   |    2 | User sleep | select SLEEP(5)                                                                                      |</span><br><span class="line">|  4 | root | 172.17.0.1:53894 | gorm | Sleep   |  106 |            | NULL                                                                                                 |</span><br><span class="line">|  5 | root | 172.17.0.1:53896 | NULL | Sleep   |  106 |            | NULL                                                                                                 |</span><br><span class="line">|  6 | root | localhost        | NULL | Query   |    0 | starting   | show processlist                                                                                     |</span><br><span class="line">+----+------+------------------+------+---------+------+------------+------------------------------------------------------------------------------------------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>show processlist 可以展示出正在运行的线程，除了 root 用户可以看到所有的线程外，其他用户只能看到自己执行的线程，字段解释如下。</p><ul><li>Id：线程的唯一标识</li><li>User：启动该线程的用户</li><li>Host：发出执行请求的客户端 IP 和端口号</li><li>db：在哪个数据库中执行的</li><li>Command：线程正在执行的命令，下文解释</li><li>Time：在当前状态待了多久时间</li><li>State：线程状态</li><li>Info：线程执行的语句，默认显示前 100 个字符，查看全部字符执行 show full processlist</li></ul><p>Command 字段包含如下命令（部分展示）</p><ul><li>Query：正在执行一个语句</li><li>Quit：该线程正在推出</li><li>Shutdown：正在关闭服务器</li><li>Sleep：正在等待客户端发送请求语句</li><li>Debug：线程正在生成调试信息</li><li>Binlog Dump：正在将二进制日志同步到从节点</li><li>……</li></ul><h2 id="执行计划-explain"><a href="#执行计划-explain" class="headerlink" title="执行计划 explain"></a>执行计划 explain</h2><p>当定位到慢语句后，接下来需要分析语句，我们常用 explain 对语句分析，只需在语句前加上 explain 即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; explain select * from vote_record where create_time like '%ssssss%';</span><br></pre></td></tr></table></figure><p>explain 会大致评估语句的执行情况，有没有用到索引、查询了多少行等，字段如下。</p><ul><li>id：执行编号，在没有子查询的情况下默认为 1 </li><li>select_type：查询类型，常见的有 SIMPLE、PRIMARY、UNION、SUBQUERY等</li><li>table：表示正在访问哪个表</li><li>type：表示访问类型，决定通过什么方式访问表，下文详解</li><li>possible_keys：可能使用到的索引</li><li>key：表示实际采用的哪个索引</li><li>key_len：索引里使用的字节数</li><li>ref：哪些列或常量被用于查找索引列上的值</li><li>rows：估算出所要检索的行数</li><li>extra：执行情况的说明描述，包含了不适合在其它列显示，但是又很重要的信息</li></ul><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>不同的访问类型对应性能不一，常见的访问类型有，性能由低到高排序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALL、index、range、ref、eq_ref、const、system、NULL</span><br></pre></td></tr></table></figure><ul><li>ALL：代表扫完全表所有数据才找到目标，性能肯定是最差的</li><li>index：表示查完了所有的索引才找到目标，因为索引文件肯定比全表数据小，所以速度会快一些</li><li>range：表示索引范围扫描，没有扫全部的索引，而是扫了一部分，自然比 index 性能好</li><li>ref：表示使用了非唯一索引精确匹配到了某一行，这个比 range 更精准</li><li>eq_ref：表示使用了唯一索引精准匹配到了某一行，唯一索引自然比非唯一要找得更快</li><li>const/system：表示单表里最多一行匹配查询条件，比如对主键的查询</li><li>NULL：表示不用访问表或索引就能取到数据</li></ul><h2 id="show-profiles"><a href="#show-profiles" class="headerlink" title="show profiles"></a>show profiles</h2><p>除了分析语句索引使用情况外，profile 可以清楚地让我们了解语句执行的过程。监测 profile 开关的语句是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select @@profiling;</span></span><br><span class="line">+-------------+</span><br><span class="line">| @@profiling |</span><br><span class="line">+-------------+</span><br><span class="line">|           0 |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure><p>可以通过 set 临时打开开关</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; set profiling=1;</span><br></pre></td></tr></table></figure><p>打开收随便执行一条语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; select * from vote_record limit 100;</span><br></pre></td></tr></table></figure><p>再通过 show profiles 就可以看到刚才执行的记录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show profiles;</span></span><br><span class="line">+----------+------------+-------------------------------------+</span><br><span class="line">| Query_ID | Duration   | Query                               |</span><br><span class="line">+----------+------------+-------------------------------------+</span><br><span class="line">|        1 | 0.00086200 | select * from vote_record limit 100 |</span><br><span class="line">+----------+------------+-------------------------------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>一共三列，分别代表执行的标识、执行时间、执行语句，除此之外还可以指定查询某个 ID 的详情。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show profile <span class="keyword">for</span> query 1;</span></span><br><span class="line">+----------------------+----------+</span><br><span class="line">| Status               | Duration |</span><br><span class="line">+----------------------+----------+</span><br><span class="line">| starting             | 0.000076 |</span><br><span class="line">| checking permissions | 0.000021 |</span><br><span class="line">| Opening tables       | 0.000067 |</span><br><span class="line">| init                 | 0.000023 |</span><br><span class="line">| System lock          | 0.000020 |</span><br><span class="line">| optimizing           | 0.000014 |</span><br><span class="line">| statistics           | 0.000026 |</span><br><span class="line">| preparing            | 0.000021 |</span><br><span class="line">| executing            | 0.000013 |</span><br><span class="line">| Sending data         | 0.000340 |</span><br><span class="line">| end                  | 0.000049 |</span><br><span class="line">| query end            | 0.000038 |</span><br><span class="line">| closing tables       | 0.000023 |</span><br><span class="line">| freeing items        | 0.000060 |</span><br><span class="line">| cleaning up          | 0.000072 |</span><br><span class="line">+----------------------+----------+</span><br><span class="line">15 rows in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>可以清晰地看出每个阶段执行耗时，实际并不止可以看阶段耗时，还能展示 CPU、IO、内存等信息，感兴趣可以自行尝试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show profile cpu, block io, memory <span class="keyword">for</span> query 1;</span></span><br><span class="line">+----------------------+----------+----------+------------+--------------+---------------+</span><br><span class="line">| Status               | Duration | CPU_user | CPU_system | Block_ops_in | Block_ops_out |</span><br><span class="line">+----------------------+----------+----------+------------+--------------+---------------+</span><br><span class="line">| starting             | 0.000076 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class="line">| checking permissions | 0.000021 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class="line">| Opening tables       | 0.000067 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class="line">| init                 | 0.000023 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class="line">| System lock          | 0.000020 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class="line">| optimizing           | 0.000014 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class="line">| statistics           | 0.000026 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class="line">| preparing            | 0.000021 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class="line">| executing            | 0.000013 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class="line">| Sending data         | 0.000340 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class="line">| end                  | 0.000049 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class="line">| query end            | 0.000038 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class="line">| closing tables       | 0.000023 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class="line">| freeing items        | 0.000060 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class="line">| cleaning up          | 0.000072 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class="line">+----------------------+----------+----------+------------+--------------+---------------+</span><br><span class="line">15 rows in set, 1 warning (0.01 sec)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程管理工具 Supervisor</title>
      <link href="/2020/04/23/os/supervisor/"/>
      <url>/2020/04/23/os/supervisor/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我是平也，这有一个专注Gopher技术成长的开源项目<a href="https://github.com/pingyeaa/go-home" target="_blank" rel="noopener">「go home」</a></p></blockquote><p>要想在终端后台常驻进程，首先想到的是在命令后加 &amp; 符号，来达到隐藏程序在后台的目的，尽管看起来进程已经在后台运行了，实际上终端会话关闭时进程还是会被 kill 掉，这种问题一般是采用搭配 nohup 命令来解决的，nohup 作用是忽略 SIGHUP 信号，而会话关闭时正好发送了该信号给会话内所有运行程序，简而言之，nohup 命令搭配 &amp; 不仅可以在后台运行，还不受会话关闭的影响。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup /bin/cat &amp;</span></span><br></pre></td></tr></table></figure><p><img src="http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587648951163.png" alt="file"></p><p>那么问题来了，虽然做到了后台运行，也避免了挂断操作带来的影响，但是它避免不了常驻进程自己出现问题，一旦它因自身异常终止了进程，这对黄金搭档就无力回天了。那怎么才能把挂了的常驻进程拉起来呢？这就是我们要讲的主题 Supervisor。</p><h3 id="Supervisor-介绍"><a href="#Supervisor-介绍" class="headerlink" title="Supervisor 介绍"></a>Supervisor 介绍</h3><p>Supervisor 是专门用来在<a href="#unix">类 Unix</a> 系统上监控管理进程的工具，发布于 2004 年，虽然名字气势磅礴，但它的志向并不是统筹整个操作系统的进程，而是致力于做一个听话的贴身助理，你只需要告诉它要管理的程序，它就按你的要求监控进程，救死扶伤，保证进程的持续运行。</p><p><img src="http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587649424854.png" alt="file"></p><p><span id="unix"></span></p><blockquote><p>类 Unix 系统就是由 Unix 设计风格演变出的操作系统，除了 Windows 市面上绝大多数系统都是类 Unix 系统。</p></blockquote><p>官方文档介绍 Supervisor 是 C/S 架构体系，它对应的角色分别为 Supervisorctl 和 Supervisord。后者的主要作用是启动配置好的程序、响应 Supervisorctl 发过来的指令以及重启退出的子进程，而前者是 Supervisor 的客户端，它以命令行的形式提供了一系列参数，来方便用户向 Supervisord 发送指令，常用的有启动、暂停、移除、更新等命令。</p><h3 id="Supervisor-安装与配置"><a href="#Supervisor-安装与配置" class="headerlink" title="Supervisor 安装与配置"></a>Supervisor 安装与配置</h3><p>安装 Supervisor 很简单，在各大操作系统的软件包管理器中都可以直接安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install -y supervisor</span></span><br></pre></td></tr></table></figure><p>安装好的 Supervisor 配置文件默认为 /etc/supervisor.conf，如果找不到配置文件可以<a href="#gen_conf">通过官方命令生成</a>，该配置文件包含了一个空的配置目录 /etc/supervisor.d（不同 OS 可能不一样），只需在该目录添加配置文件即可动态扩展，所以 supervisor.conf 一般不需要做改动。</p><p>我们以最简单的 cat 命令为例，cat 命令不加参数会阻塞住等待标准输入，所以很适合做常驻进程的演示。现在创建一个配置文件 cat.ini 到 /etc/supervisor.d/，第一行定义程序的名称，该名称用来做操作的标识，第二行定义命令路径，它才是程序执行的根本命令。</p><figure class="highlight shell"><figcaption><span>/etc/supervisor.d/cat.ini</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[program:foo]</span><br><span class="line">command=/bin/cat</span><br></pre></td></tr></table></figure><p>配置好后，启动 supervisord 服务，注意通过 -c 指定 supervisor 的配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> supervisord -c /etc/supervisord.conf</span></span><br></pre></td></tr></table></figure><p>当然也可以不指定配置路径，那么它会按以下顺序逐个搜索配置文件：</p><ul><li>$CWD/supervisord.conf</li><li>$CWD/etc/supervisord.conf</li><li>/etc/supervisord.conf</li><li>/etc/supervisor/supervisord.conf</li><li>../etc/supervisord.conf</li><li>../supervisord.conf</li></ul><p><span id="gen_conf"></span></p><p>如果你是通过 Mac OS 安装的 Supervisor，可能从上述目录都找不到配置文件，可以利用官方提供的命令生成配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> echo_supervisord_conf &gt; supervisor.conf</span></span><br></pre></td></tr></table></figure><p>这个时候 cat 进程应该已经跑起来了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ps aux | grep /bin/cat</span></span><br></pre></td></tr></table></figure><p>杀掉进程，进程 id 会发生变化，证明 supervisor 又把 cat 拉了起来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo <span class="built_in">kill</span> 9 &lt;进程ID&gt;</span></span><br></pre></td></tr></table></figure><h3 id="核心配置讲解"><a href="#核心配置讲解" class="headerlink" title="核心配置讲解"></a>核心配置讲解</h3><p>配置文件中的选项并不止 command，官方提供了很多配置项。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[program:name]</span></span><br><span class="line"><span class="attr">command</span>=sh /tmp/echo_time.sh</span><br><span class="line"><span class="attr">priority</span>=<span class="number">999</span></span><br><span class="line"><span class="attr">numprocs</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">startsecs</span>=<span class="number">10</span></span><br><span class="line"><span class="attr">startretries</span>=<span class="number">3</span> </span><br><span class="line"><span class="attr">exitcodes</span>=<span class="number">0</span>,<span class="number">2</span></span><br><span class="line"><span class="attr">stopsignal</span>=QUIT</span><br><span class="line"><span class="attr">stopwaitsecs</span>=<span class="number">10</span></span><br><span class="line"><span class="attr">user</span>=root</span><br><span class="line"><span class="attr">log_stdout</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">log_stderr</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">logfile</span>=/tmp/echo_time.log</span><br><span class="line"><span class="attr">logfile_maxbytes</span>=<span class="number">1</span>MB</span><br><span class="line"><span class="attr">logfile_backups</span>=<span class="number">10</span> </span><br><span class="line"><span class="attr">stdout_logfile_maxbytes</span>=<span class="number">20</span>MB </span><br><span class="line"><span class="attr">stdout_logfile_backups</span>=<span class="number">20</span> </span><br><span class="line"><span class="attr">stdout_logfile</span>=/tmp/echo_time.stdout.log</span><br></pre></td></tr></table></figure><p>下面挑选几个配置简要说明</p><ul><li>command：要执行的命令</li><li>priority：执行优先级，值越高就越晚启动，越早关闭</li><li>numprocs：进程数量</li><li>autostart：是否与 supervisord 一起启动</li><li>autorestart：自动重启</li><li>startsecs：延时启动时间，默认为 10 秒</li><li>startretries：启动重试次数，默认为 3 次</li><li>exitcodes：当程序的退出码为 0 或 2 时，重启</li><li>stopsignal：停止信号</li><li>stopwaitsecs：延时停止时间，收到停止指令后多久停止</li><li>user：以哪个用户执行</li></ul><h3 id="动态操作子程序"><a href="#动态操作子程序" class="headerlink" title="动态操作子程序"></a>动态操作子程序</h3><p>添加新的程序，只需增加配置文件，然后执行 supervisorctl update 即可动态添加新的程序，并不需要重启 supervisord 服务。如果出现 refused connection 的提示，可能是没找到配置文件，需要加上配置选项。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> supervisorctl update</span></span><br><span class="line">foo1: added process group</span><br></pre></td></tr></table></figure><p>删除同理，remove 时会先将进程关闭，再从列表中移除。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo1: stopped</span><br><span class="line">foo1: removed process group</span><br></pre></td></tr></table></figure><p>如果需要单独停止某个程序，可以使用 stop 命令，stop 后跟的是 program 名称。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> supervisorctl stop foo</span></span><br><span class="line">foo: stopped</span><br></pre></td></tr></table></figure><p>当然还可以通过 stop all 命令更加暴力的停止所有进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> supervisorctl stop all</span></span><br><span class="line">foo: stopped</span><br><span class="line">foo1: stopped</span><br></pre></td></tr></table></figure><p>反之亦然，启动进程只需要将 stop 改为 start。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> supervisorctl start all</span></span><br></pre></td></tr></table></figure><h4 id="连接到某个进程"><a href="#连接到某个进程" class="headerlink" title="连接到某个进程"></a>连接到某个进程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> supervisorctl <span class="built_in">fg</span> &lt;program 名称&gt;</span></span><br></pre></td></tr></table></figure><h4 id="重启-supervisord"><a href="#重启-supervisord" class="headerlink" title="重启 supervisord"></a>重启 supervisord</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> supervisorctl reload</span></span><br></pre></td></tr></table></figure><h4 id="动态加载-supervisor-conf"><a href="#动态加载-supervisor-conf" class="headerlink" title="动态加载 supervisor.conf"></a>动态加载 supervisor.conf</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> supervisorctl reread</span></span><br></pre></td></tr></table></figure><h4 id="查看所有进程运行状况"><a href="#查看所有进程运行状况" class="headerlink" title="查看所有进程运行状况"></a>查看所有进程运行状况</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> supervisorctl status</span></span><br></pre></td></tr></table></figure><h3 id="Web-界面操作"><a href="#Web-界面操作" class="headerlink" title="Web 界面操作"></a>Web 界面操作</h3><p>官方提供了界面操作方式，需要在 supervisor.conf 中去掉 inet_http_server 的注释。</p><figure class="highlight ini"><figcaption><span>supervisor.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[inet_http_server]</span>         <span class="comment">; inet (TCP) server disabled by default</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9001</span>        <span class="comment">; ip_address:port specifier, *:port for all iface</span></span><br><span class="line"><span class="attr">username</span>=user              <span class="comment">; default is no username (open server)</span></span><br><span class="line"><span class="attr">password</span>=<span class="number">123</span>               <span class="comment">; default is no password (open server)</span></span><br></pre></td></tr></table></figure><p>重启 supervisord。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> supervisorctl reload</span></span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:9001" target="_blank" rel="noopener">http://localhost:9001</a> 可以看到 supervisor 的操作界面。</p><p><img src="http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587696070630.png" alt="file"></p><p>今天文章就到这里，想要了解更多，欢迎查看<a href="http://supervisord.org/" target="_blank" rel="noopener">官方文档</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> supervisor </tag>
            
            <tag> 进程 </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用Github钩子做自动部署</title>
      <link href="/2020/04/22/other/github-webhooks/"/>
      <url>/2020/04/22/other/github-webhooks/</url>
      
        <content type="html"><![CDATA[<p>最近机缘巧合的购置了域名和服务器，不用实在是浪费，再加上一直没有属于自己的个人网站，所以打算用hexo在服务器上玩一下，这样也就不用再纠结用Github pages还是Gitee pages了。当然，今天的主题并不是博客搭建，而是如何利用Github的钩子，将博客代码部署到服务器上。</p><p>毕竟Github的钩子已经历史悠久了，网上有很多开源项目可以拿来用，所以我并没有造轮子，而是去找了5K star的开源Go项目<code>webhook</code>，这个工具的作用是接收Github仓库的变动通知，然后调用你配置好的shell脚本，脚本可以写上代码拉取的命令或是编译的操作等，具体根据个人需求而定。简而言之，它只起着拉通Github与你服务器的作用。</p><p><img src="http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587526481705.png" alt="file"></p><h3 id="webhook工具安装"><a href="#webhook工具安装" class="headerlink" title="webhook工具安装"></a>webhook工具安装</h3><p>因为webhook是Go语言开发的，所以要先安装Go语言。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y golang</span><br></pre></td></tr></table></figure><p>然后就可以用go命令安装webhook了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/adnanh/webhook</span><br></pre></td></tr></table></figure><p>命令安装位置可以通过<code>go env</code>查看，GOPATH就是命令安装路径，比如我的命令就安装在/root/go/bin/webhook。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">go env</span><br><span class="line">...</span><br><span class="line">GOOS="linux"</span><br><span class="line">GOPATH="/root/go"</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h3><p>在编写脚本之前确保服务器有权限拉取github代码，如果已经做了配置可跳过本节去看<a href="#部署脚本编写">部署脚本编写</a>。ssh key是代码托管平台（github、gitee、coding、gitlab等）鉴别你是否有权拉取代码的身份标识，生成只需一行命令和一路回车就行了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line"></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:M6sCf/J/hOu3zLxMkFUVmv3iWIa30CfbxiWqmWCt1YE root@iZwz96y36tk2ecnykzituxZ</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|            ..o. |</span><br><span class="line">|           . o   |</span><br><span class="line">|          . o    |</span><br><span class="line">|       . o .     |</span><br><span class="line">|      E S.  .    |</span><br><span class="line">|  .  . ..Oo ..   |</span><br><span class="line">|   oo o ==Boo .  |</span><br><span class="line">|   .++.+o#== .   |</span><br><span class="line">|    .=*+=+@o     |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p>生成后可通过<code>cat ~/.ssh/id_rsa.pub</code>命令查看，最后将key加入github即可，加法不再赘述，请自行谷歌。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQHBAAABAQCv7LGVJUFdcLL+HZyRFTQIQCdre61Gch76lDVpmWSX9BGGRU3iQS7EU5qApFn1VSvt+yf4rMt2LEkuxGCm1wIyBKZ6LYDViZBeTAfx4BcM1mcpxOX6I/+r07mQ4llTz+poQB1Zp9Y60uk0tbGOVWlCoDBEvf9qeEnQ0qEczEkv7wcawV6pVhlXjFKZgq0EOQbCYoWMvPUl+dwDbTcl/h+7At1nlgfF7IuRHlKf18qvgnTRT2wpiuz4pWdoAi8LcY1JiR1z5OB0oCJ2euhyDND39G2NxZRS1FIVdgCEvioHtdoHOSoWBlcSj0fLFSnscBfRBrCd7yhOP7fFKfrowHMj root@iZwz96y36tk2ecnykzituxZ</span><br></pre></td></tr></table></figure><h3 id="部署脚本编写"><a href="#部署脚本编写" class="headerlink" title="部署脚本编写"></a>部署脚本编写</h3><p>该shell脚本的主要目的是从github拉取代码，脚本内容很简单，只做了目录的简要判断，代码目录存在则更新，不存在则克隆仓库，工作目录和仓库名称、地址请换成自己的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">cd /home/www/website</span><br><span class="line"></span><br><span class="line">if [ ! -d "go-home" ]; then</span><br><span class="line">  git clone https://github.com/pingyeaa/go-home.git</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">cd go-home</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="webhook配置与启动"><a href="#webhook配置与启动" class="headerlink" title="webhook配置与启动"></a>webhook配置与启动</h3><p>编写配置文件hooks.json，格式如下。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"deploy-webhook"</span>,</span><br><span class="line">    <span class="attr">"execute-command"</span>: <span class="string">"deploy.sh"</span>,</span><br><span class="line">    <span class="attr">"command-working-directory"</span>: <span class="string">"/home"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>id：钩子的id，可自定义</li><li>execute-command：要执行的脚本名，就是刚才编写的部署脚本</li><li>command-working-directory：脚本所在目录</li></ul><p>完成后通过webhook命令启动，可以看到id为deploy-webhook的配置已经加载了，我们需要注意的是监听的端口和路径，等下要用到。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/root/go/bin/webhook -hooks hooks.json -verbose</span><br><span class="line"></span><br><span class="line">[webhook] 2020/04/22 15:18:22 version 2.6.11 starting</span><br><span class="line">[webhook] 2020/04/22 15:18:22 setting up os signal watcher</span><br><span class="line">[webhook] 2020/04/22 15:18:22 attempting to load hooks from hooks.json</span><br><span class="line">[webhook] 2020/04/22 15:18:22 found 1 hook(s) in file</span><br><span class="line">[webhook] 2020/04/22 15:18:22   loaded: deploy-webhook</span><br><span class="line">[webhook] 2020/04/22 15:18:22 serving hooks on http://0.0.0.0:9000/hooks/&#123;id&#125;</span><br><span class="line">[webhook] 2020/04/22 15:18:22 os signal watcher ready</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://0.0.0.0:9000/hooks/&#123;id&#125;</span><br></pre></td></tr></table></figure><h3 id="Github-Webhooks配置"><a href="#Github-Webhooks配置" class="headerlink" title="Github Webhooks配置"></a>Github Webhooks配置</h3><p>现在服务器已经启动了webhook程序监听9000端口，接下来仅需要告诉Github这个地址和端口就好了。</p><p>打开仓库设置页，添加webhook。</p><p><img src="http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587523289550.png" alt=""></p><p>配置webhooks，Payload URL就是要通知的地址，把刚才打印出的端口和路径填上即可，其他默认。</p><p><img src="http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541102651.png" alt="file"></p><p>现在可以提交代码测试了，如果推送失败Github中会有错误提示，同样的，成功不仅在Github中能看到，服务器的打印日志也有记录。</p><p><img src="http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541394355.png" alt="file"></p><p><img src="http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541482026.png" alt="file"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> webhooks </tag>
            
            <tag> 钩子 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
