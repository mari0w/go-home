<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何用Github钩子做自动部署</title>
      <link href="/2020/04/22/other/github-webhooks/"/>
      <url>/2020/04/22/other/github-webhooks/</url>
      
        <content type="html"><![CDATA[<p>最近机缘巧合的购置了域名和服务器，不用实在是浪费，再加上一直没有属于自己的个人网站，所以打算用hexo在服务器上玩一下，这样也就不用再纠结用Github pages还是Gitee pages了。当然，今天的主题并不是博客搭建，而是如何利用Github的钩子，将博客代码部署到服务器上。</p><p>毕竟Github的钩子已经历史悠久了，网上有很多开源项目可以拿来用，所以我并没有造轮子，而是去找了5K star的开源Go项目<code>webhook</code>，这个工具的作用是接收Github仓库的变动通知，然后调用你配置好的shell脚本，脚本可以写上代码拉取的命令或是编译的操作等，具体根据个人需求而定。简而言之，它只起着拉通Github与你服务器的作用。</p><p><img src="http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587526481705.png" alt="file"></p><h3 id="webhook工具安装"><a href="#webhook工具安装" class="headerlink" title="webhook工具安装"></a>webhook工具安装</h3><p>因为webhook是Go语言开发的，所以要先安装Go语言。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y golang</span><br></pre></td></tr></table></figure><p>然后就可以用go命令安装webhook了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/adnanh/webhook</span><br></pre></td></tr></table></figure><p>命令安装位置可以通过<code>go env</code>查看，GOPATH就是命令安装路径，比如我的命令就安装在/root/go/bin/webhook。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">go env</span><br><span class="line">...</span><br><span class="line">GOOS="linux"</span><br><span class="line">GOPATH="/root/go"</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h3><p>在编写脚本之前确保服务器有权限拉取github代码，如果已经做了配置可跳过本节去看<a href="#部署脚本编写">部署脚本编写</a>。ssh key是代码托管平台（github、gitee、coding、gitlab等）鉴别你是否有权拉取代码的身份标识，生成只需一行命令和一路回车就行了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line"></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:M6sCf/J/hOu3zLxMkFUVmv3iWIa30CfbxiWqmWCt1YE root@iZwz96y36tk2ecnykzituxZ</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|            ..o. |</span><br><span class="line">|           . o   |</span><br><span class="line">|          . o    |</span><br><span class="line">|       . o .     |</span><br><span class="line">|      E S.  .    |</span><br><span class="line">|  .  . ..Oo ..   |</span><br><span class="line">|   oo o ==Boo .  |</span><br><span class="line">|   .++.+o#== .   |</span><br><span class="line">|    .=*+=+@o     |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p>生成后可通过<code>cat ~/.ssh/id_rsa.pub</code>命令查看，最后将key加入github即可，加法不再赘述，请自行谷歌。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQHBAAABAQCv7LGVJUFdcLL+HZyRFTQIQCdre61Gch76lDVpmWSX9BGGRU3iQS7EU5qApFn1VSvt+yf4rMt2LEkuxGCm1wIyBKZ6LYDViZBeTAfx4BcM1mcpxOX6I/+r07mQ4llTz+poQB1Zp9Y60uk0tbGOVWlCoDBEvf9qeEnQ0qEczEkv7wcawV6pVhlXjFKZgq0EOQbCYoWMvPUl+dwDbTcl/h+7At1nlgfF7IuRHlKf18qvgnTRT2wpiuz4pWdoAi8LcY1JiR1z5OB0oCJ2euhyDND39G2NxZRS1FIVdgCEvioHtdoHOSoWBlcSj0fLFSnscBfRBrCd7yhOP7fFKfrowHMj root@iZwz96y36tk2ecnykzituxZ</span><br></pre></td></tr></table></figure><h3 id="部署脚本编写"><a href="#部署脚本编写" class="headerlink" title="部署脚本编写"></a>部署脚本编写</h3><p>该shell脚本的主要目的是从github拉取代码，脚本内容很简单，只做了目录的简要判断，代码目录存在则更新，不存在则克隆仓库，工作目录和仓库名称、地址请换成自己的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">cd /home/www/website</span><br><span class="line"></span><br><span class="line">if [ ! -d "go-home" ]; then</span><br><span class="line">  git clone https://github.com/pingyeaa/go-home.git</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">cd go-home</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="webhook配置与启动"><a href="#webhook配置与启动" class="headerlink" title="webhook配置与启动"></a>webhook配置与启动</h3><p>编写配置文件hooks.json，格式如下。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"deploy-webhook"</span>,</span><br><span class="line">    <span class="attr">"execute-command"</span>: <span class="string">"deploy.sh"</span>,</span><br><span class="line">    <span class="attr">"command-working-directory"</span>: <span class="string">"/home"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>id：钩子的id，可自定义</li><li>execute-command：要执行的脚本名，就是刚才编写的部署脚本</li><li>command-working-directory：脚本所在目录</li></ul><p>完成后通过webhook命令启动，可以看到id为deploy-webhook的配置已经加载了，我们需要注意的是监听的端口和路径，等下要用到。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/root/go/bin/webhook -hooks hooks.json -verbose</span><br><span class="line"></span><br><span class="line">[webhook] 2020/04/22 15:18:22 version 2.6.11 starting</span><br><span class="line">[webhook] 2020/04/22 15:18:22 setting up os signal watcher</span><br><span class="line">[webhook] 2020/04/22 15:18:22 attempting to load hooks from hooks.json</span><br><span class="line">[webhook] 2020/04/22 15:18:22 found 1 hook(s) in file</span><br><span class="line">[webhook] 2020/04/22 15:18:22   loaded: deploy-webhook</span><br><span class="line">[webhook] 2020/04/22 15:18:22 serving hooks on http://0.0.0.0:9000/hooks/&#123;id&#125;</span><br><span class="line">[webhook] 2020/04/22 15:18:22 os signal watcher ready</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://0.0.0.0:9000/hooks/&#123;id&#125;</span><br></pre></td></tr></table></figure><h3 id="Github-Webhooks配置"><a href="#Github-Webhooks配置" class="headerlink" title="Github Webhooks配置"></a>Github Webhooks配置</h3><p>现在服务器已经启动了webhook程序监听9000端口，接下来仅需要告诉Github这个地址和端口就好了。</p><p>打开仓库设置页，添加webhook。</p><p><img src="http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587523289550.png" alt=""></p><p>配置webhooks，Payload URL就是要通知的地址，把刚才打印出的端口和路径填上即可，其他默认。</p><p><img src="http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541102651.png" alt="file"></p><p>现在可以提交代码测试了，如果推送失败Github中会有错误提示，同样的，成功不仅在Github中能看到，服务器的打印日志也有记录。</p><p><img src="http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541394355.png" alt="file"></p><p><img src="http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541482026.png" alt="file"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> webhooks </tag>
            
            <tag> 钩子 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
