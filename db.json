{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/qrcode.jpg","path":"images/qrcode.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.jpeg","path":"images/favicon.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpeg","path":"images/wechatpay.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/qrcode.png","path":"images/qrcode.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1587453156757},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1587453156759},{"_id":"themes/next/.DS_Store","hash":"024b4fee80e02b17cd3ef579ecbac7cfb3aa5888","modified":1587610861987},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1587453156758},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1587453156757},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1587453156759},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1587453156759},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1587453156759},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1587453156760},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1587453156760},{"_id":"themes/next/_config.yml","hash":"5714c72e16ee008cfa79e72e9b148f588afc7d7a","modified":1587611247405},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1585977960000},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1585977960000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1585977960000},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1585977960000},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1585977960000},{"_id":"source/.DS_Store","hash":"3e3c2f0d5c541f5a95b9dabab908bcf6801cae9d","modified":1587558531590},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1587453156758},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1587453156758},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1587453156758},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1587453156758},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1585977960000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1585977960000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1585977960000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1585977960000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1585977960000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1585977960000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1585977960000},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1585977960000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1585977960000},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1585977960000},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1585977960000},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1585977960000},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1585977960000},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1585977960000},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1585977960000},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1585977960000},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1585977960000},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1585977960000},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1585977960000},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1585977960000},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1585977960000},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1585977960000},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1585977960000},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1585977960000},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1585977960000},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1585977960000},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1585977960000},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1585977960000},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1585977960000},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1585977960000},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1585977960000},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1585977960000},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1585977960000},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1585977960000},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1585977960000},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1585977960000},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1585977960000},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1585977960000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1585977960000},{"_id":"themes/next/source/.DS_Store","hash":"dcb91b58762bab04a028caaee9918abf7ae642fc","modified":1587610861986},{"_id":"source/_posts/.DS_Store","hash":"38c466cbee0f11e898414c06bb2176a7305b1e75","modified":1587559005206},{"_id":"source/tags/index.md","hash":"d614072577e3aafac1d3c5c43e6d74cada7eb52f","modified":1587544311392},{"_id":"source/categories/index.md","hash":"ad7c39b2fc7a6589380f4793f701181f4ae1a978","modified":1587544322176},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1585977960000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1585977960000},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1585977960000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1585977960000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1585977960000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1585977960000},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1585977960000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"700c3e7bd449bce51f6faee42c052e13ed5f8b3e","modified":1585977960000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1585977960000},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1585977960000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1585977960000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1585977960000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1585977960000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1585977960000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1585977960000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1585977960000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1585977960000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1585977960000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1585977960000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1585977960000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1585977960000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1585977960000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1585977960000},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1585977960000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1585977960000},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1585977960000},{"_id":"themes/next/scripts/events/index.js","hash":"bf5e93f9209d111a014a7a6a17e86c05be552d13","modified":1585977960000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1585977960000},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1585977960000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1585977960000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1585977960000},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1585977960000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1585977960000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1585977960000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1585977960000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1585977960000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1585977960000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1585977960000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1585977960000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1585977960000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1585977960000},{"_id":"themes/next/source/images/.DS_Store","hash":"b08a583e8e8719100916791d296f6f1dbfe0aa78","modified":1587610868123},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1585977960000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1585977960000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1585977960000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1585977960000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1585977960000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1585977960000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1585977960000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1585977960000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1585977960000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1585977960000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1585977960000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1585977960000},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1585977960000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1585977960000},{"_id":"themes/next/source/images/qrcode.jpg","hash":"a8789b7a00af57be37d9b136089e639af57cdee7","modified":1587537946012},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1585977960000},{"_id":"themes/next/source/images/favicon.jpeg","hash":"53998c1865e358581dff462411335eba91f60ad4","modified":1587375800594},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1585977960000},{"_id":"themes/next/source/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1585977960000},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1585977960000},{"_id":"themes/next/source/js/local-search.js","hash":"d6673063958127a03881dab2f0376a47f5e08a88","modified":1585977960000},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1585977960000},{"_id":"themes/next/source/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1585977960000},{"_id":"themes/next/source/js/utils.js","hash":"91d174e12c61c332f3b06085d635c2b0f686a758","modified":1585977960000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1585977960000},{"_id":"source/_posts/golang/gpm.md","hash":"02fa316d80ea567b7541c3858b6bcbb9ecd5e085","modified":1587557746732},{"_id":"source/_posts/other/github-webhooks.md","hash":"632a1fc4f8b7d508b95a932d4b59dd4bf42694ed","modified":1587558171741},{"_id":"themes/next/source/images/avatar.jpeg","hash":"72cbdcaf3dc6f2d8f2ef9610fb7e1c52dc10795b","modified":1587537946010},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1585977960000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1585977960000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1585977960000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1585977960000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1585977960000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1585977960000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1585977960000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1585977960000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1585977960000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1585977960000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1585977960000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1585977960000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1585977960000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1585977960000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1585977960000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1585977960000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1585977960000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1585977960000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1585977960000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1585977960000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1585977960000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1585977960000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1585977960000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1585977960000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1585977960000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1585977960000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1585977960000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1585977960000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1585977960000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1585977960000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1585977960000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1585977960000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1585977960000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1585977960000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1585977960000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1585977960000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1585977960000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1585977960000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1585977960000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1585977960000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1585977960000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1585977960000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1585977960000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1585977960000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1585977960000},{"_id":"themes/next/source/images/wechatpay.jpeg","hash":"b838ade1d8abe2e52e65aeadc3ab36f5caa47cc7","modified":1587537946015},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1585977960000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1585977960000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1585977960000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1585977960000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1585977960000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1585977960000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1585977960000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1585977960000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1585977960000},{"_id":"themes/next/source/images/qrcode.png","hash":"4bf38c57894a925f51cb35c898e5c47fcde7c91d","modified":1587537945967},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b3bea92eef0e1fe2e7e294dac2184d16b5b8d666","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1585977960000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1585977960000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1585977960000},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1585977960000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1585977960000},{"_id":"public/baidusitemap.xml","hash":"4de263fad67bbe3cd21fce86a449106290cfeaa8","modified":1587611293978},{"_id":"public/search.xml","hash":"e898c1181df7815afc1330b239c7d6b7ca428ff0","modified":1587611293978},{"_id":"public/sitemap.xml","hash":"22fb1117bdf1c7b782b2ff4e61f2805fb88e4997","modified":1587611293978},{"_id":"public/categories/index.html","hash":"215217e2d424fb3f49f4f5d66e8049a53c137f69","modified":1587611293978},{"_id":"public/categories/杂谈/index.html","hash":"1cd3807334babcba9bc0943858d439d277897ec0","modified":1587611293978},{"_id":"public/tags/golang/index.html","hash":"968fad40ac6122e8e5c8a8776e8ce1d713575d07","modified":1587611293978},{"_id":"public/tags/gpm/index.html","hash":"a6634ea89a674af38d64078efbe00b6d89a600bd","modified":1587611293978},{"_id":"public/tags/调度器/index.html","hash":"80f1630744b31963faa8b30a9fd4ff6ddbc74f48","modified":1587611293978},{"_id":"public/tags/github/index.html","hash":"ae7b2fbbc8daa108942a47a95b913ff03c7c4488","modified":1587611293978},{"_id":"public/tags/webhooks/index.html","hash":"d9dd4a9b91c69fcdb2c352ce1fb6e97db061c59d","modified":1587611293978},{"_id":"public/tags/钩子/index.html","hash":"ad07c2435b7c0042b37a583272b41067a2a72f6c","modified":1587611293978},{"_id":"public/tags/index.html","hash":"d662cb1cefd4e59ab092a1dfdb10b3524d8a97c0","modified":1587611293978},{"_id":"public/2020/04/22/other/github-webhooks/index.html","hash":"49efedc1e955dc62f3d0aa2d336503bfb77789f2","modified":1587611293978},{"_id":"public/2020/04/21/golang/gpm/index.html","hash":"bee22295ca85009885d28d114891c6b677c172f3","modified":1587611293978},{"_id":"public/archives/index.html","hash":"a42d5ed209a2ad796b1314c86967ea4418ccd751","modified":1587611293978},{"_id":"public/archives/2020/index.html","hash":"28292651964d0b1279dbfc7d65262ad7b069149d","modified":1587611293978},{"_id":"public/archives/2020/04/index.html","hash":"16a59abda0d021cc49ad242a375c123d58a36af0","modified":1587611293978},{"_id":"public/index.html","hash":"a2cad741d70ce3170dc4c508321c7adf1a1d533d","modified":1587611293978},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1587611293978},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1587611293978},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1587611293978},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1587611293978},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1587611293978},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1587611293978},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1587611293978},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1587611293978},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1587611293978},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1587611293978},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1587611293978},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1587611293978},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1587611293978},{"_id":"public/images/qrcode.jpg","hash":"a8789b7a00af57be37d9b136089e639af57cdee7","modified":1587611293978},{"_id":"public/images/favicon.jpeg","hash":"53998c1865e358581dff462411335eba91f60ad4","modified":1587611293978},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1587611293978},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1587611293978},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1587611293978},{"_id":"public/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1587611293978},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1587611293978},{"_id":"public/js/local-search.js","hash":"d6673063958127a03881dab2f0376a47f5e08a88","modified":1587611293978},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1587611293978},{"_id":"public/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1587611293978},{"_id":"public/js/utils.js","hash":"91d174e12c61c332f3b06085d635c2b0f686a758","modified":1587611293978},{"_id":"public/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1587611293978},{"_id":"public/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1587611293978},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1587611293978},{"_id":"public/css/main.css","hash":"53c1f172c6f50af68a563e7d7414c4fd24d10d1f","modified":1587611293978},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1587611293978},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1587611293978},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1587611293978},{"_id":"public/images/avatar.jpeg","hash":"72cbdcaf3dc6f2d8f2ef9610fb7e1c52dc10795b","modified":1587611293978},{"_id":"public/images/wechatpay.jpeg","hash":"b838ade1d8abe2e52e65aeadc3ab36f5caa47cc7","modified":1587611293978},{"_id":"public/images/qrcode.png","hash":"4bf38c57894a925f51cb35c898e5c47fcde7c91d","modified":1587611293978}],"Category":[{"name":"杂谈","_id":"ck9c6rv75000a6s95e9c4381t"}],"Data":[],"Page":[{"title":"标签","date":"2020-04-22T07:05:26.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2020-04-22 15:05:26\ntype: \"tags\"\n---\n","updated":"2020-04-22T08:31:51.392Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck9c6rv6500006s956o863krt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2020-04-22T07:06:22.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2020-04-22 15:06:22\ntype: \"categories\"\n---\n","updated":"2020-04-22T08:32:02.176Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck9c6rv6c00016s957xoa4fux","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Golang的GPM模型是什么？","date":"2020-04-21T11:19:34.000Z","_content":"\n> 😋我是平也，这有一个专注Gopher技术成长的开源项目[「go home」](https://github.com/pingyeaa/go-home)\n\n## 导读\n\n相信很多人都听说过Go语言天然支持高并发，原因是内部有协程（goroutine）加持，可以在一个进程中启动成千上万个协程。那么，它凭什么做到如此高的并发呢？那就需要先了解什么是并发模型。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1586933074098.png)\n\n## 并发模型\n\n著名的C++专家Herb Sutter曾经说过“免费的午餐已经终结”。为了让代码运行的更快，单纯依靠更快的硬件已经无法得到满足，我们需要利用多核来挖掘并行的价值，而并发模型的目的就是来告诉你不同执行实体之间是如何协作的。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1586933150449.png)\n\n当然，不同的并发模型的协作方式也不尽相同，常见的并发模型有七种：\n\n- 线程与锁\n- 函数式编程\n- Clojure之道\n- actor\n- 通讯顺序进程（CSP）\n- 数据级并行\n- Lambda架构\n\n而今天，我们只讲与Go语言相关的并发模型CSP，感兴趣的同学可以自行查阅书籍《七周七并发模型》。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1586933889538.png)\n\n## CSP篇\n\nCSP，全称Communicating Sequential Processes，意为通讯顺序进程，它是七大并发模型中的一种，它的核心观念是将两个并发执行的实体通过通道channel连接起来，所有的消息都通过channel传输。其实CSP概念早在1978年就被[东尼·霍尔](#东尼·霍尔)提出，由于近来Go语言的兴起，CSP又火了起来。\n\n那么CSP与Go语言有什么关系呢？接下来我们来看Go语言对CSP并发模型的实现——GPM调度模型。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1586936057139.png)\n\n## GPM调度模型\n\nGPM代表了三个角色，分别是Goroutine、Processor、Machine。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587000414117.png)\n\n- Goroutine：就是咱们常用的用go关键字创建的执行体，它对应一个结构体g，结构体里保存了goroutine的堆栈信息\n- Machine：表示操作系统的线程\n- Processor：表示处理器，有了它才能建立G、M的联系\n\n### Goroutine\n\nGoroutine就是代码中使用go关键词创建的执行单元，也是大家熟知的有“轻量级线程”之称的协程，协程是不为操作系统所知的，它由编程语言层面实现，上下文切换不需要经过内核态，再加上协程占用的内存空间极小，所以有着非常大的发展潜力。\n\n```go\ngo func() {}()\n```\n\n在Go语言中，Goroutine由一个名为`runtime.go`的结构体表示，该结构体非常复杂，有40多个成员变量，主要存储执行栈、状态、当前占用的线程、调度相关的数据。还有玩大家很想获取的goroutine标识，但是很抱歉，官方考虑到Go语言的发展，设置成私有了，不给你调用😏。\n\n```go\ntype g struct {\n\tstack struct {\n\t\tlo uintptr\n\t\thi uintptr\n\t} \t\t\t\t\t\t\t// 栈内存：[stack.lo, stack.hi)\n\tstackguard0\tuintptr\n\tstackguard1 uintptr\n\n\t_panic       *_panic\n\t_defer       *_defer\n\tm            *m\t\t\t\t// 当前的 m\n\tsched        gobuf\n\tstktopsp     uintptr\t\t// 期望 sp 位于栈顶，用于回溯检查\n\tparam        unsafe.Pointer // wakeup 唤醒时候传递的参数\n\tatomicstatus uint32\n\tgoid         int64\n\tpreempt      bool       \t// 抢占信号，stackguard0 = stackpreempt 的副本\n\ttimer        *timer         // 为 time.Sleep 缓存的计时器\n\n\t...\n}\n```\n\nGoroutine调度相关的数据存储在sched，在协程切换、恢复上下文的时候用到。\n\n```go\ntype gobuf struct {\n\tsp   uintptr\n\tpc   uintptr\n\tg    guintptr\n\tret  sys.Uintreg\n\t...\n}\n```\n\n### Machine\n\nM就是对应操作系统的线程，最多会有GOMAXPROCS个活跃线程能够正常运行，默认情况下GOMAXPROCS被设置为内核数，假如有四个内核，那么默认就创建四个线程，每一个线程对应一个runtime.m结构体。线程数等于CPU个数的原因是，每个线程分配到一个CPU上就不至于出现线程的上下文切换，可以保证系统开销降到最低。\n\n```go\ntype m struct {\n\tg0   *g \n\tcurg *g\n\t...\n}\n```\n\nM里面存了两个比较重要的东西，一个是g0，一个是curg。\n\n- g0：会深度参与运行时的调度过程，比如goroutine的创建、内存分配等\n- curg：代表当前正在线程上执行的goroutine。\n\n刚才说P是负责M与G的关联，所以M里面还要存储与P相关的数据。\n\n```go\ntype m struct {\n  ...\n\tp             puintptr\n\tnextp         puintptr\n\toldp          puintptr\n}\n```\n\n- p：正在运行代码的处理器\n- nextp：暂存的处理器\n- old：系统调用之前的线程的处理器\n\n### Processor\n\nProccessor负责Machine与Goroutine的连接，它能提供线程需要的上下文环境，也能分配G到它应该去的线程上执行，有了它，每个G都能得到合理的调用，每个线程都不再浑水摸鱼，真是居家必备之良品。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587113752718.png)\n\n同样的，处理器的数量也是默认按照GOMAXPROCS来设置的，与线程的数量一一对应。\n\n```go\ntype p struct {\n\tm           muintptr\n\n\trunqhead uint32\n\trunqtail uint32\n\trunq     [256]guintptr\n\trunnext guintptr\n\t...\n}\n```\n\n结构体P中存储了性能追踪、垃圾回收、计时器等相关的字段外，还存储了处理器的待运行队列，队列中存储的是待执行的Goroutine列表。\n\n### 三者的关系\n\n首先，默认启动四个线程四个处理器，然后互相绑定。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587114801967.png)\n\n这个时候，一个Goroutine结构体被创建，在进行函数体地址、参数起始地址、参数长度等信息以及调度相关属性更新之后，它就要进到一个处理器的队列等待发车。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587115359415.png)\n\n啥，又创建了一个G？那就轮流往其他P里面放呗，相信你排队取号的时候看到其他窗口没人排队也会过去的。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587115552203.png)\n\n假如有很多G，都塞满了怎么办呢？那就不把G塞到处理器的私有队列里了，而是把它塞到全局队列里（候车大厅）。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587115783681.png)\n\n除了往里塞之外，M这边还要疯狂往外取，首先去处理器的私有队列里取G执行，如果取完的话就去全局队列取，如果全局队列里也没有的话，就去其他处理器队列里偷，哇，这么饥渴，简直是恶魔啊！\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587116221683.png)\n\n如果哪里都没找到要执行的G呢？那M就会因为太失望和P断开关系，然后去睡觉（idle）了。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587116525502.png)\n\n那如果两个Goroutine正在通过channel做一些恩恩爱爱的事阻塞住了怎么办，难道M要等他们完事了再继续执行？显然不会，M并不稀罕这对Go男女，而会转身去找别的G执行。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587116986094.png)\n\n### 系统调用\n\n如果G进行了系统调用syscall，M也会跟着进入系统调用状态，那么这个P留在这里就浪费了，怎么办呢？这点精妙之处在于，P不会傻傻的等待G和M系统调用完成，而会去找其他比较闲的M执行其他的G。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587123545411.png)\n\n当G完成了系统调用，因为要继续往下执行，所以必须要再找一个空闲的处理器发车。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587124060921.png)\n\n如果没有空闲的处理器了，那就只能把G放回全局队列当中等待分配。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587124627966.png)\n\n### sysmon\n\nsysmon是我们的保洁阿姨，它是一个M，又叫监控线程，不需要P就可以独立运行，每20us~10ms会被唤醒一次出来打扫卫生，主要工作就是回收垃圾、回收长时间系统调度阻塞的P、向长时间运行的G发出抢占调度等等。\n\n## 词条解释\n\n### 东尼·霍尔\n东尼·霍尔，英国计算机科学家，图灵奖得主，他设计了牛气冲天的快速排序算法、霍尔逻辑以及CSP模型。2011年获颁约翰·冯诺依曼奖。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1586934654476.png)","source":"_posts/golang/gpm.md","raw":"---\ntitle: Golang的GPM模型是什么？\ndate: 2020-04-21 19:19:34\ntags: \n- golang\n- gpm\n- 调度器\n\n---\n\n> 😋我是平也，这有一个专注Gopher技术成长的开源项目[「go home」](https://github.com/pingyeaa/go-home)\n\n## 导读\n\n相信很多人都听说过Go语言天然支持高并发，原因是内部有协程（goroutine）加持，可以在一个进程中启动成千上万个协程。那么，它凭什么做到如此高的并发呢？那就需要先了解什么是并发模型。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1586933074098.png)\n\n## 并发模型\n\n著名的C++专家Herb Sutter曾经说过“免费的午餐已经终结”。为了让代码运行的更快，单纯依靠更快的硬件已经无法得到满足，我们需要利用多核来挖掘并行的价值，而并发模型的目的就是来告诉你不同执行实体之间是如何协作的。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1586933150449.png)\n\n当然，不同的并发模型的协作方式也不尽相同，常见的并发模型有七种：\n\n- 线程与锁\n- 函数式编程\n- Clojure之道\n- actor\n- 通讯顺序进程（CSP）\n- 数据级并行\n- Lambda架构\n\n而今天，我们只讲与Go语言相关的并发模型CSP，感兴趣的同学可以自行查阅书籍《七周七并发模型》。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1586933889538.png)\n\n## CSP篇\n\nCSP，全称Communicating Sequential Processes，意为通讯顺序进程，它是七大并发模型中的一种，它的核心观念是将两个并发执行的实体通过通道channel连接起来，所有的消息都通过channel传输。其实CSP概念早在1978年就被[东尼·霍尔](#东尼·霍尔)提出，由于近来Go语言的兴起，CSP又火了起来。\n\n那么CSP与Go语言有什么关系呢？接下来我们来看Go语言对CSP并发模型的实现——GPM调度模型。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1586936057139.png)\n\n## GPM调度模型\n\nGPM代表了三个角色，分别是Goroutine、Processor、Machine。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587000414117.png)\n\n- Goroutine：就是咱们常用的用go关键字创建的执行体，它对应一个结构体g，结构体里保存了goroutine的堆栈信息\n- Machine：表示操作系统的线程\n- Processor：表示处理器，有了它才能建立G、M的联系\n\n### Goroutine\n\nGoroutine就是代码中使用go关键词创建的执行单元，也是大家熟知的有“轻量级线程”之称的协程，协程是不为操作系统所知的，它由编程语言层面实现，上下文切换不需要经过内核态，再加上协程占用的内存空间极小，所以有着非常大的发展潜力。\n\n```go\ngo func() {}()\n```\n\n在Go语言中，Goroutine由一个名为`runtime.go`的结构体表示，该结构体非常复杂，有40多个成员变量，主要存储执行栈、状态、当前占用的线程、调度相关的数据。还有玩大家很想获取的goroutine标识，但是很抱歉，官方考虑到Go语言的发展，设置成私有了，不给你调用😏。\n\n```go\ntype g struct {\n\tstack struct {\n\t\tlo uintptr\n\t\thi uintptr\n\t} \t\t\t\t\t\t\t// 栈内存：[stack.lo, stack.hi)\n\tstackguard0\tuintptr\n\tstackguard1 uintptr\n\n\t_panic       *_panic\n\t_defer       *_defer\n\tm            *m\t\t\t\t// 当前的 m\n\tsched        gobuf\n\tstktopsp     uintptr\t\t// 期望 sp 位于栈顶，用于回溯检查\n\tparam        unsafe.Pointer // wakeup 唤醒时候传递的参数\n\tatomicstatus uint32\n\tgoid         int64\n\tpreempt      bool       \t// 抢占信号，stackguard0 = stackpreempt 的副本\n\ttimer        *timer         // 为 time.Sleep 缓存的计时器\n\n\t...\n}\n```\n\nGoroutine调度相关的数据存储在sched，在协程切换、恢复上下文的时候用到。\n\n```go\ntype gobuf struct {\n\tsp   uintptr\n\tpc   uintptr\n\tg    guintptr\n\tret  sys.Uintreg\n\t...\n}\n```\n\n### Machine\n\nM就是对应操作系统的线程，最多会有GOMAXPROCS个活跃线程能够正常运行，默认情况下GOMAXPROCS被设置为内核数，假如有四个内核，那么默认就创建四个线程，每一个线程对应一个runtime.m结构体。线程数等于CPU个数的原因是，每个线程分配到一个CPU上就不至于出现线程的上下文切换，可以保证系统开销降到最低。\n\n```go\ntype m struct {\n\tg0   *g \n\tcurg *g\n\t...\n}\n```\n\nM里面存了两个比较重要的东西，一个是g0，一个是curg。\n\n- g0：会深度参与运行时的调度过程，比如goroutine的创建、内存分配等\n- curg：代表当前正在线程上执行的goroutine。\n\n刚才说P是负责M与G的关联，所以M里面还要存储与P相关的数据。\n\n```go\ntype m struct {\n  ...\n\tp             puintptr\n\tnextp         puintptr\n\toldp          puintptr\n}\n```\n\n- p：正在运行代码的处理器\n- nextp：暂存的处理器\n- old：系统调用之前的线程的处理器\n\n### Processor\n\nProccessor负责Machine与Goroutine的连接，它能提供线程需要的上下文环境，也能分配G到它应该去的线程上执行，有了它，每个G都能得到合理的调用，每个线程都不再浑水摸鱼，真是居家必备之良品。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587113752718.png)\n\n同样的，处理器的数量也是默认按照GOMAXPROCS来设置的，与线程的数量一一对应。\n\n```go\ntype p struct {\n\tm           muintptr\n\n\trunqhead uint32\n\trunqtail uint32\n\trunq     [256]guintptr\n\trunnext guintptr\n\t...\n}\n```\n\n结构体P中存储了性能追踪、垃圾回收、计时器等相关的字段外，还存储了处理器的待运行队列，队列中存储的是待执行的Goroutine列表。\n\n### 三者的关系\n\n首先，默认启动四个线程四个处理器，然后互相绑定。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587114801967.png)\n\n这个时候，一个Goroutine结构体被创建，在进行函数体地址、参数起始地址、参数长度等信息以及调度相关属性更新之后，它就要进到一个处理器的队列等待发车。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587115359415.png)\n\n啥，又创建了一个G？那就轮流往其他P里面放呗，相信你排队取号的时候看到其他窗口没人排队也会过去的。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587115552203.png)\n\n假如有很多G，都塞满了怎么办呢？那就不把G塞到处理器的私有队列里了，而是把它塞到全局队列里（候车大厅）。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587115783681.png)\n\n除了往里塞之外，M这边还要疯狂往外取，首先去处理器的私有队列里取G执行，如果取完的话就去全局队列取，如果全局队列里也没有的话，就去其他处理器队列里偷，哇，这么饥渴，简直是恶魔啊！\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587116221683.png)\n\n如果哪里都没找到要执行的G呢？那M就会因为太失望和P断开关系，然后去睡觉（idle）了。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587116525502.png)\n\n那如果两个Goroutine正在通过channel做一些恩恩爱爱的事阻塞住了怎么办，难道M要等他们完事了再继续执行？显然不会，M并不稀罕这对Go男女，而会转身去找别的G执行。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587116986094.png)\n\n### 系统调用\n\n如果G进行了系统调用syscall，M也会跟着进入系统调用状态，那么这个P留在这里就浪费了，怎么办呢？这点精妙之处在于，P不会傻傻的等待G和M系统调用完成，而会去找其他比较闲的M执行其他的G。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587123545411.png)\n\n当G完成了系统调用，因为要继续往下执行，所以必须要再找一个空闲的处理器发车。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587124060921.png)\n\n如果没有空闲的处理器了，那就只能把G放回全局队列当中等待分配。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587124627966.png)\n\n### sysmon\n\nsysmon是我们的保洁阿姨，它是一个M，又叫监控线程，不需要P就可以独立运行，每20us~10ms会被唤醒一次出来打扫卫生，主要工作就是回收垃圾、回收长时间系统调度阻塞的P、向长时间运行的G发出抢占调度等等。\n\n## 词条解释\n\n### 东尼·霍尔\n东尼·霍尔，英国计算机科学家，图灵奖得主，他设计了牛气冲天的快速排序算法、霍尔逻辑以及CSP模型。2011年获颁约翰·冯诺依曼奖。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1586934654476.png)","slug":"golang/gpm","published":1,"updated":"2020-04-22T12:15:46.732Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9c6rv6q00026s950xy9c8df","content":"<blockquote>\n<p>😋我是平也，这有一个专注Gopher技术成长的开源项目<a href=\"https://github.com/pingyeaa/go-home\" target=\"_blank\" rel=\"noopener\">「go home」</a></p>\n</blockquote>\n<h2 id=\"导读\"><a href=\"#导读\" class=\"headerlink\" title=\"导读\"></a>导读</h2><p>相信很多人都听说过Go语言天然支持高并发，原因是内部有协程（goroutine）加持，可以在一个进程中启动成千上万个协程。那么，它凭什么做到如此高的并发呢？那就需要先了解什么是并发模型。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1586933074098.png\" alt=\"file\"></p>\n<h2 id=\"并发模型\"><a href=\"#并发模型\" class=\"headerlink\" title=\"并发模型\"></a>并发模型</h2><p>著名的C++专家Herb Sutter曾经说过“免费的午餐已经终结”。为了让代码运行的更快，单纯依靠更快的硬件已经无法得到满足，我们需要利用多核来挖掘并行的价值，而并发模型的目的就是来告诉你不同执行实体之间是如何协作的。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1586933150449.png\" alt=\"file\"></p>\n<p>当然，不同的并发模型的协作方式也不尽相同，常见的并发模型有七种：</p>\n<ul>\n<li>线程与锁</li>\n<li>函数式编程</li>\n<li>Clojure之道</li>\n<li>actor</li>\n<li>通讯顺序进程（CSP）</li>\n<li>数据级并行</li>\n<li>Lambda架构</li>\n</ul>\n<p>而今天，我们只讲与Go语言相关的并发模型CSP，感兴趣的同学可以自行查阅书籍《七周七并发模型》。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1586933889538.png\" alt=\"file\"></p>\n<h2 id=\"CSP篇\"><a href=\"#CSP篇\" class=\"headerlink\" title=\"CSP篇\"></a>CSP篇</h2><p>CSP，全称Communicating Sequential Processes，意为通讯顺序进程，它是七大并发模型中的一种，它的核心观念是将两个并发执行的实体通过通道channel连接起来，所有的消息都通过channel传输。其实CSP概念早在1978年就被<a href=\"#东尼·霍尔\">东尼·霍尔</a>提出，由于近来Go语言的兴起，CSP又火了起来。</p>\n<p>那么CSP与Go语言有什么关系呢？接下来我们来看Go语言对CSP并发模型的实现——GPM调度模型。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1586936057139.png\" alt=\"file\"></p>\n<h2 id=\"GPM调度模型\"><a href=\"#GPM调度模型\" class=\"headerlink\" title=\"GPM调度模型\"></a>GPM调度模型</h2><p>GPM代表了三个角色，分别是Goroutine、Processor、Machine。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587000414117.png\" alt=\"file\"></p>\n<ul>\n<li>Goroutine：就是咱们常用的用go关键字创建的执行体，它对应一个结构体g，结构体里保存了goroutine的堆栈信息</li>\n<li>Machine：表示操作系统的线程</li>\n<li>Processor：表示处理器，有了它才能建立G、M的联系</li>\n</ul>\n<h3 id=\"Goroutine\"><a href=\"#Goroutine\" class=\"headerlink\" title=\"Goroutine\"></a>Goroutine</h3><p>Goroutine就是代码中使用go关键词创建的执行单元，也是大家熟知的有“轻量级线程”之称的协程，协程是不为操作系统所知的，它由编程语言层面实现，上下文切换不需要经过内核态，再加上协程占用的内存空间极小，所以有着非常大的发展潜力。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;&#125;()</span><br></pre></td></tr></table></figure>\n\n<p>在Go语言中，Goroutine由一个名为<code>runtime.go</code>的结构体表示，该结构体非常复杂，有40多个成员变量，主要存储执行栈、状态、当前占用的线程、调度相关的数据。还有玩大家很想获取的goroutine标识，但是很抱歉，官方考虑到Go语言的发展，设置成私有了，不给你调用😏。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> g <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tstack <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tlo <span class=\"keyword\">uintptr</span></span><br><span class=\"line\">\t\thi <span class=\"keyword\">uintptr</span></span><br><span class=\"line\">\t&#125; \t\t\t\t\t\t\t<span class=\"comment\">// 栈内存：[stack.lo, stack.hi)</span></span><br><span class=\"line\">\tstackguard0\t<span class=\"keyword\">uintptr</span></span><br><span class=\"line\">\tstackguard1 <span class=\"keyword\">uintptr</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t_panic       *_panic</span><br><span class=\"line\">\t_defer       *_defer</span><br><span class=\"line\">\tm            *m\t\t\t\t<span class=\"comment\">// 当前的 m</span></span><br><span class=\"line\">\tsched        gobuf</span><br><span class=\"line\">\tstktopsp     <span class=\"keyword\">uintptr</span>\t\t<span class=\"comment\">// 期望 sp 位于栈顶，用于回溯检查</span></span><br><span class=\"line\">\tparam        unsafe.Pointer <span class=\"comment\">// wakeup 唤醒时候传递的参数</span></span><br><span class=\"line\">\tatomicstatus <span class=\"keyword\">uint32</span></span><br><span class=\"line\">\tgoid         <span class=\"keyword\">int64</span></span><br><span class=\"line\">\tpreempt      <span class=\"keyword\">bool</span>       \t<span class=\"comment\">// 抢占信号，stackguard0 = stackpreempt 的副本</span></span><br><span class=\"line\">\ttimer        *timer         <span class=\"comment\">// 为 time.Sleep 缓存的计时器</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Goroutine调度相关的数据存储在sched，在协程切换、恢复上下文的时候用到。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> gobuf <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tsp   <span class=\"keyword\">uintptr</span></span><br><span class=\"line\">\tpc   <span class=\"keyword\">uintptr</span></span><br><span class=\"line\">\tg    guintptr</span><br><span class=\"line\">\tret  sys.Uintreg</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Machine\"><a href=\"#Machine\" class=\"headerlink\" title=\"Machine\"></a>Machine</h3><p>M就是对应操作系统的线程，最多会有GOMAXPROCS个活跃线程能够正常运行，默认情况下GOMAXPROCS被设置为内核数，假如有四个内核，那么默认就创建四个线程，每一个线程对应一个runtime.m结构体。线程数等于CPU个数的原因是，每个线程分配到一个CPU上就不至于出现线程的上下文切换，可以保证系统开销降到最低。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> m <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tg0   *g </span><br><span class=\"line\">\tcurg *g</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>M里面存了两个比较重要的东西，一个是g0，一个是curg。</p>\n<ul>\n<li>g0：会深度参与运行时的调度过程，比如goroutine的创建、内存分配等</li>\n<li>curg：代表当前正在线程上执行的goroutine。</li>\n</ul>\n<p>刚才说P是负责M与G的关联，所以M里面还要存储与P相关的数据。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> m <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">\tp             puintptr</span><br><span class=\"line\">\tnextp         puintptr</span><br><span class=\"line\">\toldp          puintptr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>p：正在运行代码的处理器</li>\n<li>nextp：暂存的处理器</li>\n<li>old：系统调用之前的线程的处理器</li>\n</ul>\n<h3 id=\"Processor\"><a href=\"#Processor\" class=\"headerlink\" title=\"Processor\"></a>Processor</h3><p>Proccessor负责Machine与Goroutine的连接，它能提供线程需要的上下文环境，也能分配G到它应该去的线程上执行，有了它，每个G都能得到合理的调用，每个线程都不再浑水摸鱼，真是居家必备之良品。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587113752718.png\" alt=\"file\"></p>\n<p>同样的，处理器的数量也是默认按照GOMAXPROCS来设置的，与线程的数量一一对应。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> p <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tm           muintptr</span><br><span class=\"line\"></span><br><span class=\"line\">\trunqhead <span class=\"keyword\">uint32</span></span><br><span class=\"line\">\trunqtail <span class=\"keyword\">uint32</span></span><br><span class=\"line\">\trunq     [<span class=\"number\">256</span>]guintptr</span><br><span class=\"line\">\trunnext guintptr</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结构体P中存储了性能追踪、垃圾回收、计时器等相关的字段外，还存储了处理器的待运行队列，队列中存储的是待执行的Goroutine列表。</p>\n<h3 id=\"三者的关系\"><a href=\"#三者的关系\" class=\"headerlink\" title=\"三者的关系\"></a>三者的关系</h3><p>首先，默认启动四个线程四个处理器，然后互相绑定。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587114801967.png\" alt=\"file\"></p>\n<p>这个时候，一个Goroutine结构体被创建，在进行函数体地址、参数起始地址、参数长度等信息以及调度相关属性更新之后，它就要进到一个处理器的队列等待发车。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587115359415.png\" alt=\"file\"></p>\n<p>啥，又创建了一个G？那就轮流往其他P里面放呗，相信你排队取号的时候看到其他窗口没人排队也会过去的。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587115552203.png\" alt=\"file\"></p>\n<p>假如有很多G，都塞满了怎么办呢？那就不把G塞到处理器的私有队列里了，而是把它塞到全局队列里（候车大厅）。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587115783681.png\" alt=\"file\"></p>\n<p>除了往里塞之外，M这边还要疯狂往外取，首先去处理器的私有队列里取G执行，如果取完的话就去全局队列取，如果全局队列里也没有的话，就去其他处理器队列里偷，哇，这么饥渴，简直是恶魔啊！</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587116221683.png\" alt=\"file\"></p>\n<p>如果哪里都没找到要执行的G呢？那M就会因为太失望和P断开关系，然后去睡觉（idle）了。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587116525502.png\" alt=\"file\"></p>\n<p>那如果两个Goroutine正在通过channel做一些恩恩爱爱的事阻塞住了怎么办，难道M要等他们完事了再继续执行？显然不会，M并不稀罕这对Go男女，而会转身去找别的G执行。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587116986094.png\" alt=\"file\"></p>\n<h3 id=\"系统调用\"><a href=\"#系统调用\" class=\"headerlink\" title=\"系统调用\"></a>系统调用</h3><p>如果G进行了系统调用syscall，M也会跟着进入系统调用状态，那么这个P留在这里就浪费了，怎么办呢？这点精妙之处在于，P不会傻傻的等待G和M系统调用完成，而会去找其他比较闲的M执行其他的G。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587123545411.png\" alt=\"file\"></p>\n<p>当G完成了系统调用，因为要继续往下执行，所以必须要再找一个空闲的处理器发车。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587124060921.png\" alt=\"file\"></p>\n<p>如果没有空闲的处理器了，那就只能把G放回全局队列当中等待分配。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587124627966.png\" alt=\"file\"></p>\n<h3 id=\"sysmon\"><a href=\"#sysmon\" class=\"headerlink\" title=\"sysmon\"></a>sysmon</h3><p>sysmon是我们的保洁阿姨，它是一个M，又叫监控线程，不需要P就可以独立运行，每20us~10ms会被唤醒一次出来打扫卫生，主要工作就是回收垃圾、回收长时间系统调度阻塞的P、向长时间运行的G发出抢占调度等等。</p>\n<h2 id=\"词条解释\"><a href=\"#词条解释\" class=\"headerlink\" title=\"词条解释\"></a>词条解释</h2><h3 id=\"东尼·霍尔\"><a href=\"#东尼·霍尔\" class=\"headerlink\" title=\"东尼·霍尔\"></a>东尼·霍尔</h3><p>东尼·霍尔，英国计算机科学家，图灵奖得主，他设计了牛气冲天的快速排序算法、霍尔逻辑以及CSP模型。2011年获颁约翰·冯诺依曼奖。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1586934654476.png\" alt=\"file\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>😋我是平也，这有一个专注Gopher技术成长的开源项目<a href=\"https://github.com/pingyeaa/go-home\" target=\"_blank\" rel=\"noopener\">「go home」</a></p>\n</blockquote>\n<h2 id=\"导读\"><a href=\"#导读\" class=\"headerlink\" title=\"导读\"></a>导读</h2><p>相信很多人都听说过Go语言天然支持高并发，原因是内部有协程（goroutine）加持，可以在一个进程中启动成千上万个协程。那么，它凭什么做到如此高的并发呢？那就需要先了解什么是并发模型。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1586933074098.png\" alt=\"file\"></p>\n<h2 id=\"并发模型\"><a href=\"#并发模型\" class=\"headerlink\" title=\"并发模型\"></a>并发模型</h2><p>著名的C++专家Herb Sutter曾经说过“免费的午餐已经终结”。为了让代码运行的更快，单纯依靠更快的硬件已经无法得到满足，我们需要利用多核来挖掘并行的价值，而并发模型的目的就是来告诉你不同执行实体之间是如何协作的。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1586933150449.png\" alt=\"file\"></p>\n<p>当然，不同的并发模型的协作方式也不尽相同，常见的并发模型有七种：</p>\n<ul>\n<li>线程与锁</li>\n<li>函数式编程</li>\n<li>Clojure之道</li>\n<li>actor</li>\n<li>通讯顺序进程（CSP）</li>\n<li>数据级并行</li>\n<li>Lambda架构</li>\n</ul>\n<p>而今天，我们只讲与Go语言相关的并发模型CSP，感兴趣的同学可以自行查阅书籍《七周七并发模型》。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1586933889538.png\" alt=\"file\"></p>\n<h2 id=\"CSP篇\"><a href=\"#CSP篇\" class=\"headerlink\" title=\"CSP篇\"></a>CSP篇</h2><p>CSP，全称Communicating Sequential Processes，意为通讯顺序进程，它是七大并发模型中的一种，它的核心观念是将两个并发执行的实体通过通道channel连接起来，所有的消息都通过channel传输。其实CSP概念早在1978年就被<a href=\"#东尼·霍尔\">东尼·霍尔</a>提出，由于近来Go语言的兴起，CSP又火了起来。</p>\n<p>那么CSP与Go语言有什么关系呢？接下来我们来看Go语言对CSP并发模型的实现——GPM调度模型。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1586936057139.png\" alt=\"file\"></p>\n<h2 id=\"GPM调度模型\"><a href=\"#GPM调度模型\" class=\"headerlink\" title=\"GPM调度模型\"></a>GPM调度模型</h2><p>GPM代表了三个角色，分别是Goroutine、Processor、Machine。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587000414117.png\" alt=\"file\"></p>\n<ul>\n<li>Goroutine：就是咱们常用的用go关键字创建的执行体，它对应一个结构体g，结构体里保存了goroutine的堆栈信息</li>\n<li>Machine：表示操作系统的线程</li>\n<li>Processor：表示处理器，有了它才能建立G、M的联系</li>\n</ul>\n<h3 id=\"Goroutine\"><a href=\"#Goroutine\" class=\"headerlink\" title=\"Goroutine\"></a>Goroutine</h3><p>Goroutine就是代码中使用go关键词创建的执行单元，也是大家熟知的有“轻量级线程”之称的协程，协程是不为操作系统所知的，它由编程语言层面实现，上下文切换不需要经过内核态，再加上协程占用的内存空间极小，所以有着非常大的发展潜力。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;&#125;()</span><br></pre></td></tr></table></figure>\n\n<p>在Go语言中，Goroutine由一个名为<code>runtime.go</code>的结构体表示，该结构体非常复杂，有40多个成员变量，主要存储执行栈、状态、当前占用的线程、调度相关的数据。还有玩大家很想获取的goroutine标识，但是很抱歉，官方考虑到Go语言的发展，设置成私有了，不给你调用😏。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> g <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tstack <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tlo <span class=\"keyword\">uintptr</span></span><br><span class=\"line\">\t\thi <span class=\"keyword\">uintptr</span></span><br><span class=\"line\">\t&#125; \t\t\t\t\t\t\t<span class=\"comment\">// 栈内存：[stack.lo, stack.hi)</span></span><br><span class=\"line\">\tstackguard0\t<span class=\"keyword\">uintptr</span></span><br><span class=\"line\">\tstackguard1 <span class=\"keyword\">uintptr</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t_panic       *_panic</span><br><span class=\"line\">\t_defer       *_defer</span><br><span class=\"line\">\tm            *m\t\t\t\t<span class=\"comment\">// 当前的 m</span></span><br><span class=\"line\">\tsched        gobuf</span><br><span class=\"line\">\tstktopsp     <span class=\"keyword\">uintptr</span>\t\t<span class=\"comment\">// 期望 sp 位于栈顶，用于回溯检查</span></span><br><span class=\"line\">\tparam        unsafe.Pointer <span class=\"comment\">// wakeup 唤醒时候传递的参数</span></span><br><span class=\"line\">\tatomicstatus <span class=\"keyword\">uint32</span></span><br><span class=\"line\">\tgoid         <span class=\"keyword\">int64</span></span><br><span class=\"line\">\tpreempt      <span class=\"keyword\">bool</span>       \t<span class=\"comment\">// 抢占信号，stackguard0 = stackpreempt 的副本</span></span><br><span class=\"line\">\ttimer        *timer         <span class=\"comment\">// 为 time.Sleep 缓存的计时器</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Goroutine调度相关的数据存储在sched，在协程切换、恢复上下文的时候用到。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> gobuf <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tsp   <span class=\"keyword\">uintptr</span></span><br><span class=\"line\">\tpc   <span class=\"keyword\">uintptr</span></span><br><span class=\"line\">\tg    guintptr</span><br><span class=\"line\">\tret  sys.Uintreg</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Machine\"><a href=\"#Machine\" class=\"headerlink\" title=\"Machine\"></a>Machine</h3><p>M就是对应操作系统的线程，最多会有GOMAXPROCS个活跃线程能够正常运行，默认情况下GOMAXPROCS被设置为内核数，假如有四个内核，那么默认就创建四个线程，每一个线程对应一个runtime.m结构体。线程数等于CPU个数的原因是，每个线程分配到一个CPU上就不至于出现线程的上下文切换，可以保证系统开销降到最低。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> m <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tg0   *g </span><br><span class=\"line\">\tcurg *g</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>M里面存了两个比较重要的东西，一个是g0，一个是curg。</p>\n<ul>\n<li>g0：会深度参与运行时的调度过程，比如goroutine的创建、内存分配等</li>\n<li>curg：代表当前正在线程上执行的goroutine。</li>\n</ul>\n<p>刚才说P是负责M与G的关联，所以M里面还要存储与P相关的数据。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> m <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">\tp             puintptr</span><br><span class=\"line\">\tnextp         puintptr</span><br><span class=\"line\">\toldp          puintptr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>p：正在运行代码的处理器</li>\n<li>nextp：暂存的处理器</li>\n<li>old：系统调用之前的线程的处理器</li>\n</ul>\n<h3 id=\"Processor\"><a href=\"#Processor\" class=\"headerlink\" title=\"Processor\"></a>Processor</h3><p>Proccessor负责Machine与Goroutine的连接，它能提供线程需要的上下文环境，也能分配G到它应该去的线程上执行，有了它，每个G都能得到合理的调用，每个线程都不再浑水摸鱼，真是居家必备之良品。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587113752718.png\" alt=\"file\"></p>\n<p>同样的，处理器的数量也是默认按照GOMAXPROCS来设置的，与线程的数量一一对应。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> p <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tm           muintptr</span><br><span class=\"line\"></span><br><span class=\"line\">\trunqhead <span class=\"keyword\">uint32</span></span><br><span class=\"line\">\trunqtail <span class=\"keyword\">uint32</span></span><br><span class=\"line\">\trunq     [<span class=\"number\">256</span>]guintptr</span><br><span class=\"line\">\trunnext guintptr</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结构体P中存储了性能追踪、垃圾回收、计时器等相关的字段外，还存储了处理器的待运行队列，队列中存储的是待执行的Goroutine列表。</p>\n<h3 id=\"三者的关系\"><a href=\"#三者的关系\" class=\"headerlink\" title=\"三者的关系\"></a>三者的关系</h3><p>首先，默认启动四个线程四个处理器，然后互相绑定。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587114801967.png\" alt=\"file\"></p>\n<p>这个时候，一个Goroutine结构体被创建，在进行函数体地址、参数起始地址、参数长度等信息以及调度相关属性更新之后，它就要进到一个处理器的队列等待发车。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587115359415.png\" alt=\"file\"></p>\n<p>啥，又创建了一个G？那就轮流往其他P里面放呗，相信你排队取号的时候看到其他窗口没人排队也会过去的。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587115552203.png\" alt=\"file\"></p>\n<p>假如有很多G，都塞满了怎么办呢？那就不把G塞到处理器的私有队列里了，而是把它塞到全局队列里（候车大厅）。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587115783681.png\" alt=\"file\"></p>\n<p>除了往里塞之外，M这边还要疯狂往外取，首先去处理器的私有队列里取G执行，如果取完的话就去全局队列取，如果全局队列里也没有的话，就去其他处理器队列里偷，哇，这么饥渴，简直是恶魔啊！</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587116221683.png\" alt=\"file\"></p>\n<p>如果哪里都没找到要执行的G呢？那M就会因为太失望和P断开关系，然后去睡觉（idle）了。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587116525502.png\" alt=\"file\"></p>\n<p>那如果两个Goroutine正在通过channel做一些恩恩爱爱的事阻塞住了怎么办，难道M要等他们完事了再继续执行？显然不会，M并不稀罕这对Go男女，而会转身去找别的G执行。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587116986094.png\" alt=\"file\"></p>\n<h3 id=\"系统调用\"><a href=\"#系统调用\" class=\"headerlink\" title=\"系统调用\"></a>系统调用</h3><p>如果G进行了系统调用syscall，M也会跟着进入系统调用状态，那么这个P留在这里就浪费了，怎么办呢？这点精妙之处在于，P不会傻傻的等待G和M系统调用完成，而会去找其他比较闲的M执行其他的G。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587123545411.png\" alt=\"file\"></p>\n<p>当G完成了系统调用，因为要继续往下执行，所以必须要再找一个空闲的处理器发车。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587124060921.png\" alt=\"file\"></p>\n<p>如果没有空闲的处理器了，那就只能把G放回全局队列当中等待分配。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587124627966.png\" alt=\"file\"></p>\n<h3 id=\"sysmon\"><a href=\"#sysmon\" class=\"headerlink\" title=\"sysmon\"></a>sysmon</h3><p>sysmon是我们的保洁阿姨，它是一个M，又叫监控线程，不需要P就可以独立运行，每20us~10ms会被唤醒一次出来打扫卫生，主要工作就是回收垃圾、回收长时间系统调度阻塞的P、向长时间运行的G发出抢占调度等等。</p>\n<h2 id=\"词条解释\"><a href=\"#词条解释\" class=\"headerlink\" title=\"词条解释\"></a>词条解释</h2><h3 id=\"东尼·霍尔\"><a href=\"#东尼·霍尔\" class=\"headerlink\" title=\"东尼·霍尔\"></a>东尼·霍尔</h3><p>东尼·霍尔，英国计算机科学家，图灵奖得主，他设计了牛气冲天的快速排序算法、霍尔逻辑以及CSP模型。2011年获颁约翰·冯诺依曼奖。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1586934654476.png\" alt=\"file\"></p>\n"},{"title":"如何用Github钩子做自动部署","date":"2020-04-22T02:27:34.000Z","_content":"\n最近机缘巧合的购置了域名和服务器，不用实在是浪费，再加上一直没有属于自己的个人网站，所以打算用hexo在服务器上玩一下，这样也就不用再纠结用Github pages还是Gitee pages了。当然，今天的主题并不是博客搭建，而是如何利用Github的钩子，将博客代码部署到服务器上。\n\n毕竟Github的钩子已经历史悠久了，网上有很多开源项目可以拿来用，所以我并没有造轮子，而是去找了5K star的开源Go项目`webhook`，这个工具的作用是接收Github仓库的变动通知，然后调用你配置好的shell脚本，脚本可以写上代码拉取的命令或是编译的操作等，具体根据个人需求而定。简而言之，它只起着拉通Github与你服务器的作用。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587526481705.png)\n\n### webhook工具安装\n\n因为webhook是Go语言开发的，所以要先安装Go语言。\n\n```shell\nyum install -y golang\n```\n\n然后就可以用go命令安装webhook了。\n\n```shell\ngo get github.com/adnanh/webhook\n```\n\n命令安装位置可以通过`go env`查看，GOPATH就是命令安装路径，比如我的命令就安装在/root/go/bin/webhook。\n\n```shell\ngo env\n...\nGOOS=\"linux\"\nGOPATH=\"/root/go\"\n...\n```\n\n### 生成ssh key\n\n在编写脚本之前确保服务器有权限拉取github代码，如果已经做了配置可跳过本节去看[部署脚本编写](#部署脚本编写)。ssh key是代码托管平台（github、gitee、coding、gitlab等）鉴别你是否有权拉取代码的身份标识，生成只需一行命令和一路回车就行了。\n\n```shell\nssh-keygen\n\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_rsa.\nYour public key has been saved in /root/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:M6sCf/J/hOu3zLxMkFUVmv3iWIa30CfbxiWqmWCt1YE root@iZwz96y36tk2ecnykzituxZ\nThe key's randomart image is:\n+---[RSA 2048]----+\n|            ..o. |\n|           . o   |\n|          . o    |\n|       . o .     |\n|      E S.  .    |\n|  .  . ..Oo ..   |\n|   oo o ==Boo .  |\n|   .++.+o#== .   |\n|    .=*+=+@o     |\n+----[SHA256]-----+\n```\n\n生成后可通过`cat ~/.ssh/id_rsa.pub`命令查看，最后将key加入github即可，加法不再赘述，请自行谷歌。\n\n```shell\ncat ~/.ssh/id_rsa.pub\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQHBAAABAQCv7LGVJUFdcLL+HZyRFTQIQCdre61Gch76lDVpmWSX9BGGRU3iQS7EU5qApFn1VSvt+yf4rMt2LEkuxGCm1wIyBKZ6LYDViZBeTAfx4BcM1mcpxOX6I/+r07mQ4llTz+poQB1Zp9Y60uk0tbGOVWlCoDBEvf9qeEnQ0qEczEkv7wcawV6pVhlXjFKZgq0EOQbCYoWMvPUl+dwDbTcl/h+7At1nlgfF7IuRHlKf18qvgnTRT2wpiuz4pWdoAi8LcY1JiR1z5OB0oCJ2euhyDND39G2NxZRS1FIVdgCEvioHtdoHOSoWBlcSj0fLFSnscBfRBrCd7yhOP7fFKfrowHMj root@iZwz96y36tk2ecnykzituxZ\n```\n\n### 部署脚本编写\n\n该shell脚本的主要目的是从github拉取代码，脚本内容很简单，只做了目录的简要判断，代码目录存在则更新，不存在则克隆仓库，工作目录和仓库名称、地址请换成自己的。\n\n```shell\n#!/bin/bash\n\ncd /home/www/website\n\nif [ ! -d \"go-home\" ]; then\n  git clone https://github.com/pingyeaa/go-home.git\nfi\n\ncd go-home\ngit pull\n```\n\n### webhook配置与启动\n\n编写配置文件hooks.json，格式如下。\n\n```json\n[\n  {\n    \"id\": \"deploy-webhook\",\n    \"execute-command\": \"deploy.sh\",\n    \"command-working-directory\": \"/home\"\n  }\n]\n```\n\n- id：钩子的id，可自定义\n- execute-command：要执行的脚本名，就是刚才编写的部署脚本\n- command-working-directory：脚本所在目录\n\n完成后通过webhook命令启动，可以看到id为deploy-webhook的配置已经加载了，我们需要注意的是监听的端口和路径，等下要用到。\n\n```shell\n/root/go/bin/webhook -hooks hooks.json -verbose\n\n[webhook] 2020/04/22 15:18:22 version 2.6.11 starting\n[webhook] 2020/04/22 15:18:22 setting up os signal watcher\n[webhook] 2020/04/22 15:18:22 attempting to load hooks from hooks.json\n[webhook] 2020/04/22 15:18:22 found 1 hook(s) in file\n[webhook] 2020/04/22 15:18:22   loaded: deploy-webhook\n[webhook] 2020/04/22 15:18:22 serving hooks on http://0.0.0.0:9000/hooks/{id}\n[webhook] 2020/04/22 15:18:22 os signal watcher ready\n```\n\n```shell\nhttp://0.0.0.0:9000/hooks/{id}\n```\n\n### Github Webhooks配置\n\n现在服务器已经启动了webhook程序监听9000端口，接下来仅需要告诉Github这个地址和端口就好了。\n\n打开仓库设置页，添加webhook。\n\n![](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587523289550.png)\n\n配置webhooks，Payload URL就是要通知的地址，把刚才打印出的端口和路径填上即可，其他默认。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541102651.png)\n\n现在可以提交代码测试了，如果推送失败Github中会有错误提示，同样的，成功不仅在Github中能看到，服务器的打印日志也有记录。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541394355.png)\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541482026.png)","source":"_posts/other/github-webhooks.md","raw":"---\ntitle: 如何用Github钩子做自动部署\ndate: 2020-04-22 10:27:34\ntags: \n- github\n- webhooks\n- 钩子\ncategories: \n- 杂谈\n---\n\n最近机缘巧合的购置了域名和服务器，不用实在是浪费，再加上一直没有属于自己的个人网站，所以打算用hexo在服务器上玩一下，这样也就不用再纠结用Github pages还是Gitee pages了。当然，今天的主题并不是博客搭建，而是如何利用Github的钩子，将博客代码部署到服务器上。\n\n毕竟Github的钩子已经历史悠久了，网上有很多开源项目可以拿来用，所以我并没有造轮子，而是去找了5K star的开源Go项目`webhook`，这个工具的作用是接收Github仓库的变动通知，然后调用你配置好的shell脚本，脚本可以写上代码拉取的命令或是编译的操作等，具体根据个人需求而定。简而言之，它只起着拉通Github与你服务器的作用。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587526481705.png)\n\n### webhook工具安装\n\n因为webhook是Go语言开发的，所以要先安装Go语言。\n\n```shell\nyum install -y golang\n```\n\n然后就可以用go命令安装webhook了。\n\n```shell\ngo get github.com/adnanh/webhook\n```\n\n命令安装位置可以通过`go env`查看，GOPATH就是命令安装路径，比如我的命令就安装在/root/go/bin/webhook。\n\n```shell\ngo env\n...\nGOOS=\"linux\"\nGOPATH=\"/root/go\"\n...\n```\n\n### 生成ssh key\n\n在编写脚本之前确保服务器有权限拉取github代码，如果已经做了配置可跳过本节去看[部署脚本编写](#部署脚本编写)。ssh key是代码托管平台（github、gitee、coding、gitlab等）鉴别你是否有权拉取代码的身份标识，生成只需一行命令和一路回车就行了。\n\n```shell\nssh-keygen\n\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_rsa.\nYour public key has been saved in /root/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:M6sCf/J/hOu3zLxMkFUVmv3iWIa30CfbxiWqmWCt1YE root@iZwz96y36tk2ecnykzituxZ\nThe key's randomart image is:\n+---[RSA 2048]----+\n|            ..o. |\n|           . o   |\n|          . o    |\n|       . o .     |\n|      E S.  .    |\n|  .  . ..Oo ..   |\n|   oo o ==Boo .  |\n|   .++.+o#== .   |\n|    .=*+=+@o     |\n+----[SHA256]-----+\n```\n\n生成后可通过`cat ~/.ssh/id_rsa.pub`命令查看，最后将key加入github即可，加法不再赘述，请自行谷歌。\n\n```shell\ncat ~/.ssh/id_rsa.pub\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQHBAAABAQCv7LGVJUFdcLL+HZyRFTQIQCdre61Gch76lDVpmWSX9BGGRU3iQS7EU5qApFn1VSvt+yf4rMt2LEkuxGCm1wIyBKZ6LYDViZBeTAfx4BcM1mcpxOX6I/+r07mQ4llTz+poQB1Zp9Y60uk0tbGOVWlCoDBEvf9qeEnQ0qEczEkv7wcawV6pVhlXjFKZgq0EOQbCYoWMvPUl+dwDbTcl/h+7At1nlgfF7IuRHlKf18qvgnTRT2wpiuz4pWdoAi8LcY1JiR1z5OB0oCJ2euhyDND39G2NxZRS1FIVdgCEvioHtdoHOSoWBlcSj0fLFSnscBfRBrCd7yhOP7fFKfrowHMj root@iZwz96y36tk2ecnykzituxZ\n```\n\n### 部署脚本编写\n\n该shell脚本的主要目的是从github拉取代码，脚本内容很简单，只做了目录的简要判断，代码目录存在则更新，不存在则克隆仓库，工作目录和仓库名称、地址请换成自己的。\n\n```shell\n#!/bin/bash\n\ncd /home/www/website\n\nif [ ! -d \"go-home\" ]; then\n  git clone https://github.com/pingyeaa/go-home.git\nfi\n\ncd go-home\ngit pull\n```\n\n### webhook配置与启动\n\n编写配置文件hooks.json，格式如下。\n\n```json\n[\n  {\n    \"id\": \"deploy-webhook\",\n    \"execute-command\": \"deploy.sh\",\n    \"command-working-directory\": \"/home\"\n  }\n]\n```\n\n- id：钩子的id，可自定义\n- execute-command：要执行的脚本名，就是刚才编写的部署脚本\n- command-working-directory：脚本所在目录\n\n完成后通过webhook命令启动，可以看到id为deploy-webhook的配置已经加载了，我们需要注意的是监听的端口和路径，等下要用到。\n\n```shell\n/root/go/bin/webhook -hooks hooks.json -verbose\n\n[webhook] 2020/04/22 15:18:22 version 2.6.11 starting\n[webhook] 2020/04/22 15:18:22 setting up os signal watcher\n[webhook] 2020/04/22 15:18:22 attempting to load hooks from hooks.json\n[webhook] 2020/04/22 15:18:22 found 1 hook(s) in file\n[webhook] 2020/04/22 15:18:22   loaded: deploy-webhook\n[webhook] 2020/04/22 15:18:22 serving hooks on http://0.0.0.0:9000/hooks/{id}\n[webhook] 2020/04/22 15:18:22 os signal watcher ready\n```\n\n```shell\nhttp://0.0.0.0:9000/hooks/{id}\n```\n\n### Github Webhooks配置\n\n现在服务器已经启动了webhook程序监听9000端口，接下来仅需要告诉Github这个地址和端口就好了。\n\n打开仓库设置页，添加webhook。\n\n![](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587523289550.png)\n\n配置webhooks，Payload URL就是要通知的地址，把刚才打印出的端口和路径填上即可，其他默认。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541102651.png)\n\n现在可以提交代码测试了，如果推送失败Github中会有错误提示，同样的，成功不仅在Github中能看到，服务器的打印日志也有记录。\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541394355.png)\n\n![file](http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541482026.png)","slug":"other/github-webhooks","published":1,"updated":"2020-04-22T12:22:51.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9c6rv7400096s95ee23fm8i","content":"<p>最近机缘巧合的购置了域名和服务器，不用实在是浪费，再加上一直没有属于自己的个人网站，所以打算用hexo在服务器上玩一下，这样也就不用再纠结用Github pages还是Gitee pages了。当然，今天的主题并不是博客搭建，而是如何利用Github的钩子，将博客代码部署到服务器上。</p>\n<p>毕竟Github的钩子已经历史悠久了，网上有很多开源项目可以拿来用，所以我并没有造轮子，而是去找了5K star的开源Go项目<code>webhook</code>，这个工具的作用是接收Github仓库的变动通知，然后调用你配置好的shell脚本，脚本可以写上代码拉取的命令或是编译的操作等，具体根据个人需求而定。简而言之，它只起着拉通Github与你服务器的作用。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587526481705.png\" alt=\"file\"></p>\n<h3 id=\"webhook工具安装\"><a href=\"#webhook工具安装\" class=\"headerlink\" title=\"webhook工具安装\"></a>webhook工具安装</h3><p>因为webhook是Go语言开发的，所以要先安装Go语言。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y golang</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以用go命令安装webhook了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/adnanh/webhook</span><br></pre></td></tr></table></figure>\n\n<p>命令安装位置可以通过<code>go env</code>查看，GOPATH就是命令安装路径，比如我的命令就安装在/root/go/bin/webhook。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go env</span><br><span class=\"line\">...</span><br><span class=\"line\">GOOS=\"linux\"</span><br><span class=\"line\">GOPATH=\"/root/go\"</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成ssh-key\"><a href=\"#生成ssh-key\" class=\"headerlink\" title=\"生成ssh key\"></a>生成ssh key</h3><p>在编写脚本之前确保服务器有权限拉取github代码，如果已经做了配置可跳过本节去看<a href=\"#部署脚本编写\">部署脚本编写</a>。ssh key是代码托管平台（github、gitee、coding、gitlab等）鉴别你是否有权拉取代码的身份标识，生成只需一行命令和一路回车就行了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br><span class=\"line\"></span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class=\"line\">Enter passphrase (empty for no passphrase): </span><br><span class=\"line\">Enter same passphrase again: </span><br><span class=\"line\">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class=\"line\">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">SHA256:M6sCf/J/hOu3zLxMkFUVmv3iWIa30CfbxiWqmWCt1YE root@iZwz96y36tk2ecnykzituxZ</span><br><span class=\"line\">The key's randomart image is:</span><br><span class=\"line\">+---[RSA 2048]----+</span><br><span class=\"line\">|            ..o. |</span><br><span class=\"line\">|           . o   |</span><br><span class=\"line\">|          . o    |</span><br><span class=\"line\">|       . o .     |</span><br><span class=\"line\">|      E S.  .    |</span><br><span class=\"line\">|  .  . ..Oo ..   |</span><br><span class=\"line\">|   oo o ==Boo .  |</span><br><span class=\"line\">|   .++.+o#== .   |</span><br><span class=\"line\">|    .=*+=+@o     |</span><br><span class=\"line\">+----[SHA256]-----+</span><br></pre></td></tr></table></figure>\n\n<p>生成后可通过<code>cat ~/.ssh/id_rsa.pub</code>命令查看，最后将key加入github即可，加法不再赘述，请自行谷歌。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">ssh-rsa AAAAB3NzaC1yc2EAAAADAQHBAAABAQCv7LGVJUFdcLL+HZyRFTQIQCdre61Gch76lDVpmWSX9BGGRU3iQS7EU5qApFn1VSvt+yf4rMt2LEkuxGCm1wIyBKZ6LYDViZBeTAfx4BcM1mcpxOX6I/+r07mQ4llTz+poQB1Zp9Y60uk0tbGOVWlCoDBEvf9qeEnQ0qEczEkv7wcawV6pVhlXjFKZgq0EOQbCYoWMvPUl+dwDbTcl/h+7At1nlgfF7IuRHlKf18qvgnTRT2wpiuz4pWdoAi8LcY1JiR1z5OB0oCJ2euhyDND39G2NxZRS1FIVdgCEvioHtdoHOSoWBlcSj0fLFSnscBfRBrCd7yhOP7fFKfrowHMj root@iZwz96y36tk2ecnykzituxZ</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署脚本编写\"><a href=\"#部署脚本编写\" class=\"headerlink\" title=\"部署脚本编写\"></a>部署脚本编写</h3><p>该shell脚本的主要目的是从github拉取代码，脚本内容很简单，只做了目录的简要判断，代码目录存在则更新，不存在则克隆仓库，工作目录和仓库名称、地址请换成自己的。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/www/website</span><br><span class=\"line\"></span><br><span class=\"line\">if [ ! -d \"go-home\" ]; then</span><br><span class=\"line\">  git clone https://github.com/pingyeaa/go-home.git</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd go-home</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webhook配置与启动\"><a href=\"#webhook配置与启动\" class=\"headerlink\" title=\"webhook配置与启动\"></a>webhook配置与启动</h3><p>编写配置文件hooks.json，格式如下。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"deploy-webhook\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"execute-command\"</span>: <span class=\"string\">\"deploy.sh\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"command-working-directory\"</span>: <span class=\"string\">\"/home\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>id：钩子的id，可自定义</li>\n<li>execute-command：要执行的脚本名，就是刚才编写的部署脚本</li>\n<li>command-working-directory：脚本所在目录</li>\n</ul>\n<p>完成后通过webhook命令启动，可以看到id为deploy-webhook的配置已经加载了，我们需要注意的是监听的端口和路径，等下要用到。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/root/go/bin/webhook -hooks hooks.json -verbose</span><br><span class=\"line\"></span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 version 2.6.11 starting</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 setting up os signal watcher</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 attempting to load hooks from hooks.json</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 found 1 hook(s) in file</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22   loaded: deploy-webhook</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 serving hooks on http://0.0.0.0:9000/hooks/&#123;id&#125;</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 os signal watcher ready</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://0.0.0.0:9000/hooks/&#123;id&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github-Webhooks配置\"><a href=\"#Github-Webhooks配置\" class=\"headerlink\" title=\"Github Webhooks配置\"></a>Github Webhooks配置</h3><p>现在服务器已经启动了webhook程序监听9000端口，接下来仅需要告诉Github这个地址和端口就好了。</p>\n<p>打开仓库设置页，添加webhook。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587523289550.png\" alt=\"\"></p>\n<p>配置webhooks，Payload URL就是要通知的地址，把刚才打印出的端口和路径填上即可，其他默认。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541102651.png\" alt=\"file\"></p>\n<p>现在可以提交代码测试了，如果推送失败Github中会有错误提示，同样的，成功不仅在Github中能看到，服务器的打印日志也有记录。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541394355.png\" alt=\"file\"></p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541482026.png\" alt=\"file\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近机缘巧合的购置了域名和服务器，不用实在是浪费，再加上一直没有属于自己的个人网站，所以打算用hexo在服务器上玩一下，这样也就不用再纠结用Github pages还是Gitee pages了。当然，今天的主题并不是博客搭建，而是如何利用Github的钩子，将博客代码部署到服务器上。</p>\n<p>毕竟Github的钩子已经历史悠久了，网上有很多开源项目可以拿来用，所以我并没有造轮子，而是去找了5K star的开源Go项目<code>webhook</code>，这个工具的作用是接收Github仓库的变动通知，然后调用你配置好的shell脚本，脚本可以写上代码拉取的命令或是编译的操作等，具体根据个人需求而定。简而言之，它只起着拉通Github与你服务器的作用。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587526481705.png\" alt=\"file\"></p>\n<h3 id=\"webhook工具安装\"><a href=\"#webhook工具安装\" class=\"headerlink\" title=\"webhook工具安装\"></a>webhook工具安装</h3><p>因为webhook是Go语言开发的，所以要先安装Go语言。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y golang</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以用go命令安装webhook了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/adnanh/webhook</span><br></pre></td></tr></table></figure>\n\n<p>命令安装位置可以通过<code>go env</code>查看，GOPATH就是命令安装路径，比如我的命令就安装在/root/go/bin/webhook。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go env</span><br><span class=\"line\">...</span><br><span class=\"line\">GOOS=\"linux\"</span><br><span class=\"line\">GOPATH=\"/root/go\"</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成ssh-key\"><a href=\"#生成ssh-key\" class=\"headerlink\" title=\"生成ssh key\"></a>生成ssh key</h3><p>在编写脚本之前确保服务器有权限拉取github代码，如果已经做了配置可跳过本节去看<a href=\"#部署脚本编写\">部署脚本编写</a>。ssh key是代码托管平台（github、gitee、coding、gitlab等）鉴别你是否有权拉取代码的身份标识，生成只需一行命令和一路回车就行了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br><span class=\"line\"></span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class=\"line\">Enter passphrase (empty for no passphrase): </span><br><span class=\"line\">Enter same passphrase again: </span><br><span class=\"line\">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class=\"line\">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">SHA256:M6sCf/J/hOu3zLxMkFUVmv3iWIa30CfbxiWqmWCt1YE root@iZwz96y36tk2ecnykzituxZ</span><br><span class=\"line\">The key's randomart image is:</span><br><span class=\"line\">+---[RSA 2048]----+</span><br><span class=\"line\">|            ..o. |</span><br><span class=\"line\">|           . o   |</span><br><span class=\"line\">|          . o    |</span><br><span class=\"line\">|       . o .     |</span><br><span class=\"line\">|      E S.  .    |</span><br><span class=\"line\">|  .  . ..Oo ..   |</span><br><span class=\"line\">|   oo o ==Boo .  |</span><br><span class=\"line\">|   .++.+o#== .   |</span><br><span class=\"line\">|    .=*+=+@o     |</span><br><span class=\"line\">+----[SHA256]-----+</span><br></pre></td></tr></table></figure>\n\n<p>生成后可通过<code>cat ~/.ssh/id_rsa.pub</code>命令查看，最后将key加入github即可，加法不再赘述，请自行谷歌。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">ssh-rsa AAAAB3NzaC1yc2EAAAADAQHBAAABAQCv7LGVJUFdcLL+HZyRFTQIQCdre61Gch76lDVpmWSX9BGGRU3iQS7EU5qApFn1VSvt+yf4rMt2LEkuxGCm1wIyBKZ6LYDViZBeTAfx4BcM1mcpxOX6I/+r07mQ4llTz+poQB1Zp9Y60uk0tbGOVWlCoDBEvf9qeEnQ0qEczEkv7wcawV6pVhlXjFKZgq0EOQbCYoWMvPUl+dwDbTcl/h+7At1nlgfF7IuRHlKf18qvgnTRT2wpiuz4pWdoAi8LcY1JiR1z5OB0oCJ2euhyDND39G2NxZRS1FIVdgCEvioHtdoHOSoWBlcSj0fLFSnscBfRBrCd7yhOP7fFKfrowHMj root@iZwz96y36tk2ecnykzituxZ</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署脚本编写\"><a href=\"#部署脚本编写\" class=\"headerlink\" title=\"部署脚本编写\"></a>部署脚本编写</h3><p>该shell脚本的主要目的是从github拉取代码，脚本内容很简单，只做了目录的简要判断，代码目录存在则更新，不存在则克隆仓库，工作目录和仓库名称、地址请换成自己的。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/www/website</span><br><span class=\"line\"></span><br><span class=\"line\">if [ ! -d \"go-home\" ]; then</span><br><span class=\"line\">  git clone https://github.com/pingyeaa/go-home.git</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd go-home</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webhook配置与启动\"><a href=\"#webhook配置与启动\" class=\"headerlink\" title=\"webhook配置与启动\"></a>webhook配置与启动</h3><p>编写配置文件hooks.json，格式如下。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"deploy-webhook\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"execute-command\"</span>: <span class=\"string\">\"deploy.sh\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"command-working-directory\"</span>: <span class=\"string\">\"/home\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>id：钩子的id，可自定义</li>\n<li>execute-command：要执行的脚本名，就是刚才编写的部署脚本</li>\n<li>command-working-directory：脚本所在目录</li>\n</ul>\n<p>完成后通过webhook命令启动，可以看到id为deploy-webhook的配置已经加载了，我们需要注意的是监听的端口和路径，等下要用到。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/root/go/bin/webhook -hooks hooks.json -verbose</span><br><span class=\"line\"></span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 version 2.6.11 starting</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 setting up os signal watcher</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 attempting to load hooks from hooks.json</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 found 1 hook(s) in file</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22   loaded: deploy-webhook</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 serving hooks on http://0.0.0.0:9000/hooks/&#123;id&#125;</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 os signal watcher ready</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://0.0.0.0:9000/hooks/&#123;id&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github-Webhooks配置\"><a href=\"#Github-Webhooks配置\" class=\"headerlink\" title=\"Github Webhooks配置\"></a>Github Webhooks配置</h3><p>现在服务器已经启动了webhook程序监听9000端口，接下来仅需要告诉Github这个地址和端口就好了。</p>\n<p>打开仓库设置页，添加webhook。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587523289550.png\" alt=\"\"></p>\n<p>配置webhooks，Payload URL就是要通知的地址，把刚才打印出的端口和路径填上即可，其他默认。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541102651.png\" alt=\"file\"></p>\n<p>现在可以提交代码测试了，如果推送失败Github中会有错误提示，同样的，成功不仅在Github中能看到，服务器的打印日志也有记录。</p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541394355.png\" alt=\"file\"></p>\n<p><img src=\"http://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541482026.png\" alt=\"file\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck9c6rv7400096s95ee23fm8i","category_id":"ck9c6rv75000a6s95e9c4381t","_id":"ck9c6rv76000d6s95b3tg1h5q"}],"PostTag":[{"post_id":"ck9c6rv6q00026s950xy9c8df","tag_id":"ck9c6rv6u00036s953oq9b64k","_id":"ck9c6rv6y00066s95h6fz1xep"},{"post_id":"ck9c6rv6q00026s950xy9c8df","tag_id":"ck9c6rv6w00046s958gya5are","_id":"ck9c6rv6y00076s95a70e9k9l"},{"post_id":"ck9c6rv6q00026s950xy9c8df","tag_id":"ck9c6rv6w00056s95defp8l9o","_id":"ck9c6rv6y00086s9541et2l8d"},{"post_id":"ck9c6rv7400096s95ee23fm8i","tag_id":"ck9c6rv75000b6s9594w826ad","_id":"ck9c6rv77000f6s954hqc2hjz"},{"post_id":"ck9c6rv7400096s95ee23fm8i","tag_id":"ck9c6rv76000c6s95c5jib8y9","_id":"ck9c6rv77000g6s956fhw8vak"},{"post_id":"ck9c6rv7400096s95ee23fm8i","tag_id":"ck9c6rv77000e6s951rtgel1k","_id":"ck9c6rv77000h6s95g0e3cqch"}],"Tag":[{"name":"golang","_id":"ck9c6rv6u00036s953oq9b64k"},{"name":"gpm","_id":"ck9c6rv6w00046s958gya5are"},{"name":"调度器","_id":"ck9c6rv6w00056s95defp8l9o"},{"name":"github","_id":"ck9c6rv75000b6s9594w826ad"},{"name":"webhooks","_id":"ck9c6rv76000c6s95c5jib8y9"},{"name":"钩子","_id":"ck9c6rv77000e6s951rtgel1k"}]}}