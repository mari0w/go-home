{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/qrcode.jpg","path":"images/qrcode.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.jpeg","path":"images/favicon.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpeg","path":"images/wechatpay.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/qrcode.png","path":"images/qrcode.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1587453156757},{"_id":"themes/next/.DS_Store","hash":"024b4fee80e02b17cd3ef579ecbac7cfb3aa5888","modified":1587610861987},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1587453156757},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1587453156758},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1587453156759},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1587453156759},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1587453156759},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1587453156760},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1587453156759},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1585977960000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1585977960000},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1585977960000},{"_id":"themes/next/_config.yml","hash":"546ee91e1051b035c8c2749b195226b68c2448d1","modified":1588944135791},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1585977960000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1587453156760},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1585977960000},{"_id":"source/.DS_Store","hash":"62ac7f1ad9a8c84d8bae423a0904f1dcc214aa06","modified":1588946299214},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1587453156758},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1587453156758},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1587453156758},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1587453156758},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1585977960000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1585977960000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1585977960000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1585977960000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1585977960000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1585977960000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1585977960000},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1585977960000},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1585977960000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1585977960000},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1585977960000},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1585977960000},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1585977960000},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1585977960000},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1585977960000},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1585977960000},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1585977960000},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1585977960000},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1585977960000},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1585977960000},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1585977960000},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1585977960000},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1585977960000},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1585977960000},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1585977960000},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1585977960000},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1585977960000},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1585977960000},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1585977960000},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1585977960000},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1585977960000},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1585977960000},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1585977960000},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1585977960000},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1585977960000},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1585977960000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1585977960000},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1585977960000},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1585977960000},{"_id":"source/tags/index.md","hash":"d614072577e3aafac1d3c5c43e6d74cada7eb52f","modified":1587544311392},{"_id":"source/_posts/.DS_Store","hash":"590a670cd046c25fa0698edc47d1ed5c11cf6d6d","modified":1589372199887},{"_id":"themes/next/source/.DS_Store","hash":"dcb91b58762bab04a028caaee9918abf7ae642fc","modified":1587610861986},{"_id":"source/categories/index.md","hash":"ad7c39b2fc7a6589380f4793f701181f4ae1a978","modified":1587544322176},{"_id":"source/comments/index.md","hash":"989c1c729fed780a72781dcdb4feb3a5124939b5","modified":1587611757400},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1585977960000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1585977960000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1585977960000},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1585977960000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1585977960000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1585977960000},{"_id":"themes/next/layout/_macro/post.swig","hash":"e004de7ab257a3febf1ae16bdf442628ac3ea25b","modified":1587699964858},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1585977960000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"700c3e7bd449bce51f6faee42c052e13ed5f8b3e","modified":1585977960000},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1585977960000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1585977960000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1585977960000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1585977960000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1585977960000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1585977960000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1585977960000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1585977960000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1585977960000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1585977960000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1585977960000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1585977960000},{"_id":"themes/next/layout/adsense/banner_ads.swig","hash":"425b476b9890600a52b3b91a865bd4950894a3ec","modified":1587612183295},{"_id":"themes/next/scripts/events/index.js","hash":"bf5e93f9209d111a014a7a6a17e86c05be552d13","modified":1585977960000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1585977960000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1585977960000},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1585977960000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1585977960000},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1585977960000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1585977960000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1585977960000},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1585977960000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1585977960000},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1585977960000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1585977960000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1585977960000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1585977960000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1585977960000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1585977960000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1585977960000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1585977960000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1585977960000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1585977960000},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1585977960000},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1585977960000},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1585977960000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1585977960000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1585977960000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1585977960000},{"_id":"themes/next/source/images/.DS_Store","hash":"b08a583e8e8719100916791d296f6f1dbfe0aa78","modified":1587610868123},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1585977960000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1585977960000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1585977960000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1585977960000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1585977960000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1585977960000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1585977960000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1585977960000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1585977960000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1585977960000},{"_id":"themes/next/source/images/qrcode.jpg","hash":"a8789b7a00af57be37d9b136089e639af57cdee7","modified":1587537946012},{"_id":"themes/next/source/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1585977960000},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1585977960000},{"_id":"themes/next/source/images/favicon.jpeg","hash":"53998c1865e358581dff462411335eba91f60ad4","modified":1587375800594},{"_id":"themes/next/source/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1585977960000},{"_id":"themes/next/source/js/local-search.js","hash":"d6673063958127a03881dab2f0376a47f5e08a88","modified":1585977960000},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1585977960000},{"_id":"themes/next/source/js/utils.js","hash":"91d174e12c61c332f3b06085d635c2b0f686a758","modified":1585977960000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1585977960000},{"_id":"source/_posts/architecture/gateway-kong.md","hash":"524d9708ed39a5673d009e8c675477197b850341","modified":1589637587681},{"_id":"source/_posts/network/frp.md","hash":"411d8c630869962a544748eafb778b9b9384c4d1","modified":1589553897427},{"_id":"source/_posts/os/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1587626652784},{"_id":"source/_posts/os/supervisor.md","hash":"3c67d86a5de63066e57f85a78f751d39bd43a684","modified":1588868356803},{"_id":"source/_posts/other/github-webhooks.md","hash":"0e9550f96c29dd393be607cc33c15dd24a699af1","modified":1588868377143},{"_id":"themes/next/source/images/avatar.jpeg","hash":"72cbdcaf3dc6f2d8f2ef9610fb7e1c52dc10795b","modified":1587537946010},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1585977960000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1585977960000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1585977960000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"61cbcc02faa198f71c68fb2bf2feb715673dcc2a","modified":1588945991080},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1585977960000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1585977960000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1585977960000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1585977960000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1585977960000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1585977960000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1585977960000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1585977960000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1585977960000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1585977960000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1585977960000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1585977960000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1585977960000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1585977960000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1585977960000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1585977960000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1585977960000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1585977960000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1585977960000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1585977960000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1585977960000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1585977960000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1585977960000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1585977960000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1585977960000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1585977960000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1585977960000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1585977960000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1585977960000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1585977960000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1585977960000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1585977960000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1585977960000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1585977960000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1585977960000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1585977960000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1585977960000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1585977960000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1585977960000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1585977960000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1585977960000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"24a1049270bfdc5a508826839dd6a163fcc41177","modified":1587700623137},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1585977960000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1585977960000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1585977960000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1585977960000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1585977960000},{"_id":"themes/next/source/images/wechatpay.jpeg","hash":"b838ade1d8abe2e52e65aeadc3ab36f5caa47cc7","modified":1587537946015},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1585977960000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1585977960000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1585977960000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b3bea92eef0e1fe2e7e294dac2184d16b5b8d666","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1585977960000},{"_id":"themes/next/source/images/qrcode.png","hash":"4bf38c57894a925f51cb35c898e5c47fcde7c91d","modified":1587537945967},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1585977960000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1585977960000},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1585977960000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1585977960000},{"_id":"public/baidusitemap.xml","hash":"abbc9c92fa54252cfad3474d06ae243b04de4cf1","modified":1589637602658},{"_id":"public/search.xml","hash":"931be36b1546a3f5813edb186b9182d488b98da7","modified":1589637602658},{"_id":"public/sitemap.xml","hash":"6fc544df8d9dc0b051461941d8997a7e787f4769","modified":1589637602658},{"_id":"public/comments/index.html","hash":"f80ca4fc0d107e15c17ffdf486236a20dd27adc2","modified":1589637602658},{"_id":"public/categories/架构/index.html","hash":"6286dde3a893f80a4fb91ee03f7515bbdd2aab16","modified":1589637602658},{"_id":"public/categories/网络/index.html","hash":"343019ff7d1472141d54c3d42da8c429c444f659","modified":1589637602658},{"_id":"public/categories/操作系统/index.html","hash":"c7a0190396194f35b465543c915f2d14743f2c22","modified":1589637602658},{"_id":"public/categories/杂谈/index.html","hash":"52a5bafdccf97225f818e9fe3a64b4f96937a0c4","modified":1589637602658},{"_id":"public/categories/架构/网关/index.html","hash":"3bf76c27047bfd7fd4c58b2ad1828db6bb64667b","modified":1589637602658},{"_id":"public/tags/网关/index.html","hash":"ad35629922c63ab13afd16f8d14225a39eaaf4b8","modified":1589637602658},{"_id":"public/tags/kong/index.html","hash":"a26569b44d7a41876b1fbe07a47e7d713e465b53","modified":1589637602658},{"_id":"public/tags/frp/index.html","hash":"ca6f3e92951bea16190b0bf77a442c07aabd8efd","modified":1589637602658},{"_id":"public/tags/内网穿透/index.html","hash":"35deaca1cdb88843a8df68ae84f5a96e77ac460c","modified":1589637602658},{"_id":"public/tags/golang/index.html","hash":"86d4fa613a49455aeadccd173b558d7e989c1626","modified":1589637602658},{"_id":"public/tags/supervisor/index.html","hash":"5833178cced39e4b1024439ec0886e4de5c5ca9b","modified":1589637602658},{"_id":"public/tags/进程/index.html","hash":"4af572a331d52aef7aaed7d7b3079b7a1704cd49","modified":1589637602658},{"_id":"public/tags/监控/index.html","hash":"186fe672576f99bdcb6c788bc2e56ca33befaf0e","modified":1589637602658},{"_id":"public/tags/github/index.html","hash":"cb08fc1d223ff3f98a2181ebb2715ea2ac64300d","modified":1589637602658},{"_id":"public/tags/webhooks/index.html","hash":"b5fbe4271bde2b0b6ef2c663296afb74ced3f6f8","modified":1589637602658},{"_id":"public/tags/index.html","hash":"fc67de05287134ba33f1daf4edf3db39cc065fcf","modified":1589637602658},{"_id":"public/categories/index.html","hash":"08a03a85b9d6f7d001c8cc918dd05c5b237195cb","modified":1589637602658},{"_id":"public/2020/05/16/architecture/gateway-kong/index.html","hash":"9105623811910244a8517485f72cb5e1ecad5739","modified":1589637602658},{"_id":"public/2020/05/13/network/frp/index.html","hash":"685b25545babcb6569ef6911c629dafd43fca777","modified":1589637602658},{"_id":"public/2020/04/23/os/supervisor/index.html","hash":"cefab04773458285977256a73a6b2c28aa04d2e8","modified":1589637602658},{"_id":"public/2020/04/22/other/github-webhooks/index.html","hash":"16c75da42d3f624225667136a4286e024e71608e","modified":1589637602658},{"_id":"public/archives/index.html","hash":"721afad57b943b6d95e6b799058090688e296c1f","modified":1589637602658},{"_id":"public/archives/2020/index.html","hash":"d2a7e4517a41bdd5dc233283f6cf122e3f946661","modified":1589637602658},{"_id":"public/archives/2020/04/index.html","hash":"d1dd63c8294fe8c386f5c2f77e230baeb83c49fc","modified":1589637602658},{"_id":"public/archives/2020/05/index.html","hash":"6d4a643c05bd85cd63fe4a0eb67db8647e183453","modified":1589637602658},{"_id":"public/index.html","hash":"5c4be6cbd53bfb6854ce249ec29fbe53436ba65d","modified":1589637602658},{"_id":"public/tags/钩子/index.html","hash":"ff4b4b4bdee778f962195777efc9805143802a29","modified":1589637602658},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1589637602658},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1589637602658},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1589637602658},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1589637602658},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1589637602658},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1589637602658},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1589637602658},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1589637602658},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1589637602658},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1589637602658},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1589637602658},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1589637602658},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1589637602658},{"_id":"public/images/qrcode.jpg","hash":"a8789b7a00af57be37d9b136089e639af57cdee7","modified":1589637602658},{"_id":"public/images/favicon.jpeg","hash":"53998c1865e358581dff462411335eba91f60ad4","modified":1589637602658},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1589637602658},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1589637602658},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1589637602658},{"_id":"public/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1589637602658},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1589637602658},{"_id":"public/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1589637602658},{"_id":"public/js/local-search.js","hash":"d6673063958127a03881dab2f0376a47f5e08a88","modified":1589637602658},{"_id":"public/js/utils.js","hash":"91d174e12c61c332f3b06085d635c2b0f686a758","modified":1589637602658},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1589637602658},{"_id":"public/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1589637602658},{"_id":"public/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1589637602658},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1589637602658},{"_id":"public/css/main.css","hash":"86aeed2a992a51e116a7db8b6657d85a69727cc3","modified":1589637602658},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1589637602658},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1589637602658},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1589637602658},{"_id":"public/images/avatar.jpeg","hash":"72cbdcaf3dc6f2d8f2ef9610fb7e1c52dc10795b","modified":1589637602658},{"_id":"public/images/wechatpay.jpeg","hash":"b838ade1d8abe2e52e65aeadc3ab36f5caa47cc7","modified":1589637602658},{"_id":"public/images/qrcode.png","hash":"4bf38c57894a925f51cb35c898e5c47fcde7c91d","modified":1589637602658}],"Category":[{"name":"架构","_id":"cka9p6osc0007xbp4e9fihg74"},{"name":"网络","_id":"cka9p6osd000axbp4esjccifb"},{"name":"操作系统","_id":"cka9p6ose000cxbp493tgaiyn"},{"name":"杂谈","_id":"cka9p6osf000hxbp4co0afief"},{"name":"网关","parent":"cka9p6osc0007xbp4e9fihg74","_id":"cka9p6osg000kxbp4bfzthck3"}],"Data":[],"Page":[{"title":"标签","date":"2020-04-22T07:05:26.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2020-04-22 15:05:26\ntype: \"tags\"\n---\n","updated":"2020-04-22T08:31:51.392Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cka9p6ora0000xbp42nctg3jc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2020-04-22T07:06:22.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2020-04-22 15:06:22\ntype: \"categories\"\n---\n","updated":"2020-04-22T08:32:02.176Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cka9p6ord0001xbp43cr8cbh1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"留言板","date":"2020-04-22T07:06:22.000Z","_content":"","source":"comments/index.md","raw":"---\ntitle: 留言板\ndate: 2020-04-22 15:06:22\n---\n","updated":"2020-04-23T03:15:57.400Z","path":"comments/index.html","comments":1,"layout":"page","_id":"cka9p6os00002xbp4b8c63fqg","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"API 网关 Kong","date":"2020-05-16T04:24:19.000Z","_content":"\n## 什么是 API 网关？\n\n所谓网关，主要作用就是连接两个不同网络的设备，而今天所讲的 API 网关是指承接和分发客户端所有请求的网关层。\n\n![](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1589604854331.png)\n\n为什么需要网关层？最初是单体服务时，客户端发起的所有请求都可以直接请求到该服务，但随着产品用户越来越多，单体应用存在显而易见的单点问题，除此之外，当单体应用大小升至几个 G 时，持续发布将会非常缓慢，所以服务的拆分成为了必然趋势。\n\n![](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1589605857758.png)\n\n当服务拆分为多个之后，我们不得不面临一个问题，就是如何控制用户请求到对应服务节点，于是网关层应运而生，它不仅可以负责负载均衡，还可以让它处理认证校验、请求限流、日志记录以及监控服务节点等等。\n\n![](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1589606854321.png)\n\n当然，网关层并不需要我们手动实现，市面上有很多 API 网关开源项目，比如 Zuul、Kong、Tyk 等，今天主要介绍 Kong。\n\n## 安装 Kong\n\nKong 是一个在 Nginx 中运行的 Lua 程序，由 lua-nginx-module 实现，和 Openresty 一起打包发行，支持多种操作环境下的安装，可以用来做 HTTP 基本认证、密钥认证、TCP、UDP、文件日志、API 请求限流、请求转发等等。\n\n第一步，创建一个 docker 网络。\n\n```bash\n$ docker network create kong-net\n```\n\n创建用于存储 Kong 数据的数据库，可以使用 Cassandra 或 PostgreSQL，本示例采用 Cassandra。\n\n> Cassandra 是由 Facebook 开发的分布式 NoSQL 数据库。\n\n```bash\n$ docker run -d --name kong-database \\\n               --network=kong-net \\\n               -p 9042:9042 \\\n               cassandra:3\n```\n\n初始化数据到 Cassandra 数据库。\n\n\n```bash\n$ docker run --rm \\\n\t--network=kong-net \\\n\t-e \"KONG_DATABASE=cassandra\" \\\n\t-e \"KONG_PG_HOST=kong-database\" \\\n\t-e \"KONG_PG_PASSWORD=kong\" \\\n\t-e \"KONG_CASSANDRA_CONTACT_POINTS=kong-database\" \\\n\tkong:latest kong migrations bootstrap\n```\n\n启动 Kong 容器连接数据库。\n\n```bash\n $ docker run -d --name kong \\\n     --network=kong-net \\\n     -e \"KONG_DATABASE=cassandra\" \\\n     -e \"KONG_PG_HOST=kong-database\" \\\n     -e \"KONG_PG_PASSWORD=kong\" \\\n     -e \"KONG_CASSANDRA_CONTACT_POINTS=kong-database\" \\\n     -e \"KONG_PROXY_ACCESS_LOG=/dev/stdout\" \\\n     -e \"KONG_ADMIN_ACCESS_LOG=/dev/stdout\" \\\n     -e \"KONG_PROXY_ERROR_LOG=/dev/stderr\" \\\n     -e \"KONG_ADMIN_ERROR_LOG=/dev/stderr\" \\\n     -e \"KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl\" \\\n     -p 8000:8000 \\\n     -p 8443:8443 \\\n     -p 0.0.0.0:8001:8001 \\\n     -p 0.0.0.0:8444:8444 \\\n     kong:latest\n```\n\n通过 curl 模拟请求本地 8001 端口可以获取 Kong 的详细信息。截止目前整个 kong 服务就跑起来了，接下来可以注册服务节点到 kong 中。\n\n```bash\n$ curl -i http://localhost:8001/\n```\n\n## 注册服务\n\n注册名为 baidu-service 的服务到 kong，如果请求匹配到该服务会跳转至 url。\n\n```bash\n$ curl -i -X POST \\\n  --url http://localhost:8001/services/ \\\n  --data 'name=baidu-service' \\\n  --data 'url=http://baidu.com'\n```\n\n注册成功之后会得到如下提示。\n\n```bash\nHTTP/1.1 201 Created\nDate: Sat, 16 May 2020 06:35:56 GMT\nContent-Type: application/json; charset=utf-8\nConnection: keep-alive\nAccess-Control-Allow-Origin: *\nServer: kong/2.0.4\nContent-Length: 292\nX-Kong-Admin-Latency: 103\n\n{\"host\":\"baidu.com\",\"created_at\":1589610956,\"connect_timeout\":60000,\"id\":\"6660aaa7-5afa-4f02-85f8-11dfb81fba84\",\"protocol\":\"http\",\"name\":\"baidu-service\",\"read_timeout\":60000,\"port\":80,\"path\":null,\"updated_at\":1589610956,\"retries\":5,\"write_timeout\":60000,\"tags\":null,\"client_certificate\":null}\n```\n\n## 服务配置路由\n\n服务添加成功后，需要告知 kong 什么样的请求才使用该服务，而这个规则被称为 route，也就是路由，路由的作用是按规则匹配客户端的请求，然后转发到对应的 service，每个 route 都对应一个 service，一个 service 可能有多个 route。\n\n```bash\n$ curl -i -X POST \\\n  --url http://localhost:8001/services/baidu-service/routes \\\n  --data 'hosts[]=baidu.com'\n```\n\n以上代码的作用是当请求域名是 baidu.com 时，则将请求转发到 baidu-service 指定的 url，我们可以通过 curl 模拟测试。\n\n```bash\n$ curl -i -X GET \\\n  --url http://localhost:8000/ \\\n  --header 'Host: baidu.com'\n```\n\n```bash\nHTTP/1.1 200 OK\nContent-Type: text/html; charset=UTF-8\nContent-Length: 81\nConnection: keep-alive\nDate: Sat, 16 May 2020 06:45:12 GMT\nServer: Apache\nLast-Modified: Tue, 12 Jan 2010 13:48:00 GMT\nETag: \"51-47cf7e6ee8400\"\nAccept-Ranges: bytes\nCache-Control: max-age=86400\nExpires: Sun, 17 May 2020 06:45:12 GMT\nX-Kong-Upstream-Latency: 92\nX-Kong-Proxy-Latency: 17\nVia: kong/2.0.4\n\n<html>\n<meta http-equiv=\"refresh\" content=\"0;url=http://www.baidu.com/\">\n</html>\n```\n\n## 负载均衡配置\n\n与 nginx 同理，先创建一个 upstream，名为 hello。\n\n```bash\n$ curl -X POST http://localhost:8001/upstreams --data \"name=hello\"\n```\n\n```bash\n{\"created_at\":1589633009,\"hash_on\":\"none\",\"id\":\"3bab80bb-7e62-40c8-8b7c-7efdcc329675\",\"algorithm\":\"round-robin\",\"name\":\"hello\",\"tags\":null,\"hash_fallback_header\":null,\"hash_fallback\":\"none\",\"hash_on_cookie\":null,\"host_header\":null,\"hash_on_cookie_path\":\"\\/\",\"healthchecks\":{\"threshold\":0,\"active\":{\"https_verify_certificate\":true,\"type\":\"http\",\"http_path\":\"\\/\",\"timeout\":1,\"unhealthy\":{\"http_statuses\":[429,404,500,501,502,503,504,505],\"tcp_failures\":0,\"timeouts\":0,\"http_failures\":0,\"interval\":0},\"healthy\":{\"http_statuses\":[200,302],\"interval\":0,\"successes\":0},\"https_sni\":null,\"concurrency\":10},\"passive\":{\"unhealthy\":{\"http_failures\":0,\"http_statuses\":[429,500,503],\"tcp_failures\":0,\"timeouts\":0},\"healthy\":{\"http_statuses\":[200,201,202,203,204,205,206,207,208,226,300,301,302,303,304,305,306,307,308],\"successes\":0},\"type\":\"http\"}},\"hash_on_header\":null,\"slots\":10000}\n```\n\n为 upstream 添加两个负载均衡的节点，我就拿京东和淘宝来做测试了。\n\n```bash\ncurl -X POST http://localhost:8001/upstreams/hello/targets --data \"target=jd.com\" --data \"weight=100\"\ncurl -X POST http://localhost:8001/upstreams/hello/targets --data \"target=taobao.com\" --data \"weight=50\"\n```\n\n如上配置就相当于 nginx 中的\n\n```bash\nupstream hello {\n\tserver jd.com weight=100;\n\tserver taobao.com weight=50;\n}\n```\n\n接下来创建一个 service 指向 upstream，host 即对应 upstream 名。\n\n```bash\ncurl -X POST http://localhost:8001/services --data \"name=hello\" --data \"host=hello\"\n```\n\n为 service 创建路由，凡是包含 /hello 的地址全部走 hello upstream。\n\n```bash\ncurl -i -X POST --url http://localhost:8001/services/hello/routes --data 'paths[]=/hello'\ncurl -X POST --url http://localhost:8001/routes --data 'paths[]=/hello' --data 'service.id=8ad06aa5-be0a-4763-a84d-90b8046765f5'\n```\n\n现在访问 localhost:8000 就可以看到已经成功做了负载均衡。\n\n## 限流\n\n因为服务器不能处理无限量的请求，为了避免请求数高到服务器无法处理，必须做限流操作。关于限流，kong 使用了 rate-limiting 插件，它可以在 service、route、consumer 不同粒度上控制请求，配置非常简单。\n\n```bash\ncurl -X POST http://kong:8001/services/{service}/plugins \\\n    --data \"name=rate-limiting\"\n    --data \"config.second=5\" \\\n    --data \"config.hour=10000\" \n```\n\nconfig.second 代表一秒钟内处理的最大请求次数，config.hour 表示一小时内最大请求次数。\n\nRoute 的示例\n\n```bash\ncurl -X POST http://kong:8001/routes/{route}/plugins \\\n    --data \"name=rate-limiting\"\n    --data \"config.second=5\" \\\n    --data \"config.hour=10000\" \n```\n\nConsumer 的示例\n\n```bash\ncurl -X POST http://kong:8001/consumers/{consumer}/plugins \\\n    --data \"name=rate-limiting-advanced\" \\\n    --data \"config.second=5\" \\\n    --data \"config.hour=10000\"\n```\n\n","source":"_posts/architecture/gateway-kong.md","raw":"---\ntitle: API 网关 Kong\ndate: 2020-05-16 12:24:19\ntags:\n- 网关\n- kong\ncategories:\n- [架构, 网关]\n---\n\n## 什么是 API 网关？\n\n所谓网关，主要作用就是连接两个不同网络的设备，而今天所讲的 API 网关是指承接和分发客户端所有请求的网关层。\n\n![](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1589604854331.png)\n\n为什么需要网关层？最初是单体服务时，客户端发起的所有请求都可以直接请求到该服务，但随着产品用户越来越多，单体应用存在显而易见的单点问题，除此之外，当单体应用大小升至几个 G 时，持续发布将会非常缓慢，所以服务的拆分成为了必然趋势。\n\n![](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1589605857758.png)\n\n当服务拆分为多个之后，我们不得不面临一个问题，就是如何控制用户请求到对应服务节点，于是网关层应运而生，它不仅可以负责负载均衡，还可以让它处理认证校验、请求限流、日志记录以及监控服务节点等等。\n\n![](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1589606854321.png)\n\n当然，网关层并不需要我们手动实现，市面上有很多 API 网关开源项目，比如 Zuul、Kong、Tyk 等，今天主要介绍 Kong。\n\n## 安装 Kong\n\nKong 是一个在 Nginx 中运行的 Lua 程序，由 lua-nginx-module 实现，和 Openresty 一起打包发行，支持多种操作环境下的安装，可以用来做 HTTP 基本认证、密钥认证、TCP、UDP、文件日志、API 请求限流、请求转发等等。\n\n第一步，创建一个 docker 网络。\n\n```bash\n$ docker network create kong-net\n```\n\n创建用于存储 Kong 数据的数据库，可以使用 Cassandra 或 PostgreSQL，本示例采用 Cassandra。\n\n> Cassandra 是由 Facebook 开发的分布式 NoSQL 数据库。\n\n```bash\n$ docker run -d --name kong-database \\\n               --network=kong-net \\\n               -p 9042:9042 \\\n               cassandra:3\n```\n\n初始化数据到 Cassandra 数据库。\n\n\n```bash\n$ docker run --rm \\\n\t--network=kong-net \\\n\t-e \"KONG_DATABASE=cassandra\" \\\n\t-e \"KONG_PG_HOST=kong-database\" \\\n\t-e \"KONG_PG_PASSWORD=kong\" \\\n\t-e \"KONG_CASSANDRA_CONTACT_POINTS=kong-database\" \\\n\tkong:latest kong migrations bootstrap\n```\n\n启动 Kong 容器连接数据库。\n\n```bash\n $ docker run -d --name kong \\\n     --network=kong-net \\\n     -e \"KONG_DATABASE=cassandra\" \\\n     -e \"KONG_PG_HOST=kong-database\" \\\n     -e \"KONG_PG_PASSWORD=kong\" \\\n     -e \"KONG_CASSANDRA_CONTACT_POINTS=kong-database\" \\\n     -e \"KONG_PROXY_ACCESS_LOG=/dev/stdout\" \\\n     -e \"KONG_ADMIN_ACCESS_LOG=/dev/stdout\" \\\n     -e \"KONG_PROXY_ERROR_LOG=/dev/stderr\" \\\n     -e \"KONG_ADMIN_ERROR_LOG=/dev/stderr\" \\\n     -e \"KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl\" \\\n     -p 8000:8000 \\\n     -p 8443:8443 \\\n     -p 0.0.0.0:8001:8001 \\\n     -p 0.0.0.0:8444:8444 \\\n     kong:latest\n```\n\n通过 curl 模拟请求本地 8001 端口可以获取 Kong 的详细信息。截止目前整个 kong 服务就跑起来了，接下来可以注册服务节点到 kong 中。\n\n```bash\n$ curl -i http://localhost:8001/\n```\n\n## 注册服务\n\n注册名为 baidu-service 的服务到 kong，如果请求匹配到该服务会跳转至 url。\n\n```bash\n$ curl -i -X POST \\\n  --url http://localhost:8001/services/ \\\n  --data 'name=baidu-service' \\\n  --data 'url=http://baidu.com'\n```\n\n注册成功之后会得到如下提示。\n\n```bash\nHTTP/1.1 201 Created\nDate: Sat, 16 May 2020 06:35:56 GMT\nContent-Type: application/json; charset=utf-8\nConnection: keep-alive\nAccess-Control-Allow-Origin: *\nServer: kong/2.0.4\nContent-Length: 292\nX-Kong-Admin-Latency: 103\n\n{\"host\":\"baidu.com\",\"created_at\":1589610956,\"connect_timeout\":60000,\"id\":\"6660aaa7-5afa-4f02-85f8-11dfb81fba84\",\"protocol\":\"http\",\"name\":\"baidu-service\",\"read_timeout\":60000,\"port\":80,\"path\":null,\"updated_at\":1589610956,\"retries\":5,\"write_timeout\":60000,\"tags\":null,\"client_certificate\":null}\n```\n\n## 服务配置路由\n\n服务添加成功后，需要告知 kong 什么样的请求才使用该服务，而这个规则被称为 route，也就是路由，路由的作用是按规则匹配客户端的请求，然后转发到对应的 service，每个 route 都对应一个 service，一个 service 可能有多个 route。\n\n```bash\n$ curl -i -X POST \\\n  --url http://localhost:8001/services/baidu-service/routes \\\n  --data 'hosts[]=baidu.com'\n```\n\n以上代码的作用是当请求域名是 baidu.com 时，则将请求转发到 baidu-service 指定的 url，我们可以通过 curl 模拟测试。\n\n```bash\n$ curl -i -X GET \\\n  --url http://localhost:8000/ \\\n  --header 'Host: baidu.com'\n```\n\n```bash\nHTTP/1.1 200 OK\nContent-Type: text/html; charset=UTF-8\nContent-Length: 81\nConnection: keep-alive\nDate: Sat, 16 May 2020 06:45:12 GMT\nServer: Apache\nLast-Modified: Tue, 12 Jan 2010 13:48:00 GMT\nETag: \"51-47cf7e6ee8400\"\nAccept-Ranges: bytes\nCache-Control: max-age=86400\nExpires: Sun, 17 May 2020 06:45:12 GMT\nX-Kong-Upstream-Latency: 92\nX-Kong-Proxy-Latency: 17\nVia: kong/2.0.4\n\n<html>\n<meta http-equiv=\"refresh\" content=\"0;url=http://www.baidu.com/\">\n</html>\n```\n\n## 负载均衡配置\n\n与 nginx 同理，先创建一个 upstream，名为 hello。\n\n```bash\n$ curl -X POST http://localhost:8001/upstreams --data \"name=hello\"\n```\n\n```bash\n{\"created_at\":1589633009,\"hash_on\":\"none\",\"id\":\"3bab80bb-7e62-40c8-8b7c-7efdcc329675\",\"algorithm\":\"round-robin\",\"name\":\"hello\",\"tags\":null,\"hash_fallback_header\":null,\"hash_fallback\":\"none\",\"hash_on_cookie\":null,\"host_header\":null,\"hash_on_cookie_path\":\"\\/\",\"healthchecks\":{\"threshold\":0,\"active\":{\"https_verify_certificate\":true,\"type\":\"http\",\"http_path\":\"\\/\",\"timeout\":1,\"unhealthy\":{\"http_statuses\":[429,404,500,501,502,503,504,505],\"tcp_failures\":0,\"timeouts\":0,\"http_failures\":0,\"interval\":0},\"healthy\":{\"http_statuses\":[200,302],\"interval\":0,\"successes\":0},\"https_sni\":null,\"concurrency\":10},\"passive\":{\"unhealthy\":{\"http_failures\":0,\"http_statuses\":[429,500,503],\"tcp_failures\":0,\"timeouts\":0},\"healthy\":{\"http_statuses\":[200,201,202,203,204,205,206,207,208,226,300,301,302,303,304,305,306,307,308],\"successes\":0},\"type\":\"http\"}},\"hash_on_header\":null,\"slots\":10000}\n```\n\n为 upstream 添加两个负载均衡的节点，我就拿京东和淘宝来做测试了。\n\n```bash\ncurl -X POST http://localhost:8001/upstreams/hello/targets --data \"target=jd.com\" --data \"weight=100\"\ncurl -X POST http://localhost:8001/upstreams/hello/targets --data \"target=taobao.com\" --data \"weight=50\"\n```\n\n如上配置就相当于 nginx 中的\n\n```bash\nupstream hello {\n\tserver jd.com weight=100;\n\tserver taobao.com weight=50;\n}\n```\n\n接下来创建一个 service 指向 upstream，host 即对应 upstream 名。\n\n```bash\ncurl -X POST http://localhost:8001/services --data \"name=hello\" --data \"host=hello\"\n```\n\n为 service 创建路由，凡是包含 /hello 的地址全部走 hello upstream。\n\n```bash\ncurl -i -X POST --url http://localhost:8001/services/hello/routes --data 'paths[]=/hello'\ncurl -X POST --url http://localhost:8001/routes --data 'paths[]=/hello' --data 'service.id=8ad06aa5-be0a-4763-a84d-90b8046765f5'\n```\n\n现在访问 localhost:8000 就可以看到已经成功做了负载均衡。\n\n## 限流\n\n因为服务器不能处理无限量的请求，为了避免请求数高到服务器无法处理，必须做限流操作。关于限流，kong 使用了 rate-limiting 插件，它可以在 service、route、consumer 不同粒度上控制请求，配置非常简单。\n\n```bash\ncurl -X POST http://kong:8001/services/{service}/plugins \\\n    --data \"name=rate-limiting\"\n    --data \"config.second=5\" \\\n    --data \"config.hour=10000\" \n```\n\nconfig.second 代表一秒钟内处理的最大请求次数，config.hour 表示一小时内最大请求次数。\n\nRoute 的示例\n\n```bash\ncurl -X POST http://kong:8001/routes/{route}/plugins \\\n    --data \"name=rate-limiting\"\n    --data \"config.second=5\" \\\n    --data \"config.hour=10000\" \n```\n\nConsumer 的示例\n\n```bash\ncurl -X POST http://kong:8001/consumers/{consumer}/plugins \\\n    --data \"name=rate-limiting-advanced\" \\\n    --data \"config.second=5\" \\\n    --data \"config.hour=10000\"\n```\n\n","slug":"architecture/gateway-kong","published":1,"updated":"2020-05-16T13:59:47.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka9p6os70003xbp42joi6fcg","content":"<h2 id=\"什么是-API-网关？\"><a href=\"#什么是-API-网关？\" class=\"headerlink\" title=\"什么是 API 网关？\"></a>什么是 API 网关？</h2><p>所谓网关，主要作用就是连接两个不同网络的设备，而今天所讲的 API 网关是指承接和分发客户端所有请求的网关层。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1589604854331.png\" alt=\"\"></p>\n<p>为什么需要网关层？最初是单体服务时，客户端发起的所有请求都可以直接请求到该服务，但随着产品用户越来越多，单体应用存在显而易见的单点问题，除此之外，当单体应用大小升至几个 G 时，持续发布将会非常缓慢，所以服务的拆分成为了必然趋势。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1589605857758.png\" alt=\"\"></p>\n<p>当服务拆分为多个之后，我们不得不面临一个问题，就是如何控制用户请求到对应服务节点，于是网关层应运而生，它不仅可以负责负载均衡，还可以让它处理认证校验、请求限流、日志记录以及监控服务节点等等。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1589606854321.png\" alt=\"\"></p>\n<p>当然，网关层并不需要我们手动实现，市面上有很多 API 网关开源项目，比如 Zuul、Kong、Tyk 等，今天主要介绍 Kong。</p>\n<h2 id=\"安装-Kong\"><a href=\"#安装-Kong\" class=\"headerlink\" title=\"安装 Kong\"></a>安装 Kong</h2><p>Kong 是一个在 Nginx 中运行的 Lua 程序，由 lua-nginx-module 实现，和 Openresty 一起打包发行，支持多种操作环境下的安装，可以用来做 HTTP 基本认证、密钥认证、TCP、UDP、文件日志、API 请求限流、请求转发等等。</p>\n<p>第一步，创建一个 docker 网络。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker network create kong-net</span><br></pre></td></tr></table></figure>\n\n<p>创建用于存储 Kong 数据的数据库，可以使用 Cassandra 或 PostgreSQL，本示例采用 Cassandra。</p>\n<blockquote>\n<p>Cassandra 是由 Facebook 开发的分布式 NoSQL 数据库。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d --name kong-database \\</span><br><span class=\"line\">               --network=kong-net \\</span><br><span class=\"line\">               -p 9042:9042 \\</span><br><span class=\"line\">               cassandra:3</span><br></pre></td></tr></table></figure>\n\n<p>初始化数据到 Cassandra 数据库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --rm \\</span><br><span class=\"line\">\t--network=kong-net \\</span><br><span class=\"line\">\t-e <span class=\"string\">\"KONG_DATABASE=cassandra\"</span> \\</span><br><span class=\"line\">\t-e <span class=\"string\">\"KONG_PG_HOST=kong-database\"</span> \\</span><br><span class=\"line\">\t-e <span class=\"string\">\"KONG_PG_PASSWORD=kong\"</span> \\</span><br><span class=\"line\">\t-e <span class=\"string\">\"KONG_CASSANDRA_CONTACT_POINTS=kong-database\"</span> \\</span><br><span class=\"line\">\tkong:latest kong migrations bootstrap</span><br></pre></td></tr></table></figure>\n\n<p>启动 Kong 容器连接数据库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d --name kong \\</span><br><span class=\"line\">    --network=kong-net \\</span><br><span class=\"line\">    -e <span class=\"string\">\"KONG_DATABASE=cassandra\"</span> \\</span><br><span class=\"line\">    -e <span class=\"string\">\"KONG_PG_HOST=kong-database\"</span> \\</span><br><span class=\"line\">    -e <span class=\"string\">\"KONG_PG_PASSWORD=kong\"</span> \\</span><br><span class=\"line\">    -e <span class=\"string\">\"KONG_CASSANDRA_CONTACT_POINTS=kong-database\"</span> \\</span><br><span class=\"line\">    -e <span class=\"string\">\"KONG_PROXY_ACCESS_LOG=/dev/stdout\"</span> \\</span><br><span class=\"line\">    -e <span class=\"string\">\"KONG_ADMIN_ACCESS_LOG=/dev/stdout\"</span> \\</span><br><span class=\"line\">    -e <span class=\"string\">\"KONG_PROXY_ERROR_LOG=/dev/stderr\"</span> \\</span><br><span class=\"line\">    -e <span class=\"string\">\"KONG_ADMIN_ERROR_LOG=/dev/stderr\"</span> \\</span><br><span class=\"line\">    -e <span class=\"string\">\"KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl\"</span> \\</span><br><span class=\"line\">    -p 8000:8000 \\</span><br><span class=\"line\">    -p 8443:8443 \\</span><br><span class=\"line\">    -p 0.0.0.0:8001:8001 \\</span><br><span class=\"line\">    -p 0.0.0.0:8444:8444 \\</span><br><span class=\"line\">    kong:latest</span><br></pre></td></tr></table></figure>\n\n<p>通过 curl 模拟请求本地 8001 端口可以获取 Kong 的详细信息。截止目前整个 kong 服务就跑起来了，接下来可以注册服务节点到 kong 中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -i http://localhost:8001/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注册服务\"><a href=\"#注册服务\" class=\"headerlink\" title=\"注册服务\"></a>注册服务</h2><p>注册名为 baidu-service 的服务到 kong，如果请求匹配到该服务会跳转至 url。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -i -X POST \\</span><br><span class=\"line\">  --url http://localhost:8001/services/ \\</span><br><span class=\"line\">  --data <span class=\"string\">'name=baidu-service'</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">'url=http://baidu.com'</span></span><br></pre></td></tr></table></figure>\n\n<p>注册成功之后会得到如下提示。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 201 Created</span><br><span class=\"line\">Date: Sat, 16 May 2020 06:35:56 GMT</span><br><span class=\"line\">Content-Type: application/json; charset=utf-8</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Access-Control-Allow-Origin: *</span><br><span class=\"line\">Server: kong/2.0.4</span><br><span class=\"line\">Content-Length: 292</span><br><span class=\"line\">X-Kong-Admin-Latency: 103</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"string\">\"host\"</span>:<span class=\"string\">\"baidu.com\"</span>,<span class=\"string\">\"created_at\"</span>:1589610956,<span class=\"string\">\"connect_timeout\"</span>:60000,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"6660aaa7-5afa-4f02-85f8-11dfb81fba84\"</span>,<span class=\"string\">\"protocol\"</span>:<span class=\"string\">\"http\"</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"baidu-service\"</span>,<span class=\"string\">\"read_timeout\"</span>:60000,<span class=\"string\">\"port\"</span>:80,<span class=\"string\">\"path\"</span>:null,<span class=\"string\">\"updated_at\"</span>:1589610956,<span class=\"string\">\"retries\"</span>:5,<span class=\"string\">\"write_timeout\"</span>:60000,<span class=\"string\">\"tags\"</span>:null,<span class=\"string\">\"client_certificate\"</span>:null&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"服务配置路由\"><a href=\"#服务配置路由\" class=\"headerlink\" title=\"服务配置路由\"></a>服务配置路由</h2><p>服务添加成功后，需要告知 kong 什么样的请求才使用该服务，而这个规则被称为 route，也就是路由，路由的作用是按规则匹配客户端的请求，然后转发到对应的 service，每个 route 都对应一个 service，一个 service 可能有多个 route。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -i -X POST \\</span><br><span class=\"line\">  --url http://localhost:8001/services/baidu-service/routes \\</span><br><span class=\"line\">  --data <span class=\"string\">'hosts[]=baidu.com'</span></span><br></pre></td></tr></table></figure>\n\n<p>以上代码的作用是当请求域名是 baidu.com 时，则将请求转发到 baidu-service 指定的 url，我们可以通过 curl 模拟测试。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -i -X GET \\</span><br><span class=\"line\">  --url http://localhost:8000/ \\</span><br><span class=\"line\">  --header <span class=\"string\">'Host: baidu.com'</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Content-Type: text/html; charset=UTF-8</span><br><span class=\"line\">Content-Length: 81</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Date: Sat, 16 May 2020 06:45:12 GMT</span><br><span class=\"line\">Server: Apache</span><br><span class=\"line\">Last-Modified: Tue, 12 Jan 2010 13:48:00 GMT</span><br><span class=\"line\">ETag: <span class=\"string\">\"51-47cf7e6ee8400\"</span></span><br><span class=\"line\">Accept-Ranges: bytes</span><br><span class=\"line\">Cache-Control: max-age=86400</span><br><span class=\"line\">Expires: Sun, 17 May 2020 06:45:12 GMT</span><br><span class=\"line\">X-Kong-Upstream-Latency: 92</span><br><span class=\"line\">X-Kong-Proxy-Latency: 17</span><br><span class=\"line\">Via: kong/2.0.4</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">\"refresh\"</span> content=<span class=\"string\">\"0;url=http://www.baidu.com/\"</span>&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"负载均衡配置\"><a href=\"#负载均衡配置\" class=\"headerlink\" title=\"负载均衡配置\"></a>负载均衡配置</h2><p>与 nginx 同理，先创建一个 upstream，名为 hello。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -X POST http://localhost:8001/upstreams --data <span class=\"string\">\"name=hello\"</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">\"created_at\"</span>:1589633009,<span class=\"string\">\"hash_on\"</span>:<span class=\"string\">\"none\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"3bab80bb-7e62-40c8-8b7c-7efdcc329675\"</span>,<span class=\"string\">\"algorithm\"</span>:<span class=\"string\">\"round-robin\"</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"hello\"</span>,<span class=\"string\">\"tags\"</span>:null,<span class=\"string\">\"hash_fallback_header\"</span>:null,<span class=\"string\">\"hash_fallback\"</span>:<span class=\"string\">\"none\"</span>,<span class=\"string\">\"hash_on_cookie\"</span>:null,<span class=\"string\">\"host_header\"</span>:null,<span class=\"string\">\"hash_on_cookie_path\"</span>:<span class=\"string\">\"\\/\"</span>,<span class=\"string\">\"healthchecks\"</span>:&#123;<span class=\"string\">\"threshold\"</span>:0,<span class=\"string\">\"active\"</span>:&#123;<span class=\"string\">\"https_verify_certificate\"</span>:<span class=\"literal\">true</span>,<span class=\"string\">\"type\"</span>:<span class=\"string\">\"http\"</span>,<span class=\"string\">\"http_path\"</span>:<span class=\"string\">\"\\/\"</span>,<span class=\"string\">\"timeout\"</span>:1,<span class=\"string\">\"unhealthy\"</span>:&#123;<span class=\"string\">\"http_statuses\"</span>:[429,404,500,501,502,503,504,505],<span class=\"string\">\"tcp_failures\"</span>:0,<span class=\"string\">\"timeouts\"</span>:0,<span class=\"string\">\"http_failures\"</span>:0,<span class=\"string\">\"interval\"</span>:0&#125;,<span class=\"string\">\"healthy\"</span>:&#123;<span class=\"string\">\"http_statuses\"</span>:[200,302],<span class=\"string\">\"interval\"</span>:0,<span class=\"string\">\"successes\"</span>:0&#125;,<span class=\"string\">\"https_sni\"</span>:null,<span class=\"string\">\"concurrency\"</span>:10&#125;,<span class=\"string\">\"passive\"</span>:&#123;<span class=\"string\">\"unhealthy\"</span>:&#123;<span class=\"string\">\"http_failures\"</span>:0,<span class=\"string\">\"http_statuses\"</span>:[429,500,503],<span class=\"string\">\"tcp_failures\"</span>:0,<span class=\"string\">\"timeouts\"</span>:0&#125;,<span class=\"string\">\"healthy\"</span>:&#123;<span class=\"string\">\"http_statuses\"</span>:[200,201,202,203,204,205,206,207,208,226,300,301,302,303,304,305,306,307,308],<span class=\"string\">\"successes\"</span>:0&#125;,<span class=\"string\">\"type\"</span>:<span class=\"string\">\"http\"</span>&#125;&#125;,<span class=\"string\">\"hash_on_header\"</span>:null,<span class=\"string\">\"slots\"</span>:10000&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为 upstream 添加两个负载均衡的节点，我就拿京东和淘宝来做测试了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST http://localhost:8001/upstreams/hello/targets --data <span class=\"string\">\"target=jd.com\"</span> --data <span class=\"string\">\"weight=100\"</span></span><br><span class=\"line\">curl -X POST http://localhost:8001/upstreams/hello/targets --data <span class=\"string\">\"target=taobao.com\"</span> --data <span class=\"string\">\"weight=50\"</span></span><br></pre></td></tr></table></figure>\n\n<p>如上配置就相当于 nginx 中的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream hello &#123;</span><br><span class=\"line\">\tserver jd.com weight=100;</span><br><span class=\"line\">\tserver taobao.com weight=50;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来创建一个 service 指向 upstream，host 即对应 upstream 名。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST http://localhost:8001/services --data <span class=\"string\">\"name=hello\"</span> --data <span class=\"string\">\"host=hello\"</span></span><br></pre></td></tr></table></figure>\n\n<p>为 service 创建路由，凡是包含 /hello 的地址全部走 hello upstream。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -i -X POST --url http://localhost:8001/services/hello/routes --data <span class=\"string\">'paths[]=/hello'</span></span><br><span class=\"line\">curl -X POST --url http://localhost:8001/routes --data <span class=\"string\">'paths[]=/hello'</span> --data <span class=\"string\">'service.id=8ad06aa5-be0a-4763-a84d-90b8046765f5'</span></span><br></pre></td></tr></table></figure>\n\n<p>现在访问 localhost:8000 就可以看到已经成功做了负载均衡。</p>\n<h2 id=\"限流\"><a href=\"#限流\" class=\"headerlink\" title=\"限流\"></a>限流</h2><p>因为服务器不能处理无限量的请求，为了避免请求数高到服务器无法处理，必须做限流操作。关于限流，kong 使用了 rate-limiting 插件，它可以在 service、route、consumer 不同粒度上控制请求，配置非常简单。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST http://kong:8001/services/&#123;service&#125;/plugins \\</span><br><span class=\"line\">    --data <span class=\"string\">\"name=rate-limiting\"</span></span><br><span class=\"line\">    --data <span class=\"string\">\"config.second=5\"</span> \\</span><br><span class=\"line\">    --data <span class=\"string\">\"config.hour=10000\"</span></span><br></pre></td></tr></table></figure>\n\n<p>config.second 代表一秒钟内处理的最大请求次数，config.hour 表示一小时内最大请求次数。</p>\n<p>Route 的示例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST http://kong:8001/routes/&#123;route&#125;/plugins \\</span><br><span class=\"line\">    --data <span class=\"string\">\"name=rate-limiting\"</span></span><br><span class=\"line\">    --data <span class=\"string\">\"config.second=5\"</span> \\</span><br><span class=\"line\">    --data <span class=\"string\">\"config.hour=10000\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Consumer 的示例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST http://kong:8001/consumers/&#123;consumer&#125;/plugins \\</span><br><span class=\"line\">    --data <span class=\"string\">\"name=rate-limiting-advanced\"</span> \\</span><br><span class=\"line\">    --data <span class=\"string\">\"config.second=5\"</span> \\</span><br><span class=\"line\">    --data <span class=\"string\">\"config.hour=10000\"</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是-API-网关？\"><a href=\"#什么是-API-网关？\" class=\"headerlink\" title=\"什么是 API 网关？\"></a>什么是 API 网关？</h2><p>所谓网关，主要作用就是连接两个不同网络的设备，而今天所讲的 API 网关是指承接和分发客户端所有请求的网关层。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1589604854331.png\" alt=\"\"></p>\n<p>为什么需要网关层？最初是单体服务时，客户端发起的所有请求都可以直接请求到该服务，但随着产品用户越来越多，单体应用存在显而易见的单点问题，除此之外，当单体应用大小升至几个 G 时，持续发布将会非常缓慢，所以服务的拆分成为了必然趋势。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1589605857758.png\" alt=\"\"></p>\n<p>当服务拆分为多个之后，我们不得不面临一个问题，就是如何控制用户请求到对应服务节点，于是网关层应运而生，它不仅可以负责负载均衡，还可以让它处理认证校验、请求限流、日志记录以及监控服务节点等等。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1589606854321.png\" alt=\"\"></p>\n<p>当然，网关层并不需要我们手动实现，市面上有很多 API 网关开源项目，比如 Zuul、Kong、Tyk 等，今天主要介绍 Kong。</p>\n<h2 id=\"安装-Kong\"><a href=\"#安装-Kong\" class=\"headerlink\" title=\"安装 Kong\"></a>安装 Kong</h2><p>Kong 是一个在 Nginx 中运行的 Lua 程序，由 lua-nginx-module 实现，和 Openresty 一起打包发行，支持多种操作环境下的安装，可以用来做 HTTP 基本认证、密钥认证、TCP、UDP、文件日志、API 请求限流、请求转发等等。</p>\n<p>第一步，创建一个 docker 网络。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker network create kong-net</span><br></pre></td></tr></table></figure>\n\n<p>创建用于存储 Kong 数据的数据库，可以使用 Cassandra 或 PostgreSQL，本示例采用 Cassandra。</p>\n<blockquote>\n<p>Cassandra 是由 Facebook 开发的分布式 NoSQL 数据库。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d --name kong-database \\</span><br><span class=\"line\">               --network=kong-net \\</span><br><span class=\"line\">               -p 9042:9042 \\</span><br><span class=\"line\">               cassandra:3</span><br></pre></td></tr></table></figure>\n\n<p>初始化数据到 Cassandra 数据库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --rm \\</span><br><span class=\"line\">\t--network=kong-net \\</span><br><span class=\"line\">\t-e <span class=\"string\">\"KONG_DATABASE=cassandra\"</span> \\</span><br><span class=\"line\">\t-e <span class=\"string\">\"KONG_PG_HOST=kong-database\"</span> \\</span><br><span class=\"line\">\t-e <span class=\"string\">\"KONG_PG_PASSWORD=kong\"</span> \\</span><br><span class=\"line\">\t-e <span class=\"string\">\"KONG_CASSANDRA_CONTACT_POINTS=kong-database\"</span> \\</span><br><span class=\"line\">\tkong:latest kong migrations bootstrap</span><br></pre></td></tr></table></figure>\n\n<p>启动 Kong 容器连接数据库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d --name kong \\</span><br><span class=\"line\">    --network=kong-net \\</span><br><span class=\"line\">    -e <span class=\"string\">\"KONG_DATABASE=cassandra\"</span> \\</span><br><span class=\"line\">    -e <span class=\"string\">\"KONG_PG_HOST=kong-database\"</span> \\</span><br><span class=\"line\">    -e <span class=\"string\">\"KONG_PG_PASSWORD=kong\"</span> \\</span><br><span class=\"line\">    -e <span class=\"string\">\"KONG_CASSANDRA_CONTACT_POINTS=kong-database\"</span> \\</span><br><span class=\"line\">    -e <span class=\"string\">\"KONG_PROXY_ACCESS_LOG=/dev/stdout\"</span> \\</span><br><span class=\"line\">    -e <span class=\"string\">\"KONG_ADMIN_ACCESS_LOG=/dev/stdout\"</span> \\</span><br><span class=\"line\">    -e <span class=\"string\">\"KONG_PROXY_ERROR_LOG=/dev/stderr\"</span> \\</span><br><span class=\"line\">    -e <span class=\"string\">\"KONG_ADMIN_ERROR_LOG=/dev/stderr\"</span> \\</span><br><span class=\"line\">    -e <span class=\"string\">\"KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl\"</span> \\</span><br><span class=\"line\">    -p 8000:8000 \\</span><br><span class=\"line\">    -p 8443:8443 \\</span><br><span class=\"line\">    -p 0.0.0.0:8001:8001 \\</span><br><span class=\"line\">    -p 0.0.0.0:8444:8444 \\</span><br><span class=\"line\">    kong:latest</span><br></pre></td></tr></table></figure>\n\n<p>通过 curl 模拟请求本地 8001 端口可以获取 Kong 的详细信息。截止目前整个 kong 服务就跑起来了，接下来可以注册服务节点到 kong 中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -i http://localhost:8001/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注册服务\"><a href=\"#注册服务\" class=\"headerlink\" title=\"注册服务\"></a>注册服务</h2><p>注册名为 baidu-service 的服务到 kong，如果请求匹配到该服务会跳转至 url。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -i -X POST \\</span><br><span class=\"line\">  --url http://localhost:8001/services/ \\</span><br><span class=\"line\">  --data <span class=\"string\">'name=baidu-service'</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">'url=http://baidu.com'</span></span><br></pre></td></tr></table></figure>\n\n<p>注册成功之后会得到如下提示。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 201 Created</span><br><span class=\"line\">Date: Sat, 16 May 2020 06:35:56 GMT</span><br><span class=\"line\">Content-Type: application/json; charset=utf-8</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Access-Control-Allow-Origin: *</span><br><span class=\"line\">Server: kong/2.0.4</span><br><span class=\"line\">Content-Length: 292</span><br><span class=\"line\">X-Kong-Admin-Latency: 103</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"string\">\"host\"</span>:<span class=\"string\">\"baidu.com\"</span>,<span class=\"string\">\"created_at\"</span>:1589610956,<span class=\"string\">\"connect_timeout\"</span>:60000,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"6660aaa7-5afa-4f02-85f8-11dfb81fba84\"</span>,<span class=\"string\">\"protocol\"</span>:<span class=\"string\">\"http\"</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"baidu-service\"</span>,<span class=\"string\">\"read_timeout\"</span>:60000,<span class=\"string\">\"port\"</span>:80,<span class=\"string\">\"path\"</span>:null,<span class=\"string\">\"updated_at\"</span>:1589610956,<span class=\"string\">\"retries\"</span>:5,<span class=\"string\">\"write_timeout\"</span>:60000,<span class=\"string\">\"tags\"</span>:null,<span class=\"string\">\"client_certificate\"</span>:null&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"服务配置路由\"><a href=\"#服务配置路由\" class=\"headerlink\" title=\"服务配置路由\"></a>服务配置路由</h2><p>服务添加成功后，需要告知 kong 什么样的请求才使用该服务，而这个规则被称为 route，也就是路由，路由的作用是按规则匹配客户端的请求，然后转发到对应的 service，每个 route 都对应一个 service，一个 service 可能有多个 route。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -i -X POST \\</span><br><span class=\"line\">  --url http://localhost:8001/services/baidu-service/routes \\</span><br><span class=\"line\">  --data <span class=\"string\">'hosts[]=baidu.com'</span></span><br></pre></td></tr></table></figure>\n\n<p>以上代码的作用是当请求域名是 baidu.com 时，则将请求转发到 baidu-service 指定的 url，我们可以通过 curl 模拟测试。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -i -X GET \\</span><br><span class=\"line\">  --url http://localhost:8000/ \\</span><br><span class=\"line\">  --header <span class=\"string\">'Host: baidu.com'</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Content-Type: text/html; charset=UTF-8</span><br><span class=\"line\">Content-Length: 81</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Date: Sat, 16 May 2020 06:45:12 GMT</span><br><span class=\"line\">Server: Apache</span><br><span class=\"line\">Last-Modified: Tue, 12 Jan 2010 13:48:00 GMT</span><br><span class=\"line\">ETag: <span class=\"string\">\"51-47cf7e6ee8400\"</span></span><br><span class=\"line\">Accept-Ranges: bytes</span><br><span class=\"line\">Cache-Control: max-age=86400</span><br><span class=\"line\">Expires: Sun, 17 May 2020 06:45:12 GMT</span><br><span class=\"line\">X-Kong-Upstream-Latency: 92</span><br><span class=\"line\">X-Kong-Proxy-Latency: 17</span><br><span class=\"line\">Via: kong/2.0.4</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">\"refresh\"</span> content=<span class=\"string\">\"0;url=http://www.baidu.com/\"</span>&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"负载均衡配置\"><a href=\"#负载均衡配置\" class=\"headerlink\" title=\"负载均衡配置\"></a>负载均衡配置</h2><p>与 nginx 同理，先创建一个 upstream，名为 hello。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -X POST http://localhost:8001/upstreams --data <span class=\"string\">\"name=hello\"</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">\"created_at\"</span>:1589633009,<span class=\"string\">\"hash_on\"</span>:<span class=\"string\">\"none\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"3bab80bb-7e62-40c8-8b7c-7efdcc329675\"</span>,<span class=\"string\">\"algorithm\"</span>:<span class=\"string\">\"round-robin\"</span>,<span class=\"string\">\"name\"</span>:<span class=\"string\">\"hello\"</span>,<span class=\"string\">\"tags\"</span>:null,<span class=\"string\">\"hash_fallback_header\"</span>:null,<span class=\"string\">\"hash_fallback\"</span>:<span class=\"string\">\"none\"</span>,<span class=\"string\">\"hash_on_cookie\"</span>:null,<span class=\"string\">\"host_header\"</span>:null,<span class=\"string\">\"hash_on_cookie_path\"</span>:<span class=\"string\">\"\\/\"</span>,<span class=\"string\">\"healthchecks\"</span>:&#123;<span class=\"string\">\"threshold\"</span>:0,<span class=\"string\">\"active\"</span>:&#123;<span class=\"string\">\"https_verify_certificate\"</span>:<span class=\"literal\">true</span>,<span class=\"string\">\"type\"</span>:<span class=\"string\">\"http\"</span>,<span class=\"string\">\"http_path\"</span>:<span class=\"string\">\"\\/\"</span>,<span class=\"string\">\"timeout\"</span>:1,<span class=\"string\">\"unhealthy\"</span>:&#123;<span class=\"string\">\"http_statuses\"</span>:[429,404,500,501,502,503,504,505],<span class=\"string\">\"tcp_failures\"</span>:0,<span class=\"string\">\"timeouts\"</span>:0,<span class=\"string\">\"http_failures\"</span>:0,<span class=\"string\">\"interval\"</span>:0&#125;,<span class=\"string\">\"healthy\"</span>:&#123;<span class=\"string\">\"http_statuses\"</span>:[200,302],<span class=\"string\">\"interval\"</span>:0,<span class=\"string\">\"successes\"</span>:0&#125;,<span class=\"string\">\"https_sni\"</span>:null,<span class=\"string\">\"concurrency\"</span>:10&#125;,<span class=\"string\">\"passive\"</span>:&#123;<span class=\"string\">\"unhealthy\"</span>:&#123;<span class=\"string\">\"http_failures\"</span>:0,<span class=\"string\">\"http_statuses\"</span>:[429,500,503],<span class=\"string\">\"tcp_failures\"</span>:0,<span class=\"string\">\"timeouts\"</span>:0&#125;,<span class=\"string\">\"healthy\"</span>:&#123;<span class=\"string\">\"http_statuses\"</span>:[200,201,202,203,204,205,206,207,208,226,300,301,302,303,304,305,306,307,308],<span class=\"string\">\"successes\"</span>:0&#125;,<span class=\"string\">\"type\"</span>:<span class=\"string\">\"http\"</span>&#125;&#125;,<span class=\"string\">\"hash_on_header\"</span>:null,<span class=\"string\">\"slots\"</span>:10000&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为 upstream 添加两个负载均衡的节点，我就拿京东和淘宝来做测试了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST http://localhost:8001/upstreams/hello/targets --data <span class=\"string\">\"target=jd.com\"</span> --data <span class=\"string\">\"weight=100\"</span></span><br><span class=\"line\">curl -X POST http://localhost:8001/upstreams/hello/targets --data <span class=\"string\">\"target=taobao.com\"</span> --data <span class=\"string\">\"weight=50\"</span></span><br></pre></td></tr></table></figure>\n\n<p>如上配置就相当于 nginx 中的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream hello &#123;</span><br><span class=\"line\">\tserver jd.com weight=100;</span><br><span class=\"line\">\tserver taobao.com weight=50;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来创建一个 service 指向 upstream，host 即对应 upstream 名。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST http://localhost:8001/services --data <span class=\"string\">\"name=hello\"</span> --data <span class=\"string\">\"host=hello\"</span></span><br></pre></td></tr></table></figure>\n\n<p>为 service 创建路由，凡是包含 /hello 的地址全部走 hello upstream。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -i -X POST --url http://localhost:8001/services/hello/routes --data <span class=\"string\">'paths[]=/hello'</span></span><br><span class=\"line\">curl -X POST --url http://localhost:8001/routes --data <span class=\"string\">'paths[]=/hello'</span> --data <span class=\"string\">'service.id=8ad06aa5-be0a-4763-a84d-90b8046765f5'</span></span><br></pre></td></tr></table></figure>\n\n<p>现在访问 localhost:8000 就可以看到已经成功做了负载均衡。</p>\n<h2 id=\"限流\"><a href=\"#限流\" class=\"headerlink\" title=\"限流\"></a>限流</h2><p>因为服务器不能处理无限量的请求，为了避免请求数高到服务器无法处理，必须做限流操作。关于限流，kong 使用了 rate-limiting 插件，它可以在 service、route、consumer 不同粒度上控制请求，配置非常简单。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST http://kong:8001/services/&#123;service&#125;/plugins \\</span><br><span class=\"line\">    --data <span class=\"string\">\"name=rate-limiting\"</span></span><br><span class=\"line\">    --data <span class=\"string\">\"config.second=5\"</span> \\</span><br><span class=\"line\">    --data <span class=\"string\">\"config.hour=10000\"</span></span><br></pre></td></tr></table></figure>\n\n<p>config.second 代表一秒钟内处理的最大请求次数，config.hour 表示一小时内最大请求次数。</p>\n<p>Route 的示例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST http://kong:8001/routes/&#123;route&#125;/plugins \\</span><br><span class=\"line\">    --data <span class=\"string\">\"name=rate-limiting\"</span></span><br><span class=\"line\">    --data <span class=\"string\">\"config.second=5\"</span> \\</span><br><span class=\"line\">    --data <span class=\"string\">\"config.hour=10000\"</span></span><br></pre></td></tr></table></figure>\n\n<p>Consumer 的示例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST http://kong:8001/consumers/&#123;consumer&#125;/plugins \\</span><br><span class=\"line\">    --data <span class=\"string\">\"name=rate-limiting-advanced\"</span> \\</span><br><span class=\"line\">    --data <span class=\"string\">\"config.second=5\"</span> \\</span><br><span class=\"line\">    --data <span class=\"string\">\"config.hour=10000\"</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"如何使用 frp 实现内网穿透","date":"2020-05-13T12:19:38.000Z","_content":"\n## 背景\n\n作为一名程序员，家里多多少少会有一些落了灰的电脑，如果把闲置的电脑变成服务器，不仅有良好的配置，还能用来做各种测试，那就再好不过了。但是局域网的设备怎么被外网访问呢？这就靠内网穿透来实现了。\n\n内网穿透又叫 [NAT](#nat) 穿透，常用的工具有很多，比如 ngrok、花生壳、frp等，因为我使用的是 frp，这也是本篇文章的主题。\n\n<span id=\"nat\"></span>\n\n> NAT 是在 IP 数据包通过路由器或防火墙的时候重写 IP 地址的技术。因为现在的公网 IP 数量有限，国家不能给每个设备分配一个公网 IP，所以只能多台计算机共用一个公网 IP 对外通讯，这样就需要进行网络转换，而 NAT 的目的正是如此。\n\n## 基本实现原理\n\nfrp 分为服务端与客户端，前者运行在有公网 IP 的服务器上，后者运行在局域网内的设备上，服务端默认会先开放 7000 端口，然后客户端与其相连。\n\n![](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1589543547681.png)\n\n同时客户端可以开启用于 ssh 的端口，与服务端的某个端口做映射，这样我们在终端访问服务端的端口时，会自动转发到客户端去。\n\n![](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1589544730493.png)\n\n除了 ssh 端口之外，frp 还支持 web 端口来接收 http 访问。\n\n## 安装使用\n\n目前需要公网服务器、内网服务器各一台，我的内网服务器重装了 linux 系统，方便试验各类工具。\n\n### 服务端安装配置\n\n```shell\nwget https://github.com/fatedier/frp/releases/download/v0.33.0/frp_0.33.0_linux_amd64.tar.gz\ntar zxvf frp_0.33.0_linux_amd64.tar.gz\ncd frp_0.33.0_linux_amd64/\n```\n\n服务端的配置文件是 frps.ini，默认绑定 7000 端口，如果购置了云服务器，注意打开 7000 端口。\n\n```shell\n[common]\nbind_port = 7000\n```\n\n通过 fprs 二进制文件启动 frp 服务。\n\n```shell\n./frps -c ./frps.ini\n```\n\n如下提示即是安装成功。\n\n```shell\n2020/05/15 22:16:29 [I] [service.go:178] frps tcp listen on 0.0.0.0:7000\n2020/05/15 22:16:29 [I] [root.go:209] start frps success\n2020/05/15 22:16:38 [I] [service.go:432] [e3c5096bd4291972] client login info: ip [14.114.230.168:44422] version [0.24.1] hostname [] os [linux] arch [amd64]\n2020/05/15 22:16:38 [I] [tcp.go:63] [e3c5096bd4291972] [ssh] tcp proxy listen port [7001]\n2020/05/15 22:16:38 [I] [control.go:445] [e3c5096bd4291972] new proxy [ssh] success\n```\n\n### 客户端安装配置\n\n把自己的破电脑拿出来，以同样的方式下载 frp。\n\n```shell\nwget https://github.com/fatedier/frp/releases/download/v0.33.0/frp_0.33.0_linux_amd64.tar.gz\ntar zxvf frp_0.33.0_linux_amd64.tar.gz\ncd frp_0.33.0_linux_amd64/\n```\n\n客户端的配置文件是 frpc.ini。\n\n```shell\n[common]\nserver_addr = 127.0.0.1\nserver_port = 7000\n\n[ssh]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 6000\n```\n\ncommon 为通用配置\n\n- server_addr 为公网服务器 IP 地址\n- server_port 为公网服务器配置的 7000 端口\n\nssh 用于终端命令行访问\n\n- type 连接类型，默认为 tcp\n- local_ip 本地  IP\n- local_port 用于 ssh 的端口号，默认 22\n- remote_port 映射的服务端端口，访问该端口时默认转发到客户端的 22 端口\n\n启动客户端进程\n\n```shell\n./frpc -c ./frpc.ini\n```\n\n如有以下提示则代表与服务端连接成功\n\n```shell\n2020/05/15 22:34:49 [I] [service.go:282] [9bc650122a538aab] login to server success, get run id [9bc650122a538aab], server udp port [0]\n2020/05/15 22:34:49 [I] [proxy_manager.go:144] [9bc650122a538aab] proxy added: [ssh]\n2020/05/15 22:34:49 [I] [control.go:179] [9bc650122a538aab] [ssh] start proxy success\n```\n\n### 测试\n\n启动完成后就可以通过 ssh 连接到内网服务器了。\n\n```shell\nssh -p 6000 enoch@xxx.xx.xxx.xxx\n```","source":"_posts/network/frp.md","raw":"---\ntitle: 如何使用 frp 实现内网穿透\ndate: 2020-05-13 20:19:38\ntags:\n- frp\n- 内网穿透\n- golang\ncategories:\n- 网络\n---\n\n## 背景\n\n作为一名程序员，家里多多少少会有一些落了灰的电脑，如果把闲置的电脑变成服务器，不仅有良好的配置，还能用来做各种测试，那就再好不过了。但是局域网的设备怎么被外网访问呢？这就靠内网穿透来实现了。\n\n内网穿透又叫 [NAT](#nat) 穿透，常用的工具有很多，比如 ngrok、花生壳、frp等，因为我使用的是 frp，这也是本篇文章的主题。\n\n<span id=\"nat\"></span>\n\n> NAT 是在 IP 数据包通过路由器或防火墙的时候重写 IP 地址的技术。因为现在的公网 IP 数量有限，国家不能给每个设备分配一个公网 IP，所以只能多台计算机共用一个公网 IP 对外通讯，这样就需要进行网络转换，而 NAT 的目的正是如此。\n\n## 基本实现原理\n\nfrp 分为服务端与客户端，前者运行在有公网 IP 的服务器上，后者运行在局域网内的设备上，服务端默认会先开放 7000 端口，然后客户端与其相连。\n\n![](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1589543547681.png)\n\n同时客户端可以开启用于 ssh 的端口，与服务端的某个端口做映射，这样我们在终端访问服务端的端口时，会自动转发到客户端去。\n\n![](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1589544730493.png)\n\n除了 ssh 端口之外，frp 还支持 web 端口来接收 http 访问。\n\n## 安装使用\n\n目前需要公网服务器、内网服务器各一台，我的内网服务器重装了 linux 系统，方便试验各类工具。\n\n### 服务端安装配置\n\n```shell\nwget https://github.com/fatedier/frp/releases/download/v0.33.0/frp_0.33.0_linux_amd64.tar.gz\ntar zxvf frp_0.33.0_linux_amd64.tar.gz\ncd frp_0.33.0_linux_amd64/\n```\n\n服务端的配置文件是 frps.ini，默认绑定 7000 端口，如果购置了云服务器，注意打开 7000 端口。\n\n```shell\n[common]\nbind_port = 7000\n```\n\n通过 fprs 二进制文件启动 frp 服务。\n\n```shell\n./frps -c ./frps.ini\n```\n\n如下提示即是安装成功。\n\n```shell\n2020/05/15 22:16:29 [I] [service.go:178] frps tcp listen on 0.0.0.0:7000\n2020/05/15 22:16:29 [I] [root.go:209] start frps success\n2020/05/15 22:16:38 [I] [service.go:432] [e3c5096bd4291972] client login info: ip [14.114.230.168:44422] version [0.24.1] hostname [] os [linux] arch [amd64]\n2020/05/15 22:16:38 [I] [tcp.go:63] [e3c5096bd4291972] [ssh] tcp proxy listen port [7001]\n2020/05/15 22:16:38 [I] [control.go:445] [e3c5096bd4291972] new proxy [ssh] success\n```\n\n### 客户端安装配置\n\n把自己的破电脑拿出来，以同样的方式下载 frp。\n\n```shell\nwget https://github.com/fatedier/frp/releases/download/v0.33.0/frp_0.33.0_linux_amd64.tar.gz\ntar zxvf frp_0.33.0_linux_amd64.tar.gz\ncd frp_0.33.0_linux_amd64/\n```\n\n客户端的配置文件是 frpc.ini。\n\n```shell\n[common]\nserver_addr = 127.0.0.1\nserver_port = 7000\n\n[ssh]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 6000\n```\n\ncommon 为通用配置\n\n- server_addr 为公网服务器 IP 地址\n- server_port 为公网服务器配置的 7000 端口\n\nssh 用于终端命令行访问\n\n- type 连接类型，默认为 tcp\n- local_ip 本地  IP\n- local_port 用于 ssh 的端口号，默认 22\n- remote_port 映射的服务端端口，访问该端口时默认转发到客户端的 22 端口\n\n启动客户端进程\n\n```shell\n./frpc -c ./frpc.ini\n```\n\n如有以下提示则代表与服务端连接成功\n\n```shell\n2020/05/15 22:34:49 [I] [service.go:282] [9bc650122a538aab] login to server success, get run id [9bc650122a538aab], server udp port [0]\n2020/05/15 22:34:49 [I] [proxy_manager.go:144] [9bc650122a538aab] proxy added: [ssh]\n2020/05/15 22:34:49 [I] [control.go:179] [9bc650122a538aab] [ssh] start proxy success\n```\n\n### 测试\n\n启动完成后就可以通过 ssh 连接到内网服务器了。\n\n```shell\nssh -p 6000 enoch@xxx.xx.xxx.xxx\n```","slug":"network/frp","published":1,"updated":"2020-05-15T14:44:57.427Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka9p6os90004xbp49wkh3bdw","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>作为一名程序员，家里多多少少会有一些落了灰的电脑，如果把闲置的电脑变成服务器，不仅有良好的配置，还能用来做各种测试，那就再好不过了。但是局域网的设备怎么被外网访问呢？这就靠内网穿透来实现了。</p>\n<p>内网穿透又叫 <a href=\"#nat\">NAT</a> 穿透，常用的工具有很多，比如 ngrok、花生壳、frp等，因为我使用的是 frp，这也是本篇文章的主题。</p>\n<p><span id=\"nat\"></span></p>\n<blockquote>\n<p>NAT 是在 IP 数据包通过路由器或防火墙的时候重写 IP 地址的技术。因为现在的公网 IP 数量有限，国家不能给每个设备分配一个公网 IP，所以只能多台计算机共用一个公网 IP 对外通讯，这样就需要进行网络转换，而 NAT 的目的正是如此。</p>\n</blockquote>\n<h2 id=\"基本实现原理\"><a href=\"#基本实现原理\" class=\"headerlink\" title=\"基本实现原理\"></a>基本实现原理</h2><p>frp 分为服务端与客户端，前者运行在有公网 IP 的服务器上，后者运行在局域网内的设备上，服务端默认会先开放 7000 端口，然后客户端与其相连。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1589543547681.png\" alt=\"\"></p>\n<p>同时客户端可以开启用于 ssh 的端口，与服务端的某个端口做映射，这样我们在终端访问服务端的端口时，会自动转发到客户端去。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1589544730493.png\" alt=\"\"></p>\n<p>除了 ssh 端口之外，frp 还支持 web 端口来接收 http 访问。</p>\n<h2 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h2><p>目前需要公网服务器、内网服务器各一台，我的内网服务器重装了 linux 系统，方便试验各类工具。</p>\n<h3 id=\"服务端安装配置\"><a href=\"#服务端安装配置\" class=\"headerlink\" title=\"服务端安装配置\"></a>服务端安装配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.33.0/frp_0.33.0_linux_amd64.tar.gz</span><br><span class=\"line\">tar zxvf frp_0.33.0_linux_amd64.tar.gz</span><br><span class=\"line\">cd frp_0.33.0_linux_amd64/</span><br></pre></td></tr></table></figure>\n\n<p>服务端的配置文件是 frps.ini，默认绑定 7000 端口，如果购置了云服务器，注意打开 7000 端口。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\">bind_port = 7000</span><br></pre></td></tr></table></figure>\n\n<p>通过 fprs 二进制文件启动 frp 服务。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure>\n\n<p>如下提示即是安装成功。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020/05/15 22:16:29 [I] [service.go:178] frps tcp listen on 0.0.0.0:7000</span><br><span class=\"line\">2020/05/15 22:16:29 [I] [root.go:209] start frps success</span><br><span class=\"line\">2020/05/15 22:16:38 [I] [service.go:432] [e3c5096bd4291972] client login info: ip [14.114.230.168:44422] version [0.24.1] hostname [] os [linux] arch [amd64]</span><br><span class=\"line\">2020/05/15 22:16:38 [I] [tcp.go:63] [e3c5096bd4291972] [ssh] tcp proxy listen port [7001]</span><br><span class=\"line\">2020/05/15 22:16:38 [I] [control.go:445] [e3c5096bd4291972] new proxy [ssh] success</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端安装配置\"><a href=\"#客户端安装配置\" class=\"headerlink\" title=\"客户端安装配置\"></a>客户端安装配置</h3><p>把自己的破电脑拿出来，以同样的方式下载 frp。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.33.0/frp_0.33.0_linux_amd64.tar.gz</span><br><span class=\"line\">tar zxvf frp_0.33.0_linux_amd64.tar.gz</span><br><span class=\"line\">cd frp_0.33.0_linux_amd64/</span><br></pre></td></tr></table></figure>\n\n<p>客户端的配置文件是 frpc.ini。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\">server_addr = 127.0.0.1</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\"></span><br><span class=\"line\">[ssh]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 127.0.0.1</span><br><span class=\"line\">local_port = 22</span><br><span class=\"line\">remote_port = 6000</span><br></pre></td></tr></table></figure>\n\n<p>common 为通用配置</p>\n<ul>\n<li>server_addr 为公网服务器 IP 地址</li>\n<li>server_port 为公网服务器配置的 7000 端口</li>\n</ul>\n<p>ssh 用于终端命令行访问</p>\n<ul>\n<li>type 连接类型，默认为 tcp</li>\n<li>local_ip 本地  IP</li>\n<li>local_port 用于 ssh 的端口号，默认 22</li>\n<li>remote_port 映射的服务端端口，访问该端口时默认转发到客户端的 22 端口</li>\n</ul>\n<p>启动客户端进程</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure>\n\n<p>如有以下提示则代表与服务端连接成功</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020/05/15 22:34:49 [I] [service.go:282] [9bc650122a538aab] login to server success, get run id [9bc650122a538aab], server udp port [0]</span><br><span class=\"line\">2020/05/15 22:34:49 [I] [proxy_manager.go:144] [9bc650122a538aab] proxy added: [ssh]</span><br><span class=\"line\">2020/05/15 22:34:49 [I] [control.go:179] [9bc650122a538aab] [ssh] start proxy success</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>启动完成后就可以通过 ssh 连接到内网服务器了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -p 6000 enoch@xxx.xx.xxx.xxx</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>作为一名程序员，家里多多少少会有一些落了灰的电脑，如果把闲置的电脑变成服务器，不仅有良好的配置，还能用来做各种测试，那就再好不过了。但是局域网的设备怎么被外网访问呢？这就靠内网穿透来实现了。</p>\n<p>内网穿透又叫 <a href=\"#nat\">NAT</a> 穿透，常用的工具有很多，比如 ngrok、花生壳、frp等，因为我使用的是 frp，这也是本篇文章的主题。</p>\n<p><span id=\"nat\"></span></p>\n<blockquote>\n<p>NAT 是在 IP 数据包通过路由器或防火墙的时候重写 IP 地址的技术。因为现在的公网 IP 数量有限，国家不能给每个设备分配一个公网 IP，所以只能多台计算机共用一个公网 IP 对外通讯，这样就需要进行网络转换，而 NAT 的目的正是如此。</p>\n</blockquote>\n<h2 id=\"基本实现原理\"><a href=\"#基本实现原理\" class=\"headerlink\" title=\"基本实现原理\"></a>基本实现原理</h2><p>frp 分为服务端与客户端，前者运行在有公网 IP 的服务器上，后者运行在局域网内的设备上，服务端默认会先开放 7000 端口，然后客户端与其相连。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1589543547681.png\" alt=\"\"></p>\n<p>同时客户端可以开启用于 ssh 的端口，与服务端的某个端口做映射，这样我们在终端访问服务端的端口时，会自动转发到客户端去。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1589544730493.png\" alt=\"\"></p>\n<p>除了 ssh 端口之外，frp 还支持 web 端口来接收 http 访问。</p>\n<h2 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h2><p>目前需要公网服务器、内网服务器各一台，我的内网服务器重装了 linux 系统，方便试验各类工具。</p>\n<h3 id=\"服务端安装配置\"><a href=\"#服务端安装配置\" class=\"headerlink\" title=\"服务端安装配置\"></a>服务端安装配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.33.0/frp_0.33.0_linux_amd64.tar.gz</span><br><span class=\"line\">tar zxvf frp_0.33.0_linux_amd64.tar.gz</span><br><span class=\"line\">cd frp_0.33.0_linux_amd64/</span><br></pre></td></tr></table></figure>\n\n<p>服务端的配置文件是 frps.ini，默认绑定 7000 端口，如果购置了云服务器，注意打开 7000 端口。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\">bind_port = 7000</span><br></pre></td></tr></table></figure>\n\n<p>通过 fprs 二进制文件启动 frp 服务。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure>\n\n<p>如下提示即是安装成功。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020/05/15 22:16:29 [I] [service.go:178] frps tcp listen on 0.0.0.0:7000</span><br><span class=\"line\">2020/05/15 22:16:29 [I] [root.go:209] start frps success</span><br><span class=\"line\">2020/05/15 22:16:38 [I] [service.go:432] [e3c5096bd4291972] client login info: ip [14.114.230.168:44422] version [0.24.1] hostname [] os [linux] arch [amd64]</span><br><span class=\"line\">2020/05/15 22:16:38 [I] [tcp.go:63] [e3c5096bd4291972] [ssh] tcp proxy listen port [7001]</span><br><span class=\"line\">2020/05/15 22:16:38 [I] [control.go:445] [e3c5096bd4291972] new proxy [ssh] success</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端安装配置\"><a href=\"#客户端安装配置\" class=\"headerlink\" title=\"客户端安装配置\"></a>客户端安装配置</h3><p>把自己的破电脑拿出来，以同样的方式下载 frp。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.33.0/frp_0.33.0_linux_amd64.tar.gz</span><br><span class=\"line\">tar zxvf frp_0.33.0_linux_amd64.tar.gz</span><br><span class=\"line\">cd frp_0.33.0_linux_amd64/</span><br></pre></td></tr></table></figure>\n\n<p>客户端的配置文件是 frpc.ini。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\">server_addr = 127.0.0.1</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\"></span><br><span class=\"line\">[ssh]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 127.0.0.1</span><br><span class=\"line\">local_port = 22</span><br><span class=\"line\">remote_port = 6000</span><br></pre></td></tr></table></figure>\n\n<p>common 为通用配置</p>\n<ul>\n<li>server_addr 为公网服务器 IP 地址</li>\n<li>server_port 为公网服务器配置的 7000 端口</li>\n</ul>\n<p>ssh 用于终端命令行访问</p>\n<ul>\n<li>type 连接类型，默认为 tcp</li>\n<li>local_ip 本地  IP</li>\n<li>local_port 用于 ssh 的端口号，默认 22</li>\n<li>remote_port 映射的服务端端口，访问该端口时默认转发到客户端的 22 端口</li>\n</ul>\n<p>启动客户端进程</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure>\n\n<p>如有以下提示则代表与服务端连接成功</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020/05/15 22:34:49 [I] [service.go:282] [9bc650122a538aab] login to server success, get run id [9bc650122a538aab], server udp port [0]</span><br><span class=\"line\">2020/05/15 22:34:49 [I] [proxy_manager.go:144] [9bc650122a538aab] proxy added: [ssh]</span><br><span class=\"line\">2020/05/15 22:34:49 [I] [control.go:179] [9bc650122a538aab] [ssh] start proxy success</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>启动完成后就可以通过 ssh 连接到内网服务器了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -p 6000 enoch@xxx.xx.xxx.xxx</span><br></pre></td></tr></table></figure>"},{"title":"进程管理工具 Supervisor","date":"2020-04-23T06:30:29.000Z","_content":"\n> 我是平也，这有一个专注Gopher技术成长的开源项目[「go home」](https://github.com/pingyeaa/go-home)\n\n要想在终端后台常驻进程，首先想到的是在命令后加 & 符号，来达到隐藏程序在后台的目的，尽管看起来进程已经在后台运行了，实际上终端会话关闭时进程还是会被 kill 掉，这种问题一般是采用搭配 nohup 命令来解决的，nohup 作用是忽略 SIGHUP 信号，而会话关闭时正好发送了该信号给会话内所有运行程序，简而言之，nohup 命令搭配 & 不仅可以在后台运行，还不受会话关闭的影响。\n\n```shell\n$ nohup /bin/cat &\n```\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587648951163.png)\n\n那么问题来了，虽然做到了后台运行，也避免了挂断操作带来的影响，但是它避免不了常驻进程自己出现问题，一旦它因自身异常终止了进程，这对黄金搭档就无力回天了。那怎么才能把挂了的常驻进程拉起来呢？这就是我们要讲的主题 Supervisor。\n\n### Supervisor 介绍\n\nSupervisor 是专门用来在[类 Unix](#unix) 系统上监控管理进程的工具，发布于 2004 年，虽然名字气势磅礴，但它的志向并不是统筹整个操作系统的进程，而是致力于做一个听话的贴身助理，你只需要告诉它要管理的程序，它就按你的要求监控进程，救死扶伤，保证进程的持续运行。\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587649424854.png)\n\n<span id=\"unix\"></span>\n\n> 类 Unix 系统就是由 Unix 设计风格演变出的操作系统，除了 Windows 市面上绝大多数系统都是类 Unix 系统。\n\n官方文档介绍 Supervisor 是 C/S 架构体系，它对应的角色分别为 Supervisorctl 和 Supervisord。后者的主要作用是启动配置好的程序、响应 Supervisorctl 发过来的指令以及重启退出的子进程，而前者是 Supervisor 的客户端，它以命令行的形式提供了一系列参数，来方便用户向 Supervisord 发送指令，常用的有启动、暂停、移除、更新等命令。\n\n### Supervisor 安装与配置\n\n安装 Supervisor 很简单，在各大操作系统的软件包管理器中都可以直接安装。\n\n```shell\n$ yum install -y supervisor\n```\n\n安装好的 Supervisor 配置文件默认为 /etc/supervisor.conf，如果找不到配置文件可以[通过官方命令生成](#gen_conf)，该配置文件包含了一个空的配置目录 /etc/supervisor.d（不同 OS 可能不一样），只需在该目录添加配置文件即可动态扩展，所以 supervisor.conf 一般不需要做改动。\n\n我们以最简单的 cat 命令为例，cat 命令不加参数会阻塞住等待标准输入，所以很适合做常驻进程的演示。现在创建一个配置文件 cat.ini 到 /etc/supervisor.d/，第一行定义程序的名称，该名称用来做操作的标识，第二行定义命令路径，它才是程序执行的根本命令。\n\n```shell /etc/supervisor.d/cat.ini\n[program:foo]\ncommand=/bin/cat\n```\n\n配置好后，启动 supervisord 服务，注意通过 -c 指定 supervisor 的配置文件。\n\n```shell\n$ supervisord -c /etc/supervisord.conf\n```\n\n当然也可以不指定配置路径，那么它会按以下顺序逐个搜索配置文件：\n\n- $CWD/supervisord.conf\n- $CWD/etc/supervisord.conf\n- /etc/supervisord.conf\n- /etc/supervisor/supervisord.conf\n- ../etc/supervisord.conf\n- ../supervisord.conf\n\n<span id=\"gen_conf\"></span>\n\n如果你是通过 Mac OS 安装的 Supervisor，可能从上述目录都找不到配置文件，可以利用官方提供的命令生成配置。\n\n```shell\n$ echo_supervisord_conf > supervisor.conf\n```\n\n这个时候 cat 进程应该已经跑起来了。\n\n```shell\n$ ps aux | grep /bin/cat\n```\n\n杀掉进程，进程 id 会发生变化，证明 supervisor 又把 cat 拉了起来。\n\n```shell\n$ sudo kill 9 <进程ID>\n```\n\n### 核心配置讲解\n\n配置文件中的选项并不止 command，官方提供了很多配置项。\n\n```ini\n[program:name]\ncommand=sh /tmp/echo_time.sh\npriority=999\nnumprocs=1\nautostart=true\nautorestart=true\nstartsecs=10\nstartretries=3 \nexitcodes=0,2\nstopsignal=QUIT\nstopwaitsecs=10\nuser=root\nlog_stdout=true\nlog_stderr=true\nlogfile=/tmp/echo_time.log\nlogfile_maxbytes=1MB\nlogfile_backups=10 \nstdout_logfile_maxbytes=20MB \nstdout_logfile_backups=20 \nstdout_logfile=/tmp/echo_time.stdout.log\n```\n\n下面挑选几个配置简要说明\n\n- command：要执行的命令\n- priority：执行优先级，值越高就越晚启动，越早关闭\n- numprocs：进程数量\n- autostart：是否与 supervisord 一起启动\n- autorestart：自动重启\n- startsecs：延时启动时间，默认为 10 秒\n- startretries：启动重试次数，默认为 3 次\n- exitcodes：当程序的退出码为 0 或 2 时，重启\n- stopsignal：停止信号\n- stopwaitsecs：延时停止时间，收到停止指令后多久停止\n- user：以哪个用户执行\n\n### 动态操作子程序\n\n添加新的程序，只需增加配置文件，然后执行 supervisorctl update 即可动态添加新的程序，并不需要重启 supervisord 服务。如果出现 refused connection 的提示，可能是没找到配置文件，需要加上配置选项。\n\n```shell\n$ supervisorctl update\nfoo1: added process group\n```\n\n删除同理，remove 时会先将进程关闭，再从列表中移除。\n\n```shell\nfoo1: stopped\nfoo1: removed process group\n```\n\n如果需要单独停止某个程序，可以使用 stop 命令，stop 后跟的是 program 名称。\n\n```shell\n$ supervisorctl stop foo\nfoo: stopped\n```\n\n当然还可以通过 stop all 命令更加暴力的停止所有进程。\n\n```shell\n$ supervisorctl stop all\nfoo: stopped\nfoo1: stopped\n```\n\n反之亦然，启动进程只需要将 stop 改为 start。\n\n```shell\n$ supervisorctl start all\n```\n\n#### 连接到某个进程\n\n```shell\n$ supervisorctl fg <program 名称>\n```\n\n#### 重启 supervisord\n\n```shell\n$ supervisorctl reload\n```\n\n#### 动态加载 supervisor.conf\n\n```shell\n$ supervisorctl reread\n```\n\n#### 查看所有进程运行状况\n\n```shell\n$ supervisorctl status\n```\n\n### Web 界面操作\n\n官方提供了界面操作方式，需要在 supervisor.conf 中去掉 inet_http_server 的注释。\n\n```ini supervisor.conf\n[inet_http_server]         ; inet (TCP) server disabled by default\nport=127.0.0.1:9001        ; ip_address:port specifier, *:port for all iface\nusername=user              ; default is no username (open server)\npassword=123               ; default is no password (open server)\n```\n\n重启 supervisord。\n\n```shell\n$ supervisorctl reload\n```\n\n访问 http://localhost:9001 可以看到 supervisor 的操作界面。\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587696070630.png)\n\n今天文章就到这里，想要了解更多，欢迎查看[官方文档](http://supervisord.org/)。","source":"_posts/os/supervisor.md","raw":"---\ntitle: 进程管理工具 Supervisor\ndate: 2020-04-23 14:30:29\ncategories:\n- 操作系统\ntags:\n- supervisor\n- 进程\n- 监控\n---\n\n> 我是平也，这有一个专注Gopher技术成长的开源项目[「go home」](https://github.com/pingyeaa/go-home)\n\n要想在终端后台常驻进程，首先想到的是在命令后加 & 符号，来达到隐藏程序在后台的目的，尽管看起来进程已经在后台运行了，实际上终端会话关闭时进程还是会被 kill 掉，这种问题一般是采用搭配 nohup 命令来解决的，nohup 作用是忽略 SIGHUP 信号，而会话关闭时正好发送了该信号给会话内所有运行程序，简而言之，nohup 命令搭配 & 不仅可以在后台运行，还不受会话关闭的影响。\n\n```shell\n$ nohup /bin/cat &\n```\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587648951163.png)\n\n那么问题来了，虽然做到了后台运行，也避免了挂断操作带来的影响，但是它避免不了常驻进程自己出现问题，一旦它因自身异常终止了进程，这对黄金搭档就无力回天了。那怎么才能把挂了的常驻进程拉起来呢？这就是我们要讲的主题 Supervisor。\n\n### Supervisor 介绍\n\nSupervisor 是专门用来在[类 Unix](#unix) 系统上监控管理进程的工具，发布于 2004 年，虽然名字气势磅礴，但它的志向并不是统筹整个操作系统的进程，而是致力于做一个听话的贴身助理，你只需要告诉它要管理的程序，它就按你的要求监控进程，救死扶伤，保证进程的持续运行。\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587649424854.png)\n\n<span id=\"unix\"></span>\n\n> 类 Unix 系统就是由 Unix 设计风格演变出的操作系统，除了 Windows 市面上绝大多数系统都是类 Unix 系统。\n\n官方文档介绍 Supervisor 是 C/S 架构体系，它对应的角色分别为 Supervisorctl 和 Supervisord。后者的主要作用是启动配置好的程序、响应 Supervisorctl 发过来的指令以及重启退出的子进程，而前者是 Supervisor 的客户端，它以命令行的形式提供了一系列参数，来方便用户向 Supervisord 发送指令，常用的有启动、暂停、移除、更新等命令。\n\n### Supervisor 安装与配置\n\n安装 Supervisor 很简单，在各大操作系统的软件包管理器中都可以直接安装。\n\n```shell\n$ yum install -y supervisor\n```\n\n安装好的 Supervisor 配置文件默认为 /etc/supervisor.conf，如果找不到配置文件可以[通过官方命令生成](#gen_conf)，该配置文件包含了一个空的配置目录 /etc/supervisor.d（不同 OS 可能不一样），只需在该目录添加配置文件即可动态扩展，所以 supervisor.conf 一般不需要做改动。\n\n我们以最简单的 cat 命令为例，cat 命令不加参数会阻塞住等待标准输入，所以很适合做常驻进程的演示。现在创建一个配置文件 cat.ini 到 /etc/supervisor.d/，第一行定义程序的名称，该名称用来做操作的标识，第二行定义命令路径，它才是程序执行的根本命令。\n\n```shell /etc/supervisor.d/cat.ini\n[program:foo]\ncommand=/bin/cat\n```\n\n配置好后，启动 supervisord 服务，注意通过 -c 指定 supervisor 的配置文件。\n\n```shell\n$ supervisord -c /etc/supervisord.conf\n```\n\n当然也可以不指定配置路径，那么它会按以下顺序逐个搜索配置文件：\n\n- $CWD/supervisord.conf\n- $CWD/etc/supervisord.conf\n- /etc/supervisord.conf\n- /etc/supervisor/supervisord.conf\n- ../etc/supervisord.conf\n- ../supervisord.conf\n\n<span id=\"gen_conf\"></span>\n\n如果你是通过 Mac OS 安装的 Supervisor，可能从上述目录都找不到配置文件，可以利用官方提供的命令生成配置。\n\n```shell\n$ echo_supervisord_conf > supervisor.conf\n```\n\n这个时候 cat 进程应该已经跑起来了。\n\n```shell\n$ ps aux | grep /bin/cat\n```\n\n杀掉进程，进程 id 会发生变化，证明 supervisor 又把 cat 拉了起来。\n\n```shell\n$ sudo kill 9 <进程ID>\n```\n\n### 核心配置讲解\n\n配置文件中的选项并不止 command，官方提供了很多配置项。\n\n```ini\n[program:name]\ncommand=sh /tmp/echo_time.sh\npriority=999\nnumprocs=1\nautostart=true\nautorestart=true\nstartsecs=10\nstartretries=3 \nexitcodes=0,2\nstopsignal=QUIT\nstopwaitsecs=10\nuser=root\nlog_stdout=true\nlog_stderr=true\nlogfile=/tmp/echo_time.log\nlogfile_maxbytes=1MB\nlogfile_backups=10 \nstdout_logfile_maxbytes=20MB \nstdout_logfile_backups=20 \nstdout_logfile=/tmp/echo_time.stdout.log\n```\n\n下面挑选几个配置简要说明\n\n- command：要执行的命令\n- priority：执行优先级，值越高就越晚启动，越早关闭\n- numprocs：进程数量\n- autostart：是否与 supervisord 一起启动\n- autorestart：自动重启\n- startsecs：延时启动时间，默认为 10 秒\n- startretries：启动重试次数，默认为 3 次\n- exitcodes：当程序的退出码为 0 或 2 时，重启\n- stopsignal：停止信号\n- stopwaitsecs：延时停止时间，收到停止指令后多久停止\n- user：以哪个用户执行\n\n### 动态操作子程序\n\n添加新的程序，只需增加配置文件，然后执行 supervisorctl update 即可动态添加新的程序，并不需要重启 supervisord 服务。如果出现 refused connection 的提示，可能是没找到配置文件，需要加上配置选项。\n\n```shell\n$ supervisorctl update\nfoo1: added process group\n```\n\n删除同理，remove 时会先将进程关闭，再从列表中移除。\n\n```shell\nfoo1: stopped\nfoo1: removed process group\n```\n\n如果需要单独停止某个程序，可以使用 stop 命令，stop 后跟的是 program 名称。\n\n```shell\n$ supervisorctl stop foo\nfoo: stopped\n```\n\n当然还可以通过 stop all 命令更加暴力的停止所有进程。\n\n```shell\n$ supervisorctl stop all\nfoo: stopped\nfoo1: stopped\n```\n\n反之亦然，启动进程只需要将 stop 改为 start。\n\n```shell\n$ supervisorctl start all\n```\n\n#### 连接到某个进程\n\n```shell\n$ supervisorctl fg <program 名称>\n```\n\n#### 重启 supervisord\n\n```shell\n$ supervisorctl reload\n```\n\n#### 动态加载 supervisor.conf\n\n```shell\n$ supervisorctl reread\n```\n\n#### 查看所有进程运行状况\n\n```shell\n$ supervisorctl status\n```\n\n### Web 界面操作\n\n官方提供了界面操作方式，需要在 supervisor.conf 中去掉 inet_http_server 的注释。\n\n```ini supervisor.conf\n[inet_http_server]         ; inet (TCP) server disabled by default\nport=127.0.0.1:9001        ; ip_address:port specifier, *:port for all iface\nusername=user              ; default is no username (open server)\npassword=123               ; default is no password (open server)\n```\n\n重启 supervisord。\n\n```shell\n$ supervisorctl reload\n```\n\n访问 http://localhost:9001 可以看到 supervisor 的操作界面。\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587696070630.png)\n\n今天文章就到这里，想要了解更多，欢迎查看[官方文档](http://supervisord.org/)。","slug":"os/supervisor","published":1,"updated":"2020-05-07T16:19:16.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka9p6osb0006xbp49hg9cea5","content":"<blockquote>\n<p>我是平也，这有一个专注Gopher技术成长的开源项目<a href=\"https://github.com/pingyeaa/go-home\" target=\"_blank\" rel=\"noopener\">「go home」</a></p>\n</blockquote>\n<p>要想在终端后台常驻进程，首先想到的是在命令后加 &amp; 符号，来达到隐藏程序在后台的目的，尽管看起来进程已经在后台运行了，实际上终端会话关闭时进程还是会被 kill 掉，这种问题一般是采用搭配 nohup 命令来解决的，nohup 作用是忽略 SIGHUP 信号，而会话关闭时正好发送了该信号给会话内所有运行程序，简而言之，nohup 命令搭配 &amp; 不仅可以在后台运行，还不受会话关闭的影响。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> nohup /bin/cat &amp;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587648951163.png\" alt=\"file\"></p>\n<p>那么问题来了，虽然做到了后台运行，也避免了挂断操作带来的影响，但是它避免不了常驻进程自己出现问题，一旦它因自身异常终止了进程，这对黄金搭档就无力回天了。那怎么才能把挂了的常驻进程拉起来呢？这就是我们要讲的主题 Supervisor。</p>\n<h3 id=\"Supervisor-介绍\"><a href=\"#Supervisor-介绍\" class=\"headerlink\" title=\"Supervisor 介绍\"></a>Supervisor 介绍</h3><p>Supervisor 是专门用来在<a href=\"#unix\">类 Unix</a> 系统上监控管理进程的工具，发布于 2004 年，虽然名字气势磅礴，但它的志向并不是统筹整个操作系统的进程，而是致力于做一个听话的贴身助理，你只需要告诉它要管理的程序，它就按你的要求监控进程，救死扶伤，保证进程的持续运行。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587649424854.png\" alt=\"file\"></p>\n<p><span id=\"unix\"></span></p>\n<blockquote>\n<p>类 Unix 系统就是由 Unix 设计风格演变出的操作系统，除了 Windows 市面上绝大多数系统都是类 Unix 系统。</p>\n</blockquote>\n<p>官方文档介绍 Supervisor 是 C/S 架构体系，它对应的角色分别为 Supervisorctl 和 Supervisord。后者的主要作用是启动配置好的程序、响应 Supervisorctl 发过来的指令以及重启退出的子进程，而前者是 Supervisor 的客户端，它以命令行的形式提供了一系列参数，来方便用户向 Supervisord 发送指令，常用的有启动、暂停、移除、更新等命令。</p>\n<h3 id=\"Supervisor-安装与配置\"><a href=\"#Supervisor-安装与配置\" class=\"headerlink\" title=\"Supervisor 安装与配置\"></a>Supervisor 安装与配置</h3><p>安装 Supervisor 很简单，在各大操作系统的软件包管理器中都可以直接安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yum install -y supervisor</span></span><br></pre></td></tr></table></figure>\n\n<p>安装好的 Supervisor 配置文件默认为 /etc/supervisor.conf，如果找不到配置文件可以<a href=\"#gen_conf\">通过官方命令生成</a>，该配置文件包含了一个空的配置目录 /etc/supervisor.d（不同 OS 可能不一样），只需在该目录添加配置文件即可动态扩展，所以 supervisor.conf 一般不需要做改动。</p>\n<p>我们以最简单的 cat 命令为例，cat 命令不加参数会阻塞住等待标准输入，所以很适合做常驻进程的演示。现在创建一个配置文件 cat.ini 到 /etc/supervisor.d/，第一行定义程序的名称，该名称用来做操作的标识，第二行定义命令路径，它才是程序执行的根本命令。</p>\n<figure class=\"highlight shell\"><figcaption><span>/etc/supervisor.d/cat.ini</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:foo]</span><br><span class=\"line\">command=/bin/cat</span><br></pre></td></tr></table></figure>\n\n<p>配置好后，启动 supervisord 服务，注意通过 -c 指定 supervisor 的配置文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisord -c /etc/supervisord.conf</span></span><br></pre></td></tr></table></figure>\n\n<p>当然也可以不指定配置路径，那么它会按以下顺序逐个搜索配置文件：</p>\n<ul>\n<li>$CWD/supervisord.conf</li>\n<li>$CWD/etc/supervisord.conf</li>\n<li>/etc/supervisord.conf</li>\n<li>/etc/supervisor/supervisord.conf</li>\n<li>../etc/supervisord.conf</li>\n<li>../supervisord.conf</li>\n</ul>\n<p><span id=\"gen_conf\"></span></p>\n<p>如果你是通过 Mac OS 安装的 Supervisor，可能从上述目录都找不到配置文件，可以利用官方提供的命令生成配置。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> echo_supervisord_conf &gt; supervisor.conf</span></span><br></pre></td></tr></table></figure>\n\n<p>这个时候 cat 进程应该已经跑起来了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ps aux | grep /bin/cat</span></span><br></pre></td></tr></table></figure>\n\n<p>杀掉进程，进程 id 会发生变化，证明 supervisor 又把 cat 拉了起来。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo <span class=\"built_in\">kill</span> 9 &lt;进程ID&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"核心配置讲解\"><a href=\"#核心配置讲解\" class=\"headerlink\" title=\"核心配置讲解\"></a>核心配置讲解</h3><p>配置文件中的选项并不止 command，官方提供了很多配置项。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[program:name]</span></span><br><span class=\"line\"><span class=\"attr\">command</span>=sh /tmp/echo_time.sh</span><br><span class=\"line\"><span class=\"attr\">priority</span>=<span class=\"number\">999</span></span><br><span class=\"line\"><span class=\"attr\">numprocs</span>=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">autostart</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">autorestart</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">startsecs</span>=<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"attr\">startretries</span>=<span class=\"number\">3</span> </span><br><span class=\"line\"><span class=\"attr\">exitcodes</span>=<span class=\"number\">0</span>,<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">stopsignal</span>=QUIT</span><br><span class=\"line\"><span class=\"attr\">stopwaitsecs</span>=<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"attr\">user</span>=root</span><br><span class=\"line\"><span class=\"attr\">log_stdout</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">log_stderr</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">logfile</span>=/tmp/echo_time.log</span><br><span class=\"line\"><span class=\"attr\">logfile_maxbytes</span>=<span class=\"number\">1</span>MB</span><br><span class=\"line\"><span class=\"attr\">logfile_backups</span>=<span class=\"number\">10</span> </span><br><span class=\"line\"><span class=\"attr\">stdout_logfile_maxbytes</span>=<span class=\"number\">20</span>MB </span><br><span class=\"line\"><span class=\"attr\">stdout_logfile_backups</span>=<span class=\"number\">20</span> </span><br><span class=\"line\"><span class=\"attr\">stdout_logfile</span>=/tmp/echo_time.stdout.log</span><br></pre></td></tr></table></figure>\n\n<p>下面挑选几个配置简要说明</p>\n<ul>\n<li>command：要执行的命令</li>\n<li>priority：执行优先级，值越高就越晚启动，越早关闭</li>\n<li>numprocs：进程数量</li>\n<li>autostart：是否与 supervisord 一起启动</li>\n<li>autorestart：自动重启</li>\n<li>startsecs：延时启动时间，默认为 10 秒</li>\n<li>startretries：启动重试次数，默认为 3 次</li>\n<li>exitcodes：当程序的退出码为 0 或 2 时，重启</li>\n<li>stopsignal：停止信号</li>\n<li>stopwaitsecs：延时停止时间，收到停止指令后多久停止</li>\n<li>user：以哪个用户执行</li>\n</ul>\n<h3 id=\"动态操作子程序\"><a href=\"#动态操作子程序\" class=\"headerlink\" title=\"动态操作子程序\"></a>动态操作子程序</h3><p>添加新的程序，只需增加配置文件，然后执行 supervisorctl update 即可动态添加新的程序，并不需要重启 supervisord 服务。如果出现 refused connection 的提示，可能是没找到配置文件，需要加上配置选项。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl update</span></span><br><span class=\"line\">foo1: added process group</span><br></pre></td></tr></table></figure>\n\n<p>删除同理，remove 时会先将进程关闭，再从列表中移除。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo1: stopped</span><br><span class=\"line\">foo1: removed process group</span><br></pre></td></tr></table></figure>\n\n<p>如果需要单独停止某个程序，可以使用 stop 命令，stop 后跟的是 program 名称。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl stop foo</span></span><br><span class=\"line\">foo: stopped</span><br></pre></td></tr></table></figure>\n\n<p>当然还可以通过 stop all 命令更加暴力的停止所有进程。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl stop all</span></span><br><span class=\"line\">foo: stopped</span><br><span class=\"line\">foo1: stopped</span><br></pre></td></tr></table></figure>\n\n<p>反之亦然，启动进程只需要将 stop 改为 start。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl start all</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"连接到某个进程\"><a href=\"#连接到某个进程\" class=\"headerlink\" title=\"连接到某个进程\"></a>连接到某个进程</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl <span class=\"built_in\">fg</span> &lt;program 名称&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重启-supervisord\"><a href=\"#重启-supervisord\" class=\"headerlink\" title=\"重启 supervisord\"></a>重启 supervisord</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl reload</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"动态加载-supervisor-conf\"><a href=\"#动态加载-supervisor-conf\" class=\"headerlink\" title=\"动态加载 supervisor.conf\"></a>动态加载 supervisor.conf</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl reread</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看所有进程运行状况\"><a href=\"#查看所有进程运行状况\" class=\"headerlink\" title=\"查看所有进程运行状况\"></a>查看所有进程运行状况</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl status</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Web-界面操作\"><a href=\"#Web-界面操作\" class=\"headerlink\" title=\"Web 界面操作\"></a>Web 界面操作</h3><p>官方提供了界面操作方式，需要在 supervisor.conf 中去掉 inet_http_server 的注释。</p>\n<figure class=\"highlight ini\"><figcaption><span>supervisor.conf</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[inet_http_server]</span>         <span class=\"comment\">; inet (TCP) server disabled by default</span></span><br><span class=\"line\"><span class=\"attr\">port</span>=<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">9001</span>        <span class=\"comment\">; ip_address:port specifier, *:port for all iface</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=user              <span class=\"comment\">; default is no username (open server)</span></span><br><span class=\"line\"><span class=\"attr\">password</span>=<span class=\"number\">123</span>               <span class=\"comment\">; default is no password (open server)</span></span><br></pre></td></tr></table></figure>\n\n<p>重启 supervisord。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl reload</span></span><br></pre></td></tr></table></figure>\n\n<p>访问 <a href=\"http://localhost:9001\" target=\"_blank\" rel=\"noopener\">http://localhost:9001</a> 可以看到 supervisor 的操作界面。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587696070630.png\" alt=\"file\"></p>\n<p>今天文章就到这里，想要了解更多，欢迎查看<a href=\"http://supervisord.org/\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>我是平也，这有一个专注Gopher技术成长的开源项目<a href=\"https://github.com/pingyeaa/go-home\" target=\"_blank\" rel=\"noopener\">「go home」</a></p>\n</blockquote>\n<p>要想在终端后台常驻进程，首先想到的是在命令后加 &amp; 符号，来达到隐藏程序在后台的目的，尽管看起来进程已经在后台运行了，实际上终端会话关闭时进程还是会被 kill 掉，这种问题一般是采用搭配 nohup 命令来解决的，nohup 作用是忽略 SIGHUP 信号，而会话关闭时正好发送了该信号给会话内所有运行程序，简而言之，nohup 命令搭配 &amp; 不仅可以在后台运行，还不受会话关闭的影响。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> nohup /bin/cat &amp;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587648951163.png\" alt=\"file\"></p>\n<p>那么问题来了，虽然做到了后台运行，也避免了挂断操作带来的影响，但是它避免不了常驻进程自己出现问题，一旦它因自身异常终止了进程，这对黄金搭档就无力回天了。那怎么才能把挂了的常驻进程拉起来呢？这就是我们要讲的主题 Supervisor。</p>\n<h3 id=\"Supervisor-介绍\"><a href=\"#Supervisor-介绍\" class=\"headerlink\" title=\"Supervisor 介绍\"></a>Supervisor 介绍</h3><p>Supervisor 是专门用来在<a href=\"#unix\">类 Unix</a> 系统上监控管理进程的工具，发布于 2004 年，虽然名字气势磅礴，但它的志向并不是统筹整个操作系统的进程，而是致力于做一个听话的贴身助理，你只需要告诉它要管理的程序，它就按你的要求监控进程，救死扶伤，保证进程的持续运行。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587649424854.png\" alt=\"file\"></p>\n<p><span id=\"unix\"></span></p>\n<blockquote>\n<p>类 Unix 系统就是由 Unix 设计风格演变出的操作系统，除了 Windows 市面上绝大多数系统都是类 Unix 系统。</p>\n</blockquote>\n<p>官方文档介绍 Supervisor 是 C/S 架构体系，它对应的角色分别为 Supervisorctl 和 Supervisord。后者的主要作用是启动配置好的程序、响应 Supervisorctl 发过来的指令以及重启退出的子进程，而前者是 Supervisor 的客户端，它以命令行的形式提供了一系列参数，来方便用户向 Supervisord 发送指令，常用的有启动、暂停、移除、更新等命令。</p>\n<h3 id=\"Supervisor-安装与配置\"><a href=\"#Supervisor-安装与配置\" class=\"headerlink\" title=\"Supervisor 安装与配置\"></a>Supervisor 安装与配置</h3><p>安装 Supervisor 很简单，在各大操作系统的软件包管理器中都可以直接安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yum install -y supervisor</span></span><br></pre></td></tr></table></figure>\n\n<p>安装好的 Supervisor 配置文件默认为 /etc/supervisor.conf，如果找不到配置文件可以<a href=\"#gen_conf\">通过官方命令生成</a>，该配置文件包含了一个空的配置目录 /etc/supervisor.d（不同 OS 可能不一样），只需在该目录添加配置文件即可动态扩展，所以 supervisor.conf 一般不需要做改动。</p>\n<p>我们以最简单的 cat 命令为例，cat 命令不加参数会阻塞住等待标准输入，所以很适合做常驻进程的演示。现在创建一个配置文件 cat.ini 到 /etc/supervisor.d/，第一行定义程序的名称，该名称用来做操作的标识，第二行定义命令路径，它才是程序执行的根本命令。</p>\n<figure class=\"highlight shell\"><figcaption><span>/etc/supervisor.d/cat.ini</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:foo]</span><br><span class=\"line\">command=/bin/cat</span><br></pre></td></tr></table></figure>\n\n<p>配置好后，启动 supervisord 服务，注意通过 -c 指定 supervisor 的配置文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisord -c /etc/supervisord.conf</span></span><br></pre></td></tr></table></figure>\n\n<p>当然也可以不指定配置路径，那么它会按以下顺序逐个搜索配置文件：</p>\n<ul>\n<li>$CWD/supervisord.conf</li>\n<li>$CWD/etc/supervisord.conf</li>\n<li>/etc/supervisord.conf</li>\n<li>/etc/supervisor/supervisord.conf</li>\n<li>../etc/supervisord.conf</li>\n<li>../supervisord.conf</li>\n</ul>\n<p><span id=\"gen_conf\"></span></p>\n<p>如果你是通过 Mac OS 安装的 Supervisor，可能从上述目录都找不到配置文件，可以利用官方提供的命令生成配置。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> echo_supervisord_conf &gt; supervisor.conf</span></span><br></pre></td></tr></table></figure>\n\n<p>这个时候 cat 进程应该已经跑起来了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ps aux | grep /bin/cat</span></span><br></pre></td></tr></table></figure>\n\n<p>杀掉进程，进程 id 会发生变化，证明 supervisor 又把 cat 拉了起来。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo <span class=\"built_in\">kill</span> 9 &lt;进程ID&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"核心配置讲解\"><a href=\"#核心配置讲解\" class=\"headerlink\" title=\"核心配置讲解\"></a>核心配置讲解</h3><p>配置文件中的选项并不止 command，官方提供了很多配置项。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[program:name]</span></span><br><span class=\"line\"><span class=\"attr\">command</span>=sh /tmp/echo_time.sh</span><br><span class=\"line\"><span class=\"attr\">priority</span>=<span class=\"number\">999</span></span><br><span class=\"line\"><span class=\"attr\">numprocs</span>=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">autostart</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">autorestart</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">startsecs</span>=<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"attr\">startretries</span>=<span class=\"number\">3</span> </span><br><span class=\"line\"><span class=\"attr\">exitcodes</span>=<span class=\"number\">0</span>,<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">stopsignal</span>=QUIT</span><br><span class=\"line\"><span class=\"attr\">stopwaitsecs</span>=<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"attr\">user</span>=root</span><br><span class=\"line\"><span class=\"attr\">log_stdout</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">log_stderr</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">logfile</span>=/tmp/echo_time.log</span><br><span class=\"line\"><span class=\"attr\">logfile_maxbytes</span>=<span class=\"number\">1</span>MB</span><br><span class=\"line\"><span class=\"attr\">logfile_backups</span>=<span class=\"number\">10</span> </span><br><span class=\"line\"><span class=\"attr\">stdout_logfile_maxbytes</span>=<span class=\"number\">20</span>MB </span><br><span class=\"line\"><span class=\"attr\">stdout_logfile_backups</span>=<span class=\"number\">20</span> </span><br><span class=\"line\"><span class=\"attr\">stdout_logfile</span>=/tmp/echo_time.stdout.log</span><br></pre></td></tr></table></figure>\n\n<p>下面挑选几个配置简要说明</p>\n<ul>\n<li>command：要执行的命令</li>\n<li>priority：执行优先级，值越高就越晚启动，越早关闭</li>\n<li>numprocs：进程数量</li>\n<li>autostart：是否与 supervisord 一起启动</li>\n<li>autorestart：自动重启</li>\n<li>startsecs：延时启动时间，默认为 10 秒</li>\n<li>startretries：启动重试次数，默认为 3 次</li>\n<li>exitcodes：当程序的退出码为 0 或 2 时，重启</li>\n<li>stopsignal：停止信号</li>\n<li>stopwaitsecs：延时停止时间，收到停止指令后多久停止</li>\n<li>user：以哪个用户执行</li>\n</ul>\n<h3 id=\"动态操作子程序\"><a href=\"#动态操作子程序\" class=\"headerlink\" title=\"动态操作子程序\"></a>动态操作子程序</h3><p>添加新的程序，只需增加配置文件，然后执行 supervisorctl update 即可动态添加新的程序，并不需要重启 supervisord 服务。如果出现 refused connection 的提示，可能是没找到配置文件，需要加上配置选项。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl update</span></span><br><span class=\"line\">foo1: added process group</span><br></pre></td></tr></table></figure>\n\n<p>删除同理，remove 时会先将进程关闭，再从列表中移除。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo1: stopped</span><br><span class=\"line\">foo1: removed process group</span><br></pre></td></tr></table></figure>\n\n<p>如果需要单独停止某个程序，可以使用 stop 命令，stop 后跟的是 program 名称。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl stop foo</span></span><br><span class=\"line\">foo: stopped</span><br></pre></td></tr></table></figure>\n\n<p>当然还可以通过 stop all 命令更加暴力的停止所有进程。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl stop all</span></span><br><span class=\"line\">foo: stopped</span><br><span class=\"line\">foo1: stopped</span><br></pre></td></tr></table></figure>\n\n<p>反之亦然，启动进程只需要将 stop 改为 start。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl start all</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"连接到某个进程\"><a href=\"#连接到某个进程\" class=\"headerlink\" title=\"连接到某个进程\"></a>连接到某个进程</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl <span class=\"built_in\">fg</span> &lt;program 名称&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重启-supervisord\"><a href=\"#重启-supervisord\" class=\"headerlink\" title=\"重启 supervisord\"></a>重启 supervisord</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl reload</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"动态加载-supervisor-conf\"><a href=\"#动态加载-supervisor-conf\" class=\"headerlink\" title=\"动态加载 supervisor.conf\"></a>动态加载 supervisor.conf</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl reread</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看所有进程运行状况\"><a href=\"#查看所有进程运行状况\" class=\"headerlink\" title=\"查看所有进程运行状况\"></a>查看所有进程运行状况</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl status</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Web-界面操作\"><a href=\"#Web-界面操作\" class=\"headerlink\" title=\"Web 界面操作\"></a>Web 界面操作</h3><p>官方提供了界面操作方式，需要在 supervisor.conf 中去掉 inet_http_server 的注释。</p>\n<figure class=\"highlight ini\"><figcaption><span>supervisor.conf</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[inet_http_server]</span>         <span class=\"comment\">; inet (TCP) server disabled by default</span></span><br><span class=\"line\"><span class=\"attr\">port</span>=<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">9001</span>        <span class=\"comment\">; ip_address:port specifier, *:port for all iface</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=user              <span class=\"comment\">; default is no username (open server)</span></span><br><span class=\"line\"><span class=\"attr\">password</span>=<span class=\"number\">123</span>               <span class=\"comment\">; default is no password (open server)</span></span><br></pre></td></tr></table></figure>\n\n<p>重启 supervisord。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl reload</span></span><br></pre></td></tr></table></figure>\n\n<p>访问 <a href=\"http://localhost:9001\" target=\"_blank\" rel=\"noopener\">http://localhost:9001</a> 可以看到 supervisor 的操作界面。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587696070630.png\" alt=\"file\"></p>\n<p>今天文章就到这里，想要了解更多，欢迎查看<a href=\"http://supervisord.org/\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n"},{"title":"如何用Github钩子做自动部署","date":"2020-04-22T02:27:34.000Z","_content":"\n最近机缘巧合的购置了域名和服务器，不用实在是浪费，再加上一直没有属于自己的个人网站，所以打算用hexo在服务器上玩一下，这样也就不用再纠结用Github pages还是Gitee pages了。当然，今天的主题并不是博客搭建，而是如何利用Github的钩子，将博客代码部署到服务器上。\n\n毕竟Github的钩子已经历史悠久了，网上有很多开源项目可以拿来用，所以我并没有造轮子，而是去找了5K star的开源Go项目`webhook`，这个工具的作用是接收Github仓库的变动通知，然后调用你配置好的shell脚本，脚本可以写上代码拉取的命令或是编译的操作等，具体根据个人需求而定。简而言之，它只起着拉通Github与你服务器的作用。\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587526481705.png)\n\n### webhook工具安装\n\n因为webhook是Go语言开发的，所以要先安装Go语言。\n\n```shell\nyum install -y golang\n```\n\n然后就可以用go命令安装webhook了。\n\n```shell\ngo get github.com/adnanh/webhook\n```\n\n命令安装位置可以通过`go env`查看，GOPATH就是命令安装路径，比如我的命令就安装在/root/go/bin/webhook。\n\n```shell\ngo env\n...\nGOOS=\"linux\"\nGOPATH=\"/root/go\"\n...\n```\n\n### 生成ssh key\n\n在编写脚本之前确保服务器有权限拉取github代码，如果已经做了配置可跳过本节去看[部署脚本编写](#部署脚本编写)。ssh key是代码托管平台（github、gitee、coding、gitlab等）鉴别你是否有权拉取代码的身份标识，生成只需一行命令和一路回车就行了。\n\n```shell\nssh-keygen\n\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_rsa.\nYour public key has been saved in /root/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:M6sCf/J/hOu3zLxMkFUVmv3iWIa30CfbxiWqmWCt1YE root@iZwz96y36tk2ecnykzituxZ\nThe key's randomart image is:\n+---[RSA 2048]----+\n|            ..o. |\n|           . o   |\n|          . o    |\n|       . o .     |\n|      E S.  .    |\n|  .  . ..Oo ..   |\n|   oo o ==Boo .  |\n|   .++.+o#== .   |\n|    .=*+=+@o     |\n+----[SHA256]-----+\n```\n\n生成后可通过`cat ~/.ssh/id_rsa.pub`命令查看，最后将key加入github即可，加法不再赘述，请自行谷歌。\n\n```shell\ncat ~/.ssh/id_rsa.pub\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQHBAAABAQCv7LGVJUFdcLL+HZyRFTQIQCdre61Gch76lDVpmWSX9BGGRU3iQS7EU5qApFn1VSvt+yf4rMt2LEkuxGCm1wIyBKZ6LYDViZBeTAfx4BcM1mcpxOX6I/+r07mQ4llTz+poQB1Zp9Y60uk0tbGOVWlCoDBEvf9qeEnQ0qEczEkv7wcawV6pVhlXjFKZgq0EOQbCYoWMvPUl+dwDbTcl/h+7At1nlgfF7IuRHlKf18qvgnTRT2wpiuz4pWdoAi8LcY1JiR1z5OB0oCJ2euhyDND39G2NxZRS1FIVdgCEvioHtdoHOSoWBlcSj0fLFSnscBfRBrCd7yhOP7fFKfrowHMj root@iZwz96y36tk2ecnykzituxZ\n```\n\n### 部署脚本编写\n\n该shell脚本的主要目的是从github拉取代码，脚本内容很简单，只做了目录的简要判断，代码目录存在则更新，不存在则克隆仓库，工作目录和仓库名称、地址请换成自己的。\n\n```shell\n#!/bin/bash\n\ncd /home/www/website\n\nif [ ! -d \"go-home\" ]; then\n  git clone https://github.com/pingyeaa/go-home.git\nfi\n\ncd go-home\ngit pull\n```\n\n### webhook配置与启动\n\n编写配置文件hooks.json，格式如下。\n\n```json\n[\n  {\n    \"id\": \"deploy-webhook\",\n    \"execute-command\": \"deploy.sh\",\n    \"command-working-directory\": \"/home\"\n  }\n]\n```\n\n- id：钩子的id，可自定义\n- execute-command：要执行的脚本名，就是刚才编写的部署脚本\n- command-working-directory：脚本所在目录\n\n完成后通过webhook命令启动，可以看到id为deploy-webhook的配置已经加载了，我们需要注意的是监听的端口和路径，等下要用到。\n\n```shell\n/root/go/bin/webhook -hooks hooks.json -verbose\n\n[webhook] 2020/04/22 15:18:22 version 2.6.11 starting\n[webhook] 2020/04/22 15:18:22 setting up os signal watcher\n[webhook] 2020/04/22 15:18:22 attempting to load hooks from hooks.json\n[webhook] 2020/04/22 15:18:22 found 1 hook(s) in file\n[webhook] 2020/04/22 15:18:22   loaded: deploy-webhook\n[webhook] 2020/04/22 15:18:22 serving hooks on http://0.0.0.0:9000/hooks/{id}\n[webhook] 2020/04/22 15:18:22 os signal watcher ready\n```\n\n```shell\nhttp://0.0.0.0:9000/hooks/{id}\n```\n\n### Github Webhooks配置\n\n现在服务器已经启动了webhook程序监听9000端口，接下来仅需要告诉Github这个地址和端口就好了。\n\n打开仓库设置页，添加webhook。\n\n![](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587523289550.png)\n\n配置webhooks，Payload URL就是要通知的地址，把刚才打印出的端口和路径填上即可，其他默认。\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541102651.png)\n\n现在可以提交代码测试了，如果推送失败Github中会有错误提示，同样的，成功不仅在Github中能看到，服务器的打印日志也有记录。\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541394355.png)\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541482026.png)","source":"_posts/other/github-webhooks.md","raw":"---\ntitle: 如何用Github钩子做自动部署\ndate: 2020-04-22 10:27:34\ntags: \n- github\n- webhooks\n- 钩子\ncategories: \n- 杂谈\n---\n\n最近机缘巧合的购置了域名和服务器，不用实在是浪费，再加上一直没有属于自己的个人网站，所以打算用hexo在服务器上玩一下，这样也就不用再纠结用Github pages还是Gitee pages了。当然，今天的主题并不是博客搭建，而是如何利用Github的钩子，将博客代码部署到服务器上。\n\n毕竟Github的钩子已经历史悠久了，网上有很多开源项目可以拿来用，所以我并没有造轮子，而是去找了5K star的开源Go项目`webhook`，这个工具的作用是接收Github仓库的变动通知，然后调用你配置好的shell脚本，脚本可以写上代码拉取的命令或是编译的操作等，具体根据个人需求而定。简而言之，它只起着拉通Github与你服务器的作用。\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587526481705.png)\n\n### webhook工具安装\n\n因为webhook是Go语言开发的，所以要先安装Go语言。\n\n```shell\nyum install -y golang\n```\n\n然后就可以用go命令安装webhook了。\n\n```shell\ngo get github.com/adnanh/webhook\n```\n\n命令安装位置可以通过`go env`查看，GOPATH就是命令安装路径，比如我的命令就安装在/root/go/bin/webhook。\n\n```shell\ngo env\n...\nGOOS=\"linux\"\nGOPATH=\"/root/go\"\n...\n```\n\n### 生成ssh key\n\n在编写脚本之前确保服务器有权限拉取github代码，如果已经做了配置可跳过本节去看[部署脚本编写](#部署脚本编写)。ssh key是代码托管平台（github、gitee、coding、gitlab等）鉴别你是否有权拉取代码的身份标识，生成只需一行命令和一路回车就行了。\n\n```shell\nssh-keygen\n\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_rsa.\nYour public key has been saved in /root/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:M6sCf/J/hOu3zLxMkFUVmv3iWIa30CfbxiWqmWCt1YE root@iZwz96y36tk2ecnykzituxZ\nThe key's randomart image is:\n+---[RSA 2048]----+\n|            ..o. |\n|           . o   |\n|          . o    |\n|       . o .     |\n|      E S.  .    |\n|  .  . ..Oo ..   |\n|   oo o ==Boo .  |\n|   .++.+o#== .   |\n|    .=*+=+@o     |\n+----[SHA256]-----+\n```\n\n生成后可通过`cat ~/.ssh/id_rsa.pub`命令查看，最后将key加入github即可，加法不再赘述，请自行谷歌。\n\n```shell\ncat ~/.ssh/id_rsa.pub\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQHBAAABAQCv7LGVJUFdcLL+HZyRFTQIQCdre61Gch76lDVpmWSX9BGGRU3iQS7EU5qApFn1VSvt+yf4rMt2LEkuxGCm1wIyBKZ6LYDViZBeTAfx4BcM1mcpxOX6I/+r07mQ4llTz+poQB1Zp9Y60uk0tbGOVWlCoDBEvf9qeEnQ0qEczEkv7wcawV6pVhlXjFKZgq0EOQbCYoWMvPUl+dwDbTcl/h+7At1nlgfF7IuRHlKf18qvgnTRT2wpiuz4pWdoAi8LcY1JiR1z5OB0oCJ2euhyDND39G2NxZRS1FIVdgCEvioHtdoHOSoWBlcSj0fLFSnscBfRBrCd7yhOP7fFKfrowHMj root@iZwz96y36tk2ecnykzituxZ\n```\n\n### 部署脚本编写\n\n该shell脚本的主要目的是从github拉取代码，脚本内容很简单，只做了目录的简要判断，代码目录存在则更新，不存在则克隆仓库，工作目录和仓库名称、地址请换成自己的。\n\n```shell\n#!/bin/bash\n\ncd /home/www/website\n\nif [ ! -d \"go-home\" ]; then\n  git clone https://github.com/pingyeaa/go-home.git\nfi\n\ncd go-home\ngit pull\n```\n\n### webhook配置与启动\n\n编写配置文件hooks.json，格式如下。\n\n```json\n[\n  {\n    \"id\": \"deploy-webhook\",\n    \"execute-command\": \"deploy.sh\",\n    \"command-working-directory\": \"/home\"\n  }\n]\n```\n\n- id：钩子的id，可自定义\n- execute-command：要执行的脚本名，就是刚才编写的部署脚本\n- command-working-directory：脚本所在目录\n\n完成后通过webhook命令启动，可以看到id为deploy-webhook的配置已经加载了，我们需要注意的是监听的端口和路径，等下要用到。\n\n```shell\n/root/go/bin/webhook -hooks hooks.json -verbose\n\n[webhook] 2020/04/22 15:18:22 version 2.6.11 starting\n[webhook] 2020/04/22 15:18:22 setting up os signal watcher\n[webhook] 2020/04/22 15:18:22 attempting to load hooks from hooks.json\n[webhook] 2020/04/22 15:18:22 found 1 hook(s) in file\n[webhook] 2020/04/22 15:18:22   loaded: deploy-webhook\n[webhook] 2020/04/22 15:18:22 serving hooks on http://0.0.0.0:9000/hooks/{id}\n[webhook] 2020/04/22 15:18:22 os signal watcher ready\n```\n\n```shell\nhttp://0.0.0.0:9000/hooks/{id}\n```\n\n### Github Webhooks配置\n\n现在服务器已经启动了webhook程序监听9000端口，接下来仅需要告诉Github这个地址和端口就好了。\n\n打开仓库设置页，添加webhook。\n\n![](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587523289550.png)\n\n配置webhooks，Payload URL就是要通知的地址，把刚才打印出的端口和路径填上即可，其他默认。\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541102651.png)\n\n现在可以提交代码测试了，如果推送失败Github中会有错误提示，同样的，成功不仅在Github中能看到，服务器的打印日志也有记录。\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541394355.png)\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541482026.png)","slug":"other/github-webhooks","published":1,"updated":"2020-05-07T16:19:37.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka9p6osc0008xbp408zn04eb","content":"<p>最近机缘巧合的购置了域名和服务器，不用实在是浪费，再加上一直没有属于自己的个人网站，所以打算用hexo在服务器上玩一下，这样也就不用再纠结用Github pages还是Gitee pages了。当然，今天的主题并不是博客搭建，而是如何利用Github的钩子，将博客代码部署到服务器上。</p>\n<p>毕竟Github的钩子已经历史悠久了，网上有很多开源项目可以拿来用，所以我并没有造轮子，而是去找了5K star的开源Go项目<code>webhook</code>，这个工具的作用是接收Github仓库的变动通知，然后调用你配置好的shell脚本，脚本可以写上代码拉取的命令或是编译的操作等，具体根据个人需求而定。简而言之，它只起着拉通Github与你服务器的作用。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587526481705.png\" alt=\"file\"></p>\n<h3 id=\"webhook工具安装\"><a href=\"#webhook工具安装\" class=\"headerlink\" title=\"webhook工具安装\"></a>webhook工具安装</h3><p>因为webhook是Go语言开发的，所以要先安装Go语言。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y golang</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以用go命令安装webhook了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/adnanh/webhook</span><br></pre></td></tr></table></figure>\n\n<p>命令安装位置可以通过<code>go env</code>查看，GOPATH就是命令安装路径，比如我的命令就安装在/root/go/bin/webhook。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go env</span><br><span class=\"line\">...</span><br><span class=\"line\">GOOS=\"linux\"</span><br><span class=\"line\">GOPATH=\"/root/go\"</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成ssh-key\"><a href=\"#生成ssh-key\" class=\"headerlink\" title=\"生成ssh key\"></a>生成ssh key</h3><p>在编写脚本之前确保服务器有权限拉取github代码，如果已经做了配置可跳过本节去看<a href=\"#部署脚本编写\">部署脚本编写</a>。ssh key是代码托管平台（github、gitee、coding、gitlab等）鉴别你是否有权拉取代码的身份标识，生成只需一行命令和一路回车就行了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br><span class=\"line\"></span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class=\"line\">Enter passphrase (empty for no passphrase): </span><br><span class=\"line\">Enter same passphrase again: </span><br><span class=\"line\">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class=\"line\">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">SHA256:M6sCf/J/hOu3zLxMkFUVmv3iWIa30CfbxiWqmWCt1YE root@iZwz96y36tk2ecnykzituxZ</span><br><span class=\"line\">The key's randomart image is:</span><br><span class=\"line\">+---[RSA 2048]----+</span><br><span class=\"line\">|            ..o. |</span><br><span class=\"line\">|           . o   |</span><br><span class=\"line\">|          . o    |</span><br><span class=\"line\">|       . o .     |</span><br><span class=\"line\">|      E S.  .    |</span><br><span class=\"line\">|  .  . ..Oo ..   |</span><br><span class=\"line\">|   oo o ==Boo .  |</span><br><span class=\"line\">|   .++.+o#== .   |</span><br><span class=\"line\">|    .=*+=+@o     |</span><br><span class=\"line\">+----[SHA256]-----+</span><br></pre></td></tr></table></figure>\n\n<p>生成后可通过<code>cat ~/.ssh/id_rsa.pub</code>命令查看，最后将key加入github即可，加法不再赘述，请自行谷歌。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">ssh-rsa AAAAB3NzaC1yc2EAAAADAQHBAAABAQCv7LGVJUFdcLL+HZyRFTQIQCdre61Gch76lDVpmWSX9BGGRU3iQS7EU5qApFn1VSvt+yf4rMt2LEkuxGCm1wIyBKZ6LYDViZBeTAfx4BcM1mcpxOX6I/+r07mQ4llTz+poQB1Zp9Y60uk0tbGOVWlCoDBEvf9qeEnQ0qEczEkv7wcawV6pVhlXjFKZgq0EOQbCYoWMvPUl+dwDbTcl/h+7At1nlgfF7IuRHlKf18qvgnTRT2wpiuz4pWdoAi8LcY1JiR1z5OB0oCJ2euhyDND39G2NxZRS1FIVdgCEvioHtdoHOSoWBlcSj0fLFSnscBfRBrCd7yhOP7fFKfrowHMj root@iZwz96y36tk2ecnykzituxZ</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署脚本编写\"><a href=\"#部署脚本编写\" class=\"headerlink\" title=\"部署脚本编写\"></a>部署脚本编写</h3><p>该shell脚本的主要目的是从github拉取代码，脚本内容很简单，只做了目录的简要判断，代码目录存在则更新，不存在则克隆仓库，工作目录和仓库名称、地址请换成自己的。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/www/website</span><br><span class=\"line\"></span><br><span class=\"line\">if [ ! -d \"go-home\" ]; then</span><br><span class=\"line\">  git clone https://github.com/pingyeaa/go-home.git</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd go-home</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webhook配置与启动\"><a href=\"#webhook配置与启动\" class=\"headerlink\" title=\"webhook配置与启动\"></a>webhook配置与启动</h3><p>编写配置文件hooks.json，格式如下。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"deploy-webhook\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"execute-command\"</span>: <span class=\"string\">\"deploy.sh\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"command-working-directory\"</span>: <span class=\"string\">\"/home\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>id：钩子的id，可自定义</li>\n<li>execute-command：要执行的脚本名，就是刚才编写的部署脚本</li>\n<li>command-working-directory：脚本所在目录</li>\n</ul>\n<p>完成后通过webhook命令启动，可以看到id为deploy-webhook的配置已经加载了，我们需要注意的是监听的端口和路径，等下要用到。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/root/go/bin/webhook -hooks hooks.json -verbose</span><br><span class=\"line\"></span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 version 2.6.11 starting</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 setting up os signal watcher</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 attempting to load hooks from hooks.json</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 found 1 hook(s) in file</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22   loaded: deploy-webhook</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 serving hooks on http://0.0.0.0:9000/hooks/&#123;id&#125;</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 os signal watcher ready</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://0.0.0.0:9000/hooks/&#123;id&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github-Webhooks配置\"><a href=\"#Github-Webhooks配置\" class=\"headerlink\" title=\"Github Webhooks配置\"></a>Github Webhooks配置</h3><p>现在服务器已经启动了webhook程序监听9000端口，接下来仅需要告诉Github这个地址和端口就好了。</p>\n<p>打开仓库设置页，添加webhook。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587523289550.png\" alt=\"\"></p>\n<p>配置webhooks，Payload URL就是要通知的地址，把刚才打印出的端口和路径填上即可，其他默认。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541102651.png\" alt=\"file\"></p>\n<p>现在可以提交代码测试了，如果推送失败Github中会有错误提示，同样的，成功不仅在Github中能看到，服务器的打印日志也有记录。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541394355.png\" alt=\"file\"></p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541482026.png\" alt=\"file\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近机缘巧合的购置了域名和服务器，不用实在是浪费，再加上一直没有属于自己的个人网站，所以打算用hexo在服务器上玩一下，这样也就不用再纠结用Github pages还是Gitee pages了。当然，今天的主题并不是博客搭建，而是如何利用Github的钩子，将博客代码部署到服务器上。</p>\n<p>毕竟Github的钩子已经历史悠久了，网上有很多开源项目可以拿来用，所以我并没有造轮子，而是去找了5K star的开源Go项目<code>webhook</code>，这个工具的作用是接收Github仓库的变动通知，然后调用你配置好的shell脚本，脚本可以写上代码拉取的命令或是编译的操作等，具体根据个人需求而定。简而言之，它只起着拉通Github与你服务器的作用。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587526481705.png\" alt=\"file\"></p>\n<h3 id=\"webhook工具安装\"><a href=\"#webhook工具安装\" class=\"headerlink\" title=\"webhook工具安装\"></a>webhook工具安装</h3><p>因为webhook是Go语言开发的，所以要先安装Go语言。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y golang</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以用go命令安装webhook了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/adnanh/webhook</span><br></pre></td></tr></table></figure>\n\n<p>命令安装位置可以通过<code>go env</code>查看，GOPATH就是命令安装路径，比如我的命令就安装在/root/go/bin/webhook。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go env</span><br><span class=\"line\">...</span><br><span class=\"line\">GOOS=\"linux\"</span><br><span class=\"line\">GOPATH=\"/root/go\"</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成ssh-key\"><a href=\"#生成ssh-key\" class=\"headerlink\" title=\"生成ssh key\"></a>生成ssh key</h3><p>在编写脚本之前确保服务器有权限拉取github代码，如果已经做了配置可跳过本节去看<a href=\"#部署脚本编写\">部署脚本编写</a>。ssh key是代码托管平台（github、gitee、coding、gitlab等）鉴别你是否有权拉取代码的身份标识，生成只需一行命令和一路回车就行了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br><span class=\"line\"></span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class=\"line\">Enter passphrase (empty for no passphrase): </span><br><span class=\"line\">Enter same passphrase again: </span><br><span class=\"line\">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class=\"line\">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">SHA256:M6sCf/J/hOu3zLxMkFUVmv3iWIa30CfbxiWqmWCt1YE root@iZwz96y36tk2ecnykzituxZ</span><br><span class=\"line\">The key's randomart image is:</span><br><span class=\"line\">+---[RSA 2048]----+</span><br><span class=\"line\">|            ..o. |</span><br><span class=\"line\">|           . o   |</span><br><span class=\"line\">|          . o    |</span><br><span class=\"line\">|       . o .     |</span><br><span class=\"line\">|      E S.  .    |</span><br><span class=\"line\">|  .  . ..Oo ..   |</span><br><span class=\"line\">|   oo o ==Boo .  |</span><br><span class=\"line\">|   .++.+o#== .   |</span><br><span class=\"line\">|    .=*+=+@o     |</span><br><span class=\"line\">+----[SHA256]-----+</span><br></pre></td></tr></table></figure>\n\n<p>生成后可通过<code>cat ~/.ssh/id_rsa.pub</code>命令查看，最后将key加入github即可，加法不再赘述，请自行谷歌。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">ssh-rsa AAAAB3NzaC1yc2EAAAADAQHBAAABAQCv7LGVJUFdcLL+HZyRFTQIQCdre61Gch76lDVpmWSX9BGGRU3iQS7EU5qApFn1VSvt+yf4rMt2LEkuxGCm1wIyBKZ6LYDViZBeTAfx4BcM1mcpxOX6I/+r07mQ4llTz+poQB1Zp9Y60uk0tbGOVWlCoDBEvf9qeEnQ0qEczEkv7wcawV6pVhlXjFKZgq0EOQbCYoWMvPUl+dwDbTcl/h+7At1nlgfF7IuRHlKf18qvgnTRT2wpiuz4pWdoAi8LcY1JiR1z5OB0oCJ2euhyDND39G2NxZRS1FIVdgCEvioHtdoHOSoWBlcSj0fLFSnscBfRBrCd7yhOP7fFKfrowHMj root@iZwz96y36tk2ecnykzituxZ</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署脚本编写\"><a href=\"#部署脚本编写\" class=\"headerlink\" title=\"部署脚本编写\"></a>部署脚本编写</h3><p>该shell脚本的主要目的是从github拉取代码，脚本内容很简单，只做了目录的简要判断，代码目录存在则更新，不存在则克隆仓库，工作目录和仓库名称、地址请换成自己的。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/www/website</span><br><span class=\"line\"></span><br><span class=\"line\">if [ ! -d \"go-home\" ]; then</span><br><span class=\"line\">  git clone https://github.com/pingyeaa/go-home.git</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd go-home</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webhook配置与启动\"><a href=\"#webhook配置与启动\" class=\"headerlink\" title=\"webhook配置与启动\"></a>webhook配置与启动</h3><p>编写配置文件hooks.json，格式如下。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"deploy-webhook\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"execute-command\"</span>: <span class=\"string\">\"deploy.sh\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"command-working-directory\"</span>: <span class=\"string\">\"/home\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>id：钩子的id，可自定义</li>\n<li>execute-command：要执行的脚本名，就是刚才编写的部署脚本</li>\n<li>command-working-directory：脚本所在目录</li>\n</ul>\n<p>完成后通过webhook命令启动，可以看到id为deploy-webhook的配置已经加载了，我们需要注意的是监听的端口和路径，等下要用到。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/root/go/bin/webhook -hooks hooks.json -verbose</span><br><span class=\"line\"></span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 version 2.6.11 starting</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 setting up os signal watcher</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 attempting to load hooks from hooks.json</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 found 1 hook(s) in file</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22   loaded: deploy-webhook</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 serving hooks on http://0.0.0.0:9000/hooks/&#123;id&#125;</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 os signal watcher ready</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://0.0.0.0:9000/hooks/&#123;id&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github-Webhooks配置\"><a href=\"#Github-Webhooks配置\" class=\"headerlink\" title=\"Github Webhooks配置\"></a>Github Webhooks配置</h3><p>现在服务器已经启动了webhook程序监听9000端口，接下来仅需要告诉Github这个地址和端口就好了。</p>\n<p>打开仓库设置页，添加webhook。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587523289550.png\" alt=\"\"></p>\n<p>配置webhooks，Payload URL就是要通知的地址，把刚才打印出的端口和路径填上即可，其他默认。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541102651.png\" alt=\"file\"></p>\n<p>现在可以提交代码测试了，如果推送失败Github中会有错误提示，同样的，成功不仅在Github中能看到，服务器的打印日志也有记录。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541394355.png\" alt=\"file\"></p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541482026.png\" alt=\"file\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cka9p6os90004xbp49wkh3bdw","category_id":"cka9p6osd000axbp4esjccifb","_id":"cka9p6osf000fxbp473h73b3m"},{"post_id":"cka9p6osb0006xbp49hg9cea5","category_id":"cka9p6ose000cxbp493tgaiyn","_id":"cka9p6osg000ixbp4g7p8e5c4"},{"post_id":"cka9p6osc0008xbp408zn04eb","category_id":"cka9p6osf000hxbp4co0afief","_id":"cka9p6osg000lxbp47odhhi4w"},{"post_id":"cka9p6os70003xbp42joi6fcg","category_id":"cka9p6osc0007xbp4e9fihg74","_id":"cka9p6osh000rxbp40pbzcz6r"},{"post_id":"cka9p6os70003xbp42joi6fcg","category_id":"cka9p6osg000kxbp4bfzthck3","_id":"cka9p6osh000sxbp40n0ehb5o"}],"PostTag":[{"post_id":"cka9p6os70003xbp42joi6fcg","tag_id":"cka9p6osa0005xbp4ar3wc349","_id":"cka9p6ose000dxbp444ype12z"},{"post_id":"cka9p6os70003xbp42joi6fcg","tag_id":"cka9p6osd0009xbp47j65b33n","_id":"cka9p6osf000exbp4cnq9amya"},{"post_id":"cka9p6os90004xbp49wkh3bdw","tag_id":"cka9p6ose000bxbp4e008487k","_id":"cka9p6osh000nxbp46pz3ea3k"},{"post_id":"cka9p6os90004xbp49wkh3bdw","tag_id":"cka9p6osf000gxbp4dj4gb290","_id":"cka9p6osh000oxbp4ex8kfokl"},{"post_id":"cka9p6os90004xbp49wkh3bdw","tag_id":"cka9p6osg000jxbp43uxq5cwo","_id":"cka9p6osh000qxbp472sjhqkt"},{"post_id":"cka9p6osb0006xbp49hg9cea5","tag_id":"cka9p6osg000mxbp41ztt7ur6","_id":"cka9p6osi000vxbp49r45dslo"},{"post_id":"cka9p6osb0006xbp49hg9cea5","tag_id":"cka9p6osh000pxbp4dn1h0xl2","_id":"cka9p6osi000wxbp4eypb57m7"},{"post_id":"cka9p6osb0006xbp49hg9cea5","tag_id":"cka9p6osh000txbp4ezevakn2","_id":"cka9p6osj000yxbp4g3yo4pct"},{"post_id":"cka9p6osc0008xbp408zn04eb","tag_id":"cka9p6osi000uxbp4563we0ra","_id":"cka9p6osk0010xbp4a1qi4tfk"},{"post_id":"cka9p6osc0008xbp408zn04eb","tag_id":"cka9p6osi000xxbp475kf419m","_id":"cka9p6osk0011xbp48afl2h4m"},{"post_id":"cka9p6osc0008xbp408zn04eb","tag_id":"cka9p6osk000zxbp48jrc8y2b","_id":"cka9p6osk0012xbp4562de0j3"}],"Tag":[{"name":"网关","_id":"cka9p6osa0005xbp4ar3wc349"},{"name":"kong","_id":"cka9p6osd0009xbp47j65b33n"},{"name":"frp","_id":"cka9p6ose000bxbp4e008487k"},{"name":"内网穿透","_id":"cka9p6osf000gxbp4dj4gb290"},{"name":"golang","_id":"cka9p6osg000jxbp43uxq5cwo"},{"name":"supervisor","_id":"cka9p6osg000mxbp41ztt7ur6"},{"name":"进程","_id":"cka9p6osh000pxbp4dn1h0xl2"},{"name":"监控","_id":"cka9p6osh000txbp4ezevakn2"},{"name":"github","_id":"cka9p6osi000uxbp4563we0ra"},{"name":"webhooks","_id":"cka9p6osi000xxbp475kf419m"},{"name":"钩子","_id":"cka9p6osk000zxbp48jrc8y2b"}]}}