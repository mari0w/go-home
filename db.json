{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/qrcode.jpg","path":"images/qrcode.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.jpeg","path":"images/favicon.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpeg","path":"images/wechatpay.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/qrcode.png","path":"images/qrcode.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"29bf6376e23fb066cae3a7c44eb9cdf3a0b1163f","modified":1587689769558},{"_id":"themes/next/.DS_Store","hash":"024b4fee80e02b17cd3ef579ecbac7cfb3aa5888","modified":1587610861987},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1587453156757},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1587453156759},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1587453156757},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1587453156758},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1587453156759},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1587453156759},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1587453156759},{"_id":"themes/next/_config.yml","hash":"546ee91e1051b035c8c2749b195226b68c2448d1","modified":1588944135791},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1587453156760},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1587453156760},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1585977960000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1585977960000},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1585977960000},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1585977960000},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1585977960000},{"_id":"source/categories/index.md","hash":"ad7c39b2fc7a6589380f4793f701181f4ae1a978","modified":1587544322176},{"_id":"source/_posts/.DS_Store","hash":"92264b272076c1697d142a4f6e9c4bfb23d29191","modified":1587626630287},{"_id":"source/comments/index.md","hash":"989c1c729fed780a72781dcdb4feb3a5124939b5","modified":1587611757400},{"_id":"source/tags/index.md","hash":"d614072577e3aafac1d3c5c43e6d74cada7eb52f","modified":1587544311392},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1587453156758},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1587453156758},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1587453156758},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1587453156758},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1585977960000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1585977960000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1585977960000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1585977960000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1585977960000},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1585977960000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1585977960000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1585977960000},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1585977960000},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1585977960000},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1585977960000},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1585977960000},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1585977960000},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1585977960000},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1585977960000},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1585977960000},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1585977960000},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1585977960000},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1585977960000},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1585977960000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1585977960000},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1585977960000},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1585977960000},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1585977960000},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1585977960000},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1585977960000},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1585977960000},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1585977960000},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1585977960000},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1585977960000},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1585977960000},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1585977960000},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1585977960000},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1585977960000},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1585977960000},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1585977960000},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1585977960000},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1585977960000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1585977960000},{"_id":"themes/next/source/.DS_Store","hash":"dcb91b58762bab04a028caaee9918abf7ae642fc","modified":1587610861986},{"_id":"source/_posts/os/supervisor.md","hash":"3c67d86a5de63066e57f85a78f751d39bd43a684","modified":1588868356803},{"_id":"source/_posts/database/mysql-performance.md","hash":"b2b7e686b736c60b07344657ad7526c77d108643","modified":1588868369263},{"_id":"source/_posts/other/github-webhooks.md","hash":"0e9550f96c29dd393be607cc33c15dd24a699af1","modified":1588868377143},{"_id":"source/_posts/os/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1587626652784},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1585977960000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1585977960000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1585977960000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1585977960000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1585977960000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1585977960000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1585977960000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1585977960000},{"_id":"themes/next/layout/_macro/post.swig","hash":"e004de7ab257a3febf1ae16bdf442628ac3ea25b","modified":1587699964858},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1585977960000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1585977960000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1585977960000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1585977960000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"700c3e7bd449bce51f6faee42c052e13ed5f8b3e","modified":1585977960000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1585977960000},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1585977960000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1585977960000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1585977960000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1585977960000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1585977960000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1585977960000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1585977960000},{"_id":"themes/next/layout/adsense/banner_ads.swig","hash":"425b476b9890600a52b3b91a865bd4950894a3ec","modified":1587612183295},{"_id":"themes/next/scripts/events/index.js","hash":"bf5e93f9209d111a014a7a6a17e86c05be552d13","modified":1585977960000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1585977960000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1585977960000},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1585977960000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1585977960000},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1585977960000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1585977960000},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1585977960000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1585977960000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1585977960000},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1585977960000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1585977960000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1585977960000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1585977960000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1585977960000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1585977960000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1585977960000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1585977960000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1585977960000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1585977960000},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1585977960000},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1585977960000},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1585977960000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1585977960000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1585977960000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1585977960000},{"_id":"themes/next/source/images/.DS_Store","hash":"b08a583e8e8719100916791d296f6f1dbfe0aa78","modified":1587610868123},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1585977960000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1585977960000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1585977960000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1585977960000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1585977960000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1585977960000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1585977960000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1585977960000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1585977960000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1585977960000},{"_id":"themes/next/source/images/qrcode.jpg","hash":"a8789b7a00af57be37d9b136089e639af57cdee7","modified":1587537946012},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1585977960000},{"_id":"themes/next/source/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1585977960000},{"_id":"themes/next/source/js/local-search.js","hash":"d6673063958127a03881dab2f0376a47f5e08a88","modified":1585977960000},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1585977960000},{"_id":"themes/next/source/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1585977960000},{"_id":"themes/next/source/js/utils.js","hash":"91d174e12c61c332f3b06085d635c2b0f686a758","modified":1585977960000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1585977960000},{"_id":"themes/next/source/images/favicon.jpeg","hash":"53998c1865e358581dff462411335eba91f60ad4","modified":1587375800594},{"_id":"themes/next/source/images/avatar.jpeg","hash":"72cbdcaf3dc6f2d8f2ef9610fb7e1c52dc10795b","modified":1587537946010},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1585977960000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1585977960000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1585977960000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1585977960000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1585977960000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1585977960000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1585977960000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1585977960000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1585977960000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1585977960000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1585977960000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1585977960000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1585977960000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1585977960000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1585977960000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1585977960000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1585977960000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1585977960000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1585977960000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1585977960000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1585977960000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1585977960000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1585977960000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1585977960000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1585977960000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1585977960000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1585977960000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1585977960000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1585977960000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1585977960000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1585977960000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1585977960000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1585977960000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1585977960000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1585977960000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1585977960000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1585977960000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1585977960000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1585977960000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1585977960000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1585977960000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1585977960000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1585977960000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1585977960000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1585977960000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1585977960000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1585977960000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1585977960000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"24a1049270bfdc5a508826839dd6a163fcc41177","modified":1587700623137},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1585977960000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1585977960000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1585977960000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1585977960000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1585977960000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1585977960000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1585977960000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1585977960000},{"_id":"themes/next/source/images/wechatpay.jpeg","hash":"b838ade1d8abe2e52e65aeadc3ab36f5caa47cc7","modified":1587537946015},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b3bea92eef0e1fe2e7e294dac2184d16b5b8d666","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1585977960000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1585977960000},{"_id":"themes/next/source/images/qrcode.png","hash":"4bf38c57894a925f51cb35c898e5c47fcde7c91d","modified":1587537945967},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1585977960000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1585977960000},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1585977960000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1585977960000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1585977960000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1585977960000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1585977960000},{"_id":"public/baidusitemap.xml","hash":"ebb92945fe2e1068bf4710430f319044d0d6802d","modified":1588944204129},{"_id":"public/search.xml","hash":"d96396c6d07fafe05b50641e6add6b218b9043bb","modified":1588944204129},{"_id":"public/sitemap.xml","hash":"3137bb26de9e0e20e5362e026927af354b9d85cd","modified":1588944204129},{"_id":"public/comments/index.html","hash":"db217783d50ab0241af82ac7df0bbe66d5a1ca8c","modified":1588944204129},{"_id":"public/categories/杂谈/index.html","hash":"ce7dbd0ed60c608e063102789453748a8914cf5d","modified":1588944204129},{"_id":"public/categories/数据库/index.html","hash":"34628c9c0a144cfe6c62f2588cc20b41f291c7c8","modified":1588944204129},{"_id":"public/categories/操作系统/index.html","hash":"0aaec2d52fd1c21959fa5b27e41ea7113185ed74","modified":1588944204129},{"_id":"public/categories/数据库/mysql/index.html","hash":"7fe84295a9d9130985fcc3c10b98f1ed7a201ff5","modified":1588944204129},{"_id":"public/tags/mysql/index.html","hash":"48cd8530c4292dceec39094119b068fe31f11851","modified":1588944204129},{"_id":"public/tags/性能/index.html","hash":"5f7755a9ba52ea8528a487ef1fbf93c11f044875","modified":1588944204129},{"_id":"public/tags/github/index.html","hash":"1de8c0b8a6136b0dfac2e54593d26d0ce5c9b4cd","modified":1588944204129},{"_id":"public/tags/webhooks/index.html","hash":"13a618f4f77d341b5f6a5dceaeef37a641b2ab04","modified":1588944204129},{"_id":"public/tags/钩子/index.html","hash":"f4cafd3880238f1df25f2292ee5f9f74de394031","modified":1588944204129},{"_id":"public/tags/supervisor/index.html","hash":"1a1df1332e41a474478a41d2caf9535608c6b3b8","modified":1588944204129},{"_id":"public/tags/进程/index.html","hash":"add578f3f9c12bea0d941c7b14c911f214cc0039","modified":1588944204129},{"_id":"public/tags/监控/index.html","hash":"7cfb3a3d32c635157e577821f6cfb6d3588ac97c","modified":1588944204129},{"_id":"public/tags/index.html","hash":"cb3ed35f61c1c8c691ea5b592bdea7b6ff652dc0","modified":1588944204129},{"_id":"public/categories/index.html","hash":"dc69726dc83f92b5ae6ce1d34ea0574ee60e9f81","modified":1588944204129},{"_id":"public/2020/04/27/database/mysql-performance/index.html","hash":"a6cb89b15c7edbe170c099622060c5f87f115f80","modified":1588944204129},{"_id":"public/2020/04/22/other/github-webhooks/index.html","hash":"cba1731d77673aeed9e72d0ad6d7a35031770600","modified":1588944204129},{"_id":"public/2020/04/23/os/supervisor/index.html","hash":"54b56272e52396fd50e5b700404d6cd19bb635d9","modified":1588944204129},{"_id":"public/index.html","hash":"90398b481b6fc4aff34652d1406d21b635640ce3","modified":1588944204129},{"_id":"public/archives/index.html","hash":"735eaea3bb1445678bc9048e17aea7f54c0512af","modified":1588944204129},{"_id":"public/archives/2020/index.html","hash":"21041fb8fd1cc8e5af84024fdbc1cb32810eccac","modified":1588944204129},{"_id":"public/archives/2020/04/index.html","hash":"ff89a4d65e1b32d3878db177ccaf35322bb16aa4","modified":1588944204129},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1588944204129},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1588944204129},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1588944204129},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1588944204129},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1588944204129},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1588944204129},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1588944204129},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1588944204129},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1588944204129},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1588944204129},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1588944204129},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1588944204129},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1588944204129},{"_id":"public/images/qrcode.jpg","hash":"a8789b7a00af57be37d9b136089e639af57cdee7","modified":1588944204129},{"_id":"public/images/favicon.jpeg","hash":"53998c1865e358581dff462411335eba91f60ad4","modified":1588944204129},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1588944204129},{"_id":"public/images/avatar.jpeg","hash":"72cbdcaf3dc6f2d8f2ef9610fb7e1c52dc10795b","modified":1588944204129},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1588944204129},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1588944204129},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1588944204129},{"_id":"public/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1588944204129},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1588944204129},{"_id":"public/js/local-search.js","hash":"d6673063958127a03881dab2f0376a47f5e08a88","modified":1588944204129},{"_id":"public/js/utils.js","hash":"91d174e12c61c332f3b06085d635c2b0f686a758","modified":1588944204129},{"_id":"public/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1588944204129},{"_id":"public/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1588944204129},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1588944204129},{"_id":"public/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1588944204129},{"_id":"public/css/main.css","hash":"5f1bd3b7367961219629594489af19ed1fd97d92","modified":1588944204129},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1588944204129},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1588944204129},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1588944204129},{"_id":"public/images/wechatpay.jpeg","hash":"b838ade1d8abe2e52e65aeadc3ab36f5caa47cc7","modified":1588944204129},{"_id":"public/images/qrcode.png","hash":"4bf38c57894a925f51cb35c898e5c47fcde7c91d","modified":1588944204129}],"Category":[{"name":"数据库","_id":"ck9y8cr1700078yp45hot0elk"},{"name":"杂谈","_id":"ck9y8cr1800098yp42pgehqz8"},{"name":"操作系统","_id":"ck9y8cr18000b8yp44uuqcfsx"},{"name":"mysql","parent":"ck9y8cr1700078yp45hot0elk","_id":"ck9y8cr19000g8yp4cl2t62s2"}],"Data":[],"Page":[{"title":"留言板","date":"2020-04-22T07:06:22.000Z","_content":"","source":"comments/index.md","raw":"---\ntitle: 留言板\ndate: 2020-04-22 15:06:22\n---\n","updated":"2020-04-23T03:15:57.400Z","path":"comments/index.html","comments":1,"layout":"page","_id":"ck9y8cqzr00008yp461vk1lib","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2020-04-22T07:06:22.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2020-04-22 15:06:22\ntype: \"categories\"\n---\n","updated":"2020-04-22T08:32:02.176Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck9y8cqzv00018yp44zey39kq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2020-04-22T07:05:26.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2020-04-22 15:05:26\ntype: \"tags\"\n---\n","updated":"2020-04-22T08:31:51.392Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck9y8cr0o00028yp4210i72tw","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"如何进行 MySQL 性能调优","date":"2020-04-27T02:06:14.000Z","_content":"\n## 背景\n\n众所周知，Web API 响应慢可能包含很多方面的原因，比如第三方接口超时、DNS 解析慢、API 响应内容过大、网络带宽不够、硬件配置不足、网关层出现问题等，当然最常见且容易出问题的地方当属数据库层的使用，所以我们今天的主题只围绕数据库性能调优来展开。\n\n## show status\n\n当没有精确到具体 SQL 语句，而是觉得系统整体缓慢时，除了使用 vmstat 或 iostat 查看 CPU、进程、I/O 设备的使用情况外，还可以通过 show status 命令查询 mysql 整体执行频率。\n\n```shell\nmysql > show status;\n```\n\n进入 mysql 终端输入 show status 指令可以看到很多选项，比如语句的执行次数、连接数、锁表次数以及慢查询次数等等，但是我相信你想看的更多的是从上次 mysql 启动到现在的执行频率，所以只需要加上 global 就可以了，它会查询自服务启动后的统计结果，若不加，默认执行的是 show session status，意味着只查询本次连接内的统计结果，说实话我并没有想到它的应用场景，了解真相的同学可以留言给我。\n\n```shell\nmysql > show global status;\n```\n\n常见的变量有\n\n- Com_select：执行 Select 操作的次数\n- Com_update：执行 Update 操作的次数\n- Com_insert：执行 Insert 操作的次数\n- Com_delete: 执行 Delete 操作的次数\n- Com_rollback：回滚次数\n- Com_commit：提交次数\n- Com_*：Com 开头的都是数据库相关操作的次数\n- Innodb_row_lock_time：行锁定花费的总时间，单位毫秒\n- Innodb_row_lock_time_avg：行锁定平均花费时间，单位毫秒\n- Max_used_connections：服务器启动后使用的最大连接数量\n- Uptime：服务器运行时间，单位秒\n- Threads_connected：当前打开的连接数量\n- Connections：试图连接 MySQL 服务器的数量，无论成功与否\n- Aborted_connects：试图连接到服务器但失败的数量\n\n从 show status 能看出什么问题呢，这个仁者见仁智者见智了，比如回滚次数 Com_rollback 非常多，那意味着代码一定存在问题，连接失败次数 Aborted_connects 过多可能是因为代码中没有及时或正确的关闭 mysql 连接等。\n\n## 慢查询\n\nshow status 虽然可以查询系统整体的运行概况，但是无法精准定位到具体的 SQL 语句，哪个语句执行慢实际上是记录在 mysql 中的，当然它也有自己的开关，可以通过 show varirables 命令查看。\n\n```shell\nmysql > show variables like '%slow_query_log%';\n```\n\n```shell\n+---------------------+--------------------------------------+\n| Variable_name       | Value                                |\n+---------------------+--------------------------------------+\n| slow_query_log      | OFF                                  |\n| slow_query_log_file | /var/lib/mysql/400d5ed8dd00-slow.log |\n+---------------------+--------------------------------------+\n2 rows in set (0.06 sec)\n```\n\nslow_query_log 意为开关，slow_query_log_file 是慢查询所在路径，开关可以通过 set 命令控制，但是只针对当前数据库生效，MySQL 重启会失效，如果要永久生效，必须修改 mysql 的配置文件。\n\n```shell\nmysql > set global slow_query_log=1;\n```\n\n```shell\n# /etc/mysql/mysql.conf.d/mysqld.cnf\n\n[mysqld]\n......\nslow_query_log=1\nslow_query_log_file=/tmp/slow.log\nlong_query_time=1\n```\n\n定义“慢”的权利是掌握在用户手里的，可以通过 long_query_time 设置几秒以上才算慢，慢查询文件格式如下。\n\n```shell\n# Time: 2020-04-28T07:33:20.364348Z\n# User@Host: root[root] @  [172.17.0.1]  Id:     2\n# Query_time: 1.848906  Lock_time: 0.000206 Rows_sent: 0  Rows_examined: 2219780\nuse gorm;\nSET timestamp=1588059200;\nselect * from vote_record where create_time like '%abc%';\n```\n\nmysql 会将所有执行超过 long_query_time 的语句记录下来，除此之外还包括时间戳、连接信息、执行时间等。\n\n## show processlist\n\n慢查询已经满足了绝大部分需求，但是只有在执行完毕的语句才会被记录，正在执行中的语句可以通过 show processlist 查看，我们执行 select sleep(5) 来做个测试。\n\n```shell\nmysql > select sleep(5);\nmysql > show processlist;\n```\n\n```shell\n+----+------+------------------+------+---------+------+------------+------------------------------------------------------------------------------------------------------+\n| Id | User | Host             | db   | Command | Time | State      | Info                                                                                                 |\n+----+------+------------------+------+---------+------+------------+------------------------------------------------------------------------------------------------------+\n|  2 | root | 172.17.0.1:53890 | gorm | Sleep   |   84 |            | NULL                                                                                                 |\n|  3 | root | 172.17.0.1:53892 | gorm | Query   |    2 | User sleep | select SLEEP(5)                                                                                      |\n|  4 | root | 172.17.0.1:53894 | gorm | Sleep   |  106 |            | NULL                                                                                                 |\n|  5 | root | 172.17.0.1:53896 | NULL | Sleep   |  106 |            | NULL                                                                                                 |\n|  6 | root | localhost        | NULL | Query   |    0 | starting   | show processlist                                                                                     |\n+----+------+------------------+------+---------+------+------------+------------------------------------------------------------------------------------------------------+\n6 rows in set (0.00 sec)\n```\n\nshow processlist 可以展示出正在运行的线程，除了 root 用户可以看到所有的线程外，其他用户只能看到自己执行的线程，字段解释如下。\n\n- Id：线程的唯一标识\n- User：启动该线程的用户\n- Host：发出执行请求的客户端 IP 和端口号\n- db：在哪个数据库中执行的\n- Command：线程正在执行的命令，下文解释\n- Time：在当前状态待了多久时间\n- State：线程状态\n- Info：线程执行的语句，默认显示前 100 个字符，查看全部字符执行 show full processlist\n\nCommand 字段包含如下命令（部分展示）\n\n- Query：正在执行一个语句\n- Quit：该线程正在推出\n- Shutdown：正在关闭服务器\n- Sleep：正在等待客户端发送请求语句\n- Debug：线程正在生成调试信息\n- Binlog Dump：正在将二进制日志同步到从节点\n- ……\n\n## 执行计划 explain\n\n当定位到慢语句后，接下来需要分析语句，我们常用 explain 对语句分析，只需在语句前加上 explain 即可。\n\n```shell\nmysql > explain select * from vote_record where create_time like '%ssssss%';\n```\n\nexplain 会大致评估语句的执行情况，有没有用到索引、查询了多少行等，字段如下。\n\n- id：执行编号，在没有子查询的情况下默认为 1 \n- select_type：查询类型，常见的有 SIMPLE、PRIMARY、UNION、SUBQUERY等\n- table：表示正在访问哪个表\n- type：表示访问类型，决定通过什么方式访问表，下文详解\n- possible_keys：可能使用到的索引\n- key：表示实际采用的哪个索引\n- key_len：索引里使用的字节数\n- ref：哪些列或常量被用于查找索引列上的值\n- rows：估算出所要检索的行数\n- extra：执行情况的说明描述，包含了不适合在其它列显示，但是又很重要的信息\n\n### type\n\n不同的访问类型对应性能不一，常见的访问类型有，性能由低到高排序\n\n```shell\nALL、index、range、ref、eq_ref、const、system、NULL\n```\n\n- ALL：代表扫完全表所有数据才找到目标，性能肯定是最差的\n- index：表示查完了所有的索引才找到目标，因为索引文件肯定比全表数据小，所以速度会快一些\n- range：表示索引范围扫描，没有扫全部的索引，而是扫了一部分，自然比 index 性能好\n- ref：表示使用了非唯一索引精确匹配到了某一行，这个比 range 更精准\n- eq_ref：表示使用了唯一索引精准匹配到了某一行，唯一索引自然比非唯一要找得更快\n- const/system：表示单表里最多一行匹配查询条件，比如对主键的查询\n- NULL：表示不用访问表或索引就能取到数据\n\n## show profiles\n\n除了分析语句索引使用情况外，profile 可以清楚地让我们了解语句执行的过程。监测 profile 开关的语句是\n\n```shell\nmysql> select @@profiling;\n+-------------+\n| @@profiling |\n+-------------+\n|           0 |\n+-------------+\n```\n\n可以通过 set 临时打开开关\n\n```shell\nmysql > set profiling=1;\n```\n\n打开收随便执行一条语句\n\n```shell\nmysql > select * from vote_record limit 100;\n```\n\n再通过 show profiles 就可以看到刚才执行的记录。\n\n```shell\nmysql> show profiles;\n+----------+------------+-------------------------------------+\n| Query_ID | Duration   | Query                               |\n+----------+------------+-------------------------------------+\n|        1 | 0.00086200 | select * from vote_record limit 100 |\n+----------+------------+-------------------------------------+\n1 row in set, 1 warning (0.00 sec)\n```\n\n一共三列，分别代表执行的标识、执行时间、执行语句，除此之外还可以指定查询某个 ID 的详情。\n\n```shell\nmysql> show profile for query 1;\n+----------------------+----------+\n| Status               | Duration |\n+----------------------+----------+\n| starting             | 0.000076 |\n| checking permissions | 0.000021 |\n| Opening tables       | 0.000067 |\n| init                 | 0.000023 |\n| System lock          | 0.000020 |\n| optimizing           | 0.000014 |\n| statistics           | 0.000026 |\n| preparing            | 0.000021 |\n| executing            | 0.000013 |\n| Sending data         | 0.000340 |\n| end                  | 0.000049 |\n| query end            | 0.000038 |\n| closing tables       | 0.000023 |\n| freeing items        | 0.000060 |\n| cleaning up          | 0.000072 |\n+----------------------+----------+\n15 rows in set, 1 warning (0.00 sec)\n```\n\n可以清晰地看出每个阶段执行耗时，实际并不止可以看阶段耗时，还能展示 CPU、IO、内存等信息，感兴趣可以自行尝试。\n\n```shell\nmysql> show profile cpu, block io, memory for query 1;\n+----------------------+----------+----------+------------+--------------+---------------+\n| Status               | Duration | CPU_user | CPU_system | Block_ops_in | Block_ops_out |\n+----------------------+----------+----------+------------+--------------+---------------+\n| starting             | 0.000076 | 0.000000 |   0.000000 |            0 |             0 |\n| checking permissions | 0.000021 | 0.000000 |   0.000000 |            0 |             0 |\n| Opening tables       | 0.000067 | 0.000000 |   0.000000 |            0 |             0 |\n| init                 | 0.000023 | 0.000000 |   0.000000 |            0 |             0 |\n| System lock          | 0.000020 | 0.000000 |   0.000000 |            0 |             0 |\n| optimizing           | 0.000014 | 0.000000 |   0.000000 |            0 |             0 |\n| statistics           | 0.000026 | 0.000000 |   0.000000 |            0 |             0 |\n| preparing            | 0.000021 | 0.000000 |   0.000000 |            0 |             0 |\n| executing            | 0.000013 | 0.000000 |   0.000000 |            0 |             0 |\n| Sending data         | 0.000340 | 0.000000 |   0.000000 |            0 |             0 |\n| end                  | 0.000049 | 0.000000 |   0.000000 |            0 |             0 |\n| query end            | 0.000038 | 0.000000 |   0.000000 |            0 |             0 |\n| closing tables       | 0.000023 | 0.000000 |   0.000000 |            0 |             0 |\n| freeing items        | 0.000060 | 0.000000 |   0.000000 |            0 |             0 |\n| cleaning up          | 0.000072 | 0.000000 |   0.000000 |            0 |             0 |\n+----------------------+----------+----------+------------+--------------+---------------+\n15 rows in set, 1 warning (0.01 sec)\n```\n\n\n\n\n\n","source":"_posts/database/mysql-performance.md","raw":"---\ntitle: 如何进行 MySQL 性能调优\ndate: 2020-04-27 10:06:14\ntags:\n- mysql\n- 性能\ncategories:\n- [数据库, mysql]\n---\n\n## 背景\n\n众所周知，Web API 响应慢可能包含很多方面的原因，比如第三方接口超时、DNS 解析慢、API 响应内容过大、网络带宽不够、硬件配置不足、网关层出现问题等，当然最常见且容易出问题的地方当属数据库层的使用，所以我们今天的主题只围绕数据库性能调优来展开。\n\n## show status\n\n当没有精确到具体 SQL 语句，而是觉得系统整体缓慢时，除了使用 vmstat 或 iostat 查看 CPU、进程、I/O 设备的使用情况外，还可以通过 show status 命令查询 mysql 整体执行频率。\n\n```shell\nmysql > show status;\n```\n\n进入 mysql 终端输入 show status 指令可以看到很多选项，比如语句的执行次数、连接数、锁表次数以及慢查询次数等等，但是我相信你想看的更多的是从上次 mysql 启动到现在的执行频率，所以只需要加上 global 就可以了，它会查询自服务启动后的统计结果，若不加，默认执行的是 show session status，意味着只查询本次连接内的统计结果，说实话我并没有想到它的应用场景，了解真相的同学可以留言给我。\n\n```shell\nmysql > show global status;\n```\n\n常见的变量有\n\n- Com_select：执行 Select 操作的次数\n- Com_update：执行 Update 操作的次数\n- Com_insert：执行 Insert 操作的次数\n- Com_delete: 执行 Delete 操作的次数\n- Com_rollback：回滚次数\n- Com_commit：提交次数\n- Com_*：Com 开头的都是数据库相关操作的次数\n- Innodb_row_lock_time：行锁定花费的总时间，单位毫秒\n- Innodb_row_lock_time_avg：行锁定平均花费时间，单位毫秒\n- Max_used_connections：服务器启动后使用的最大连接数量\n- Uptime：服务器运行时间，单位秒\n- Threads_connected：当前打开的连接数量\n- Connections：试图连接 MySQL 服务器的数量，无论成功与否\n- Aborted_connects：试图连接到服务器但失败的数量\n\n从 show status 能看出什么问题呢，这个仁者见仁智者见智了，比如回滚次数 Com_rollback 非常多，那意味着代码一定存在问题，连接失败次数 Aborted_connects 过多可能是因为代码中没有及时或正确的关闭 mysql 连接等。\n\n## 慢查询\n\nshow status 虽然可以查询系统整体的运行概况，但是无法精准定位到具体的 SQL 语句，哪个语句执行慢实际上是记录在 mysql 中的，当然它也有自己的开关，可以通过 show varirables 命令查看。\n\n```shell\nmysql > show variables like '%slow_query_log%';\n```\n\n```shell\n+---------------------+--------------------------------------+\n| Variable_name       | Value                                |\n+---------------------+--------------------------------------+\n| slow_query_log      | OFF                                  |\n| slow_query_log_file | /var/lib/mysql/400d5ed8dd00-slow.log |\n+---------------------+--------------------------------------+\n2 rows in set (0.06 sec)\n```\n\nslow_query_log 意为开关，slow_query_log_file 是慢查询所在路径，开关可以通过 set 命令控制，但是只针对当前数据库生效，MySQL 重启会失效，如果要永久生效，必须修改 mysql 的配置文件。\n\n```shell\nmysql > set global slow_query_log=1;\n```\n\n```shell\n# /etc/mysql/mysql.conf.d/mysqld.cnf\n\n[mysqld]\n......\nslow_query_log=1\nslow_query_log_file=/tmp/slow.log\nlong_query_time=1\n```\n\n定义“慢”的权利是掌握在用户手里的，可以通过 long_query_time 设置几秒以上才算慢，慢查询文件格式如下。\n\n```shell\n# Time: 2020-04-28T07:33:20.364348Z\n# User@Host: root[root] @  [172.17.0.1]  Id:     2\n# Query_time: 1.848906  Lock_time: 0.000206 Rows_sent: 0  Rows_examined: 2219780\nuse gorm;\nSET timestamp=1588059200;\nselect * from vote_record where create_time like '%abc%';\n```\n\nmysql 会将所有执行超过 long_query_time 的语句记录下来，除此之外还包括时间戳、连接信息、执行时间等。\n\n## show processlist\n\n慢查询已经满足了绝大部分需求，但是只有在执行完毕的语句才会被记录，正在执行中的语句可以通过 show processlist 查看，我们执行 select sleep(5) 来做个测试。\n\n```shell\nmysql > select sleep(5);\nmysql > show processlist;\n```\n\n```shell\n+----+------+------------------+------+---------+------+------------+------------------------------------------------------------------------------------------------------+\n| Id | User | Host             | db   | Command | Time | State      | Info                                                                                                 |\n+----+------+------------------+------+---------+------+------------+------------------------------------------------------------------------------------------------------+\n|  2 | root | 172.17.0.1:53890 | gorm | Sleep   |   84 |            | NULL                                                                                                 |\n|  3 | root | 172.17.0.1:53892 | gorm | Query   |    2 | User sleep | select SLEEP(5)                                                                                      |\n|  4 | root | 172.17.0.1:53894 | gorm | Sleep   |  106 |            | NULL                                                                                                 |\n|  5 | root | 172.17.0.1:53896 | NULL | Sleep   |  106 |            | NULL                                                                                                 |\n|  6 | root | localhost        | NULL | Query   |    0 | starting   | show processlist                                                                                     |\n+----+------+------------------+------+---------+------+------------+------------------------------------------------------------------------------------------------------+\n6 rows in set (0.00 sec)\n```\n\nshow processlist 可以展示出正在运行的线程，除了 root 用户可以看到所有的线程外，其他用户只能看到自己执行的线程，字段解释如下。\n\n- Id：线程的唯一标识\n- User：启动该线程的用户\n- Host：发出执行请求的客户端 IP 和端口号\n- db：在哪个数据库中执行的\n- Command：线程正在执行的命令，下文解释\n- Time：在当前状态待了多久时间\n- State：线程状态\n- Info：线程执行的语句，默认显示前 100 个字符，查看全部字符执行 show full processlist\n\nCommand 字段包含如下命令（部分展示）\n\n- Query：正在执行一个语句\n- Quit：该线程正在推出\n- Shutdown：正在关闭服务器\n- Sleep：正在等待客户端发送请求语句\n- Debug：线程正在生成调试信息\n- Binlog Dump：正在将二进制日志同步到从节点\n- ……\n\n## 执行计划 explain\n\n当定位到慢语句后，接下来需要分析语句，我们常用 explain 对语句分析，只需在语句前加上 explain 即可。\n\n```shell\nmysql > explain select * from vote_record where create_time like '%ssssss%';\n```\n\nexplain 会大致评估语句的执行情况，有没有用到索引、查询了多少行等，字段如下。\n\n- id：执行编号，在没有子查询的情况下默认为 1 \n- select_type：查询类型，常见的有 SIMPLE、PRIMARY、UNION、SUBQUERY等\n- table：表示正在访问哪个表\n- type：表示访问类型，决定通过什么方式访问表，下文详解\n- possible_keys：可能使用到的索引\n- key：表示实际采用的哪个索引\n- key_len：索引里使用的字节数\n- ref：哪些列或常量被用于查找索引列上的值\n- rows：估算出所要检索的行数\n- extra：执行情况的说明描述，包含了不适合在其它列显示，但是又很重要的信息\n\n### type\n\n不同的访问类型对应性能不一，常见的访问类型有，性能由低到高排序\n\n```shell\nALL、index、range、ref、eq_ref、const、system、NULL\n```\n\n- ALL：代表扫完全表所有数据才找到目标，性能肯定是最差的\n- index：表示查完了所有的索引才找到目标，因为索引文件肯定比全表数据小，所以速度会快一些\n- range：表示索引范围扫描，没有扫全部的索引，而是扫了一部分，自然比 index 性能好\n- ref：表示使用了非唯一索引精确匹配到了某一行，这个比 range 更精准\n- eq_ref：表示使用了唯一索引精准匹配到了某一行，唯一索引自然比非唯一要找得更快\n- const/system：表示单表里最多一行匹配查询条件，比如对主键的查询\n- NULL：表示不用访问表或索引就能取到数据\n\n## show profiles\n\n除了分析语句索引使用情况外，profile 可以清楚地让我们了解语句执行的过程。监测 profile 开关的语句是\n\n```shell\nmysql> select @@profiling;\n+-------------+\n| @@profiling |\n+-------------+\n|           0 |\n+-------------+\n```\n\n可以通过 set 临时打开开关\n\n```shell\nmysql > set profiling=1;\n```\n\n打开收随便执行一条语句\n\n```shell\nmysql > select * from vote_record limit 100;\n```\n\n再通过 show profiles 就可以看到刚才执行的记录。\n\n```shell\nmysql> show profiles;\n+----------+------------+-------------------------------------+\n| Query_ID | Duration   | Query                               |\n+----------+------------+-------------------------------------+\n|        1 | 0.00086200 | select * from vote_record limit 100 |\n+----------+------------+-------------------------------------+\n1 row in set, 1 warning (0.00 sec)\n```\n\n一共三列，分别代表执行的标识、执行时间、执行语句，除此之外还可以指定查询某个 ID 的详情。\n\n```shell\nmysql> show profile for query 1;\n+----------------------+----------+\n| Status               | Duration |\n+----------------------+----------+\n| starting             | 0.000076 |\n| checking permissions | 0.000021 |\n| Opening tables       | 0.000067 |\n| init                 | 0.000023 |\n| System lock          | 0.000020 |\n| optimizing           | 0.000014 |\n| statistics           | 0.000026 |\n| preparing            | 0.000021 |\n| executing            | 0.000013 |\n| Sending data         | 0.000340 |\n| end                  | 0.000049 |\n| query end            | 0.000038 |\n| closing tables       | 0.000023 |\n| freeing items        | 0.000060 |\n| cleaning up          | 0.000072 |\n+----------------------+----------+\n15 rows in set, 1 warning (0.00 sec)\n```\n\n可以清晰地看出每个阶段执行耗时，实际并不止可以看阶段耗时，还能展示 CPU、IO、内存等信息，感兴趣可以自行尝试。\n\n```shell\nmysql> show profile cpu, block io, memory for query 1;\n+----------------------+----------+----------+------------+--------------+---------------+\n| Status               | Duration | CPU_user | CPU_system | Block_ops_in | Block_ops_out |\n+----------------------+----------+----------+------------+--------------+---------------+\n| starting             | 0.000076 | 0.000000 |   0.000000 |            0 |             0 |\n| checking permissions | 0.000021 | 0.000000 |   0.000000 |            0 |             0 |\n| Opening tables       | 0.000067 | 0.000000 |   0.000000 |            0 |             0 |\n| init                 | 0.000023 | 0.000000 |   0.000000 |            0 |             0 |\n| System lock          | 0.000020 | 0.000000 |   0.000000 |            0 |             0 |\n| optimizing           | 0.000014 | 0.000000 |   0.000000 |            0 |             0 |\n| statistics           | 0.000026 | 0.000000 |   0.000000 |            0 |             0 |\n| preparing            | 0.000021 | 0.000000 |   0.000000 |            0 |             0 |\n| executing            | 0.000013 | 0.000000 |   0.000000 |            0 |             0 |\n| Sending data         | 0.000340 | 0.000000 |   0.000000 |            0 |             0 |\n| end                  | 0.000049 | 0.000000 |   0.000000 |            0 |             0 |\n| query end            | 0.000038 | 0.000000 |   0.000000 |            0 |             0 |\n| closing tables       | 0.000023 | 0.000000 |   0.000000 |            0 |             0 |\n| freeing items        | 0.000060 | 0.000000 |   0.000000 |            0 |             0 |\n| cleaning up          | 0.000072 | 0.000000 |   0.000000 |            0 |             0 |\n+----------------------+----------+----------+------------+--------------+---------------+\n15 rows in set, 1 warning (0.01 sec)\n```\n\n\n\n\n\n","slug":"database/mysql-performance","published":1,"updated":"2020-05-07T16:19:29.263Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9y8cr1200038yp49xit8tgg","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>众所周知，Web API 响应慢可能包含很多方面的原因，比如第三方接口超时、DNS 解析慢、API 响应内容过大、网络带宽不够、硬件配置不足、网关层出现问题等，当然最常见且容易出问题的地方当属数据库层的使用，所以我们今天的主题只围绕数据库性能调优来展开。</p>\n<h2 id=\"show-status\"><a href=\"#show-status\" class=\"headerlink\" title=\"show status\"></a>show status</h2><p>当没有精确到具体 SQL 语句，而是觉得系统整体缓慢时，除了使用 vmstat 或 iostat 查看 CPU、进程、I/O 设备的使用情况外，还可以通过 show status 命令查询 mysql 整体执行频率。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; show status;</span><br></pre></td></tr></table></figure>\n\n<p>进入 mysql 终端输入 show status 指令可以看到很多选项，比如语句的执行次数、连接数、锁表次数以及慢查询次数等等，但是我相信你想看的更多的是从上次 mysql 启动到现在的执行频率，所以只需要加上 global 就可以了，它会查询自服务启动后的统计结果，若不加，默认执行的是 show session status，意味着只查询本次连接内的统计结果，说实话我并没有想到它的应用场景，了解真相的同学可以留言给我。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; show global status;</span><br></pre></td></tr></table></figure>\n\n<p>常见的变量有</p>\n<ul>\n<li>Com_select：执行 Select 操作的次数</li>\n<li>Com_update：执行 Update 操作的次数</li>\n<li>Com_insert：执行 Insert 操作的次数</li>\n<li>Com_delete: 执行 Delete 操作的次数</li>\n<li>Com_rollback：回滚次数</li>\n<li>Com_commit：提交次数</li>\n<li>Com_*：Com 开头的都是数据库相关操作的次数</li>\n<li>Innodb_row_lock_time：行锁定花费的总时间，单位毫秒</li>\n<li>Innodb_row_lock_time_avg：行锁定平均花费时间，单位毫秒</li>\n<li>Max_used_connections：服务器启动后使用的最大连接数量</li>\n<li>Uptime：服务器运行时间，单位秒</li>\n<li>Threads_connected：当前打开的连接数量</li>\n<li>Connections：试图连接 MySQL 服务器的数量，无论成功与否</li>\n<li>Aborted_connects：试图连接到服务器但失败的数量</li>\n</ul>\n<p>从 show status 能看出什么问题呢，这个仁者见仁智者见智了，比如回滚次数 Com_rollback 非常多，那意味着代码一定存在问题，连接失败次数 Aborted_connects 过多可能是因为代码中没有及时或正确的关闭 mysql 连接等。</p>\n<h2 id=\"慢查询\"><a href=\"#慢查询\" class=\"headerlink\" title=\"慢查询\"></a>慢查询</h2><p>show status 虽然可以查询系统整体的运行概况，但是无法精准定位到具体的 SQL 语句，哪个语句执行慢实际上是记录在 mysql 中的，当然它也有自己的开关，可以通过 show varirables 命令查看。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; show variables like '%slow_query_log%';</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------------------+--------------------------------------+</span><br><span class=\"line\">| Variable_name       | Value                                |</span><br><span class=\"line\">+---------------------+--------------------------------------+</span><br><span class=\"line\">| slow_query_log      | OFF                                  |</span><br><span class=\"line\">| slow_query_log_file | /var/lib/mysql/400d5ed8dd00-slow.log |</span><br><span class=\"line\">+---------------------+--------------------------------------+</span><br><span class=\"line\">2 rows in set (0.06 sec)</span><br></pre></td></tr></table></figure>\n\n<p>slow_query_log 意为开关，slow_query_log_file 是慢查询所在路径，开关可以通过 set 命令控制，但是只针对当前数据库生效，MySQL 重启会失效，如果要永久生效，必须修改 mysql 的配置文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; set global slow_query_log=1;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> /etc/mysql/mysql.conf.d/mysqld.cnf</span></span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">......</span><br><span class=\"line\">slow_query_log=1</span><br><span class=\"line\">slow_query_log_file=/tmp/slow.log</span><br><span class=\"line\">long_query_time=1</span><br></pre></td></tr></table></figure>\n\n<p>定义“慢”的权利是掌握在用户手里的，可以通过 long_query_time 设置几秒以上才算慢，慢查询文件格式如下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Time: 2020-04-28T07:33:20.364348Z</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> User@Host: root[root] @  [172.17.0.1]  Id:     2</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Query_time: 1.848906  Lock_time: 0.000206 Rows_sent: 0  Rows_examined: 2219780</span></span><br><span class=\"line\">use gorm;</span><br><span class=\"line\">SET timestamp=1588059200;</span><br><span class=\"line\">select * from vote_record where create_time like '%abc%';</span><br></pre></td></tr></table></figure>\n\n<p>mysql 会将所有执行超过 long_query_time 的语句记录下来，除此之外还包括时间戳、连接信息、执行时间等。</p>\n<h2 id=\"show-processlist\"><a href=\"#show-processlist\" class=\"headerlink\" title=\"show processlist\"></a>show processlist</h2><p>慢查询已经满足了绝大部分需求，但是只有在执行完毕的语句才会被记录，正在执行中的语句可以通过 show processlist 查看，我们执行 select sleep(5) 来做个测试。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; select sleep(5);</span><br><span class=\"line\">mysql &gt; show processlist;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+----+------+------------------+------+---------+------+------------+------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">| Id | User | Host             | db   | Command | Time | State      | Info                                                                                                 |</span><br><span class=\"line\">+----+------+------------------+------+---------+------+------------+------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">|  2 | root | 172.17.0.1:53890 | gorm | Sleep   |   84 |            | NULL                                                                                                 |</span><br><span class=\"line\">|  3 | root | 172.17.0.1:53892 | gorm | Query   |    2 | User sleep | select SLEEP(5)                                                                                      |</span><br><span class=\"line\">|  4 | root | 172.17.0.1:53894 | gorm | Sleep   |  106 |            | NULL                                                                                                 |</span><br><span class=\"line\">|  5 | root | 172.17.0.1:53896 | NULL | Sleep   |  106 |            | NULL                                                                                                 |</span><br><span class=\"line\">|  6 | root | localhost        | NULL | Query   |    0 | starting   | show processlist                                                                                     |</span><br><span class=\"line\">+----+------+------------------+------+---------+------+------------+------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>show processlist 可以展示出正在运行的线程，除了 root 用户可以看到所有的线程外，其他用户只能看到自己执行的线程，字段解释如下。</p>\n<ul>\n<li>Id：线程的唯一标识</li>\n<li>User：启动该线程的用户</li>\n<li>Host：发出执行请求的客户端 IP 和端口号</li>\n<li>db：在哪个数据库中执行的</li>\n<li>Command：线程正在执行的命令，下文解释</li>\n<li>Time：在当前状态待了多久时间</li>\n<li>State：线程状态</li>\n<li>Info：线程执行的语句，默认显示前 100 个字符，查看全部字符执行 show full processlist</li>\n</ul>\n<p>Command 字段包含如下命令（部分展示）</p>\n<ul>\n<li>Query：正在执行一个语句</li>\n<li>Quit：该线程正在推出</li>\n<li>Shutdown：正在关闭服务器</li>\n<li>Sleep：正在等待客户端发送请求语句</li>\n<li>Debug：线程正在生成调试信息</li>\n<li>Binlog Dump：正在将二进制日志同步到从节点</li>\n<li>……</li>\n</ul>\n<h2 id=\"执行计划-explain\"><a href=\"#执行计划-explain\" class=\"headerlink\" title=\"执行计划 explain\"></a>执行计划 explain</h2><p>当定位到慢语句后，接下来需要分析语句，我们常用 explain 对语句分析，只需在语句前加上 explain 即可。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; explain select * from vote_record where create_time like '%ssssss%';</span><br></pre></td></tr></table></figure>\n\n<p>explain 会大致评估语句的执行情况，有没有用到索引、查询了多少行等，字段如下。</p>\n<ul>\n<li>id：执行编号，在没有子查询的情况下默认为 1 </li>\n<li>select_type：查询类型，常见的有 SIMPLE、PRIMARY、UNION、SUBQUERY等</li>\n<li>table：表示正在访问哪个表</li>\n<li>type：表示访问类型，决定通过什么方式访问表，下文详解</li>\n<li>possible_keys：可能使用到的索引</li>\n<li>key：表示实际采用的哪个索引</li>\n<li>key_len：索引里使用的字节数</li>\n<li>ref：哪些列或常量被用于查找索引列上的值</li>\n<li>rows：估算出所要检索的行数</li>\n<li>extra：执行情况的说明描述，包含了不适合在其它列显示，但是又很重要的信息</li>\n</ul>\n<h3 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h3><p>不同的访问类型对应性能不一，常见的访问类型有，性能由低到高排序</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALL、index、range、ref、eq_ref、const、system、NULL</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ALL：代表扫完全表所有数据才找到目标，性能肯定是最差的</li>\n<li>index：表示查完了所有的索引才找到目标，因为索引文件肯定比全表数据小，所以速度会快一些</li>\n<li>range：表示索引范围扫描，没有扫全部的索引，而是扫了一部分，自然比 index 性能好</li>\n<li>ref：表示使用了非唯一索引精确匹配到了某一行，这个比 range 更精准</li>\n<li>eq_ref：表示使用了唯一索引精准匹配到了某一行，唯一索引自然比非唯一要找得更快</li>\n<li>const/system：表示单表里最多一行匹配查询条件，比如对主键的查询</li>\n<li>NULL：表示不用访问表或索引就能取到数据</li>\n</ul>\n<h2 id=\"show-profiles\"><a href=\"#show-profiles\" class=\"headerlink\" title=\"show profiles\"></a>show profiles</h2><p>除了分析语句索引使用情况外，profile 可以清楚地让我们了解语句执行的过程。监测 profile 开关的语句是</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> select @@profiling;</span></span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| @@profiling |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">|           0 |</span><br><span class=\"line\">+-------------+</span><br></pre></td></tr></table></figure>\n\n<p>可以通过 set 临时打开开关</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; set profiling=1;</span><br></pre></td></tr></table></figure>\n\n<p>打开收随便执行一条语句</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; select * from vote_record limit 100;</span><br></pre></td></tr></table></figure>\n\n<p>再通过 show profiles 就可以看到刚才执行的记录。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> show profiles;</span></span><br><span class=\"line\">+----------+------------+-------------------------------------+</span><br><span class=\"line\">| Query_ID | Duration   | Query                               |</span><br><span class=\"line\">+----------+------------+-------------------------------------+</span><br><span class=\"line\">|        1 | 0.00086200 | select * from vote_record limit 100 |</span><br><span class=\"line\">+----------+------------+-------------------------------------+</span><br><span class=\"line\">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>一共三列，分别代表执行的标识、执行时间、执行语句，除此之外还可以指定查询某个 ID 的详情。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> show profile <span class=\"keyword\">for</span> query 1;</span></span><br><span class=\"line\">+----------------------+----------+</span><br><span class=\"line\">| Status               | Duration |</span><br><span class=\"line\">+----------------------+----------+</span><br><span class=\"line\">| starting             | 0.000076 |</span><br><span class=\"line\">| checking permissions | 0.000021 |</span><br><span class=\"line\">| Opening tables       | 0.000067 |</span><br><span class=\"line\">| init                 | 0.000023 |</span><br><span class=\"line\">| System lock          | 0.000020 |</span><br><span class=\"line\">| optimizing           | 0.000014 |</span><br><span class=\"line\">| statistics           | 0.000026 |</span><br><span class=\"line\">| preparing            | 0.000021 |</span><br><span class=\"line\">| executing            | 0.000013 |</span><br><span class=\"line\">| Sending data         | 0.000340 |</span><br><span class=\"line\">| end                  | 0.000049 |</span><br><span class=\"line\">| query end            | 0.000038 |</span><br><span class=\"line\">| closing tables       | 0.000023 |</span><br><span class=\"line\">| freeing items        | 0.000060 |</span><br><span class=\"line\">| cleaning up          | 0.000072 |</span><br><span class=\"line\">+----------------------+----------+</span><br><span class=\"line\">15 rows in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>可以清晰地看出每个阶段执行耗时，实际并不止可以看阶段耗时，还能展示 CPU、IO、内存等信息，感兴趣可以自行尝试。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> show profile cpu, block io, memory <span class=\"keyword\">for</span> query 1;</span></span><br><span class=\"line\">+----------------------+----------+----------+------------+--------------+---------------+</span><br><span class=\"line\">| Status               | Duration | CPU_user | CPU_system | Block_ops_in | Block_ops_out |</span><br><span class=\"line\">+----------------------+----------+----------+------------+--------------+---------------+</span><br><span class=\"line\">| starting             | 0.000076 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| checking permissions | 0.000021 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| Opening tables       | 0.000067 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| init                 | 0.000023 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| System lock          | 0.000020 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| optimizing           | 0.000014 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| statistics           | 0.000026 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| preparing            | 0.000021 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| executing            | 0.000013 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| Sending data         | 0.000340 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| end                  | 0.000049 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| query end            | 0.000038 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| closing tables       | 0.000023 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| freeing items        | 0.000060 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| cleaning up          | 0.000072 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">+----------------------+----------+----------+------------+--------------+---------------+</span><br><span class=\"line\">15 rows in set, 1 warning (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>众所周知，Web API 响应慢可能包含很多方面的原因，比如第三方接口超时、DNS 解析慢、API 响应内容过大、网络带宽不够、硬件配置不足、网关层出现问题等，当然最常见且容易出问题的地方当属数据库层的使用，所以我们今天的主题只围绕数据库性能调优来展开。</p>\n<h2 id=\"show-status\"><a href=\"#show-status\" class=\"headerlink\" title=\"show status\"></a>show status</h2><p>当没有精确到具体 SQL 语句，而是觉得系统整体缓慢时，除了使用 vmstat 或 iostat 查看 CPU、进程、I/O 设备的使用情况外，还可以通过 show status 命令查询 mysql 整体执行频率。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; show status;</span><br></pre></td></tr></table></figure>\n\n<p>进入 mysql 终端输入 show status 指令可以看到很多选项，比如语句的执行次数、连接数、锁表次数以及慢查询次数等等，但是我相信你想看的更多的是从上次 mysql 启动到现在的执行频率，所以只需要加上 global 就可以了，它会查询自服务启动后的统计结果，若不加，默认执行的是 show session status，意味着只查询本次连接内的统计结果，说实话我并没有想到它的应用场景，了解真相的同学可以留言给我。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; show global status;</span><br></pre></td></tr></table></figure>\n\n<p>常见的变量有</p>\n<ul>\n<li>Com_select：执行 Select 操作的次数</li>\n<li>Com_update：执行 Update 操作的次数</li>\n<li>Com_insert：执行 Insert 操作的次数</li>\n<li>Com_delete: 执行 Delete 操作的次数</li>\n<li>Com_rollback：回滚次数</li>\n<li>Com_commit：提交次数</li>\n<li>Com_*：Com 开头的都是数据库相关操作的次数</li>\n<li>Innodb_row_lock_time：行锁定花费的总时间，单位毫秒</li>\n<li>Innodb_row_lock_time_avg：行锁定平均花费时间，单位毫秒</li>\n<li>Max_used_connections：服务器启动后使用的最大连接数量</li>\n<li>Uptime：服务器运行时间，单位秒</li>\n<li>Threads_connected：当前打开的连接数量</li>\n<li>Connections：试图连接 MySQL 服务器的数量，无论成功与否</li>\n<li>Aborted_connects：试图连接到服务器但失败的数量</li>\n</ul>\n<p>从 show status 能看出什么问题呢，这个仁者见仁智者见智了，比如回滚次数 Com_rollback 非常多，那意味着代码一定存在问题，连接失败次数 Aborted_connects 过多可能是因为代码中没有及时或正确的关闭 mysql 连接等。</p>\n<h2 id=\"慢查询\"><a href=\"#慢查询\" class=\"headerlink\" title=\"慢查询\"></a>慢查询</h2><p>show status 虽然可以查询系统整体的运行概况，但是无法精准定位到具体的 SQL 语句，哪个语句执行慢实际上是记录在 mysql 中的，当然它也有自己的开关，可以通过 show varirables 命令查看。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; show variables like '%slow_query_log%';</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------------------+--------------------------------------+</span><br><span class=\"line\">| Variable_name       | Value                                |</span><br><span class=\"line\">+---------------------+--------------------------------------+</span><br><span class=\"line\">| slow_query_log      | OFF                                  |</span><br><span class=\"line\">| slow_query_log_file | /var/lib/mysql/400d5ed8dd00-slow.log |</span><br><span class=\"line\">+---------------------+--------------------------------------+</span><br><span class=\"line\">2 rows in set (0.06 sec)</span><br></pre></td></tr></table></figure>\n\n<p>slow_query_log 意为开关，slow_query_log_file 是慢查询所在路径，开关可以通过 set 命令控制，但是只针对当前数据库生效，MySQL 重启会失效，如果要永久生效，必须修改 mysql 的配置文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; set global slow_query_log=1;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> /etc/mysql/mysql.conf.d/mysqld.cnf</span></span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">......</span><br><span class=\"line\">slow_query_log=1</span><br><span class=\"line\">slow_query_log_file=/tmp/slow.log</span><br><span class=\"line\">long_query_time=1</span><br></pre></td></tr></table></figure>\n\n<p>定义“慢”的权利是掌握在用户手里的，可以通过 long_query_time 设置几秒以上才算慢，慢查询文件格式如下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Time: 2020-04-28T07:33:20.364348Z</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> User@Host: root[root] @  [172.17.0.1]  Id:     2</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Query_time: 1.848906  Lock_time: 0.000206 Rows_sent: 0  Rows_examined: 2219780</span></span><br><span class=\"line\">use gorm;</span><br><span class=\"line\">SET timestamp=1588059200;</span><br><span class=\"line\">select * from vote_record where create_time like '%abc%';</span><br></pre></td></tr></table></figure>\n\n<p>mysql 会将所有执行超过 long_query_time 的语句记录下来，除此之外还包括时间戳、连接信息、执行时间等。</p>\n<h2 id=\"show-processlist\"><a href=\"#show-processlist\" class=\"headerlink\" title=\"show processlist\"></a>show processlist</h2><p>慢查询已经满足了绝大部分需求，但是只有在执行完毕的语句才会被记录，正在执行中的语句可以通过 show processlist 查看，我们执行 select sleep(5) 来做个测试。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; select sleep(5);</span><br><span class=\"line\">mysql &gt; show processlist;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+----+------+------------------+------+---------+------+------------+------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">| Id | User | Host             | db   | Command | Time | State      | Info                                                                                                 |</span><br><span class=\"line\">+----+------+------------------+------+---------+------+------------+------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">|  2 | root | 172.17.0.1:53890 | gorm | Sleep   |   84 |            | NULL                                                                                                 |</span><br><span class=\"line\">|  3 | root | 172.17.0.1:53892 | gorm | Query   |    2 | User sleep | select SLEEP(5)                                                                                      |</span><br><span class=\"line\">|  4 | root | 172.17.0.1:53894 | gorm | Sleep   |  106 |            | NULL                                                                                                 |</span><br><span class=\"line\">|  5 | root | 172.17.0.1:53896 | NULL | Sleep   |  106 |            | NULL                                                                                                 |</span><br><span class=\"line\">|  6 | root | localhost        | NULL | Query   |    0 | starting   | show processlist                                                                                     |</span><br><span class=\"line\">+----+------+------------------+------+---------+------+------------+------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>show processlist 可以展示出正在运行的线程，除了 root 用户可以看到所有的线程外，其他用户只能看到自己执行的线程，字段解释如下。</p>\n<ul>\n<li>Id：线程的唯一标识</li>\n<li>User：启动该线程的用户</li>\n<li>Host：发出执行请求的客户端 IP 和端口号</li>\n<li>db：在哪个数据库中执行的</li>\n<li>Command：线程正在执行的命令，下文解释</li>\n<li>Time：在当前状态待了多久时间</li>\n<li>State：线程状态</li>\n<li>Info：线程执行的语句，默认显示前 100 个字符，查看全部字符执行 show full processlist</li>\n</ul>\n<p>Command 字段包含如下命令（部分展示）</p>\n<ul>\n<li>Query：正在执行一个语句</li>\n<li>Quit：该线程正在推出</li>\n<li>Shutdown：正在关闭服务器</li>\n<li>Sleep：正在等待客户端发送请求语句</li>\n<li>Debug：线程正在生成调试信息</li>\n<li>Binlog Dump：正在将二进制日志同步到从节点</li>\n<li>……</li>\n</ul>\n<h2 id=\"执行计划-explain\"><a href=\"#执行计划-explain\" class=\"headerlink\" title=\"执行计划 explain\"></a>执行计划 explain</h2><p>当定位到慢语句后，接下来需要分析语句，我们常用 explain 对语句分析，只需在语句前加上 explain 即可。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; explain select * from vote_record where create_time like '%ssssss%';</span><br></pre></td></tr></table></figure>\n\n<p>explain 会大致评估语句的执行情况，有没有用到索引、查询了多少行等，字段如下。</p>\n<ul>\n<li>id：执行编号，在没有子查询的情况下默认为 1 </li>\n<li>select_type：查询类型，常见的有 SIMPLE、PRIMARY、UNION、SUBQUERY等</li>\n<li>table：表示正在访问哪个表</li>\n<li>type：表示访问类型，决定通过什么方式访问表，下文详解</li>\n<li>possible_keys：可能使用到的索引</li>\n<li>key：表示实际采用的哪个索引</li>\n<li>key_len：索引里使用的字节数</li>\n<li>ref：哪些列或常量被用于查找索引列上的值</li>\n<li>rows：估算出所要检索的行数</li>\n<li>extra：执行情况的说明描述，包含了不适合在其它列显示，但是又很重要的信息</li>\n</ul>\n<h3 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h3><p>不同的访问类型对应性能不一，常见的访问类型有，性能由低到高排序</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALL、index、range、ref、eq_ref、const、system、NULL</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ALL：代表扫完全表所有数据才找到目标，性能肯定是最差的</li>\n<li>index：表示查完了所有的索引才找到目标，因为索引文件肯定比全表数据小，所以速度会快一些</li>\n<li>range：表示索引范围扫描，没有扫全部的索引，而是扫了一部分，自然比 index 性能好</li>\n<li>ref：表示使用了非唯一索引精确匹配到了某一行，这个比 range 更精准</li>\n<li>eq_ref：表示使用了唯一索引精准匹配到了某一行，唯一索引自然比非唯一要找得更快</li>\n<li>const/system：表示单表里最多一行匹配查询条件，比如对主键的查询</li>\n<li>NULL：表示不用访问表或索引就能取到数据</li>\n</ul>\n<h2 id=\"show-profiles\"><a href=\"#show-profiles\" class=\"headerlink\" title=\"show profiles\"></a>show profiles</h2><p>除了分析语句索引使用情况外，profile 可以清楚地让我们了解语句执行的过程。监测 profile 开关的语句是</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> select @@profiling;</span></span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| @@profiling |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">|           0 |</span><br><span class=\"line\">+-------------+</span><br></pre></td></tr></table></figure>\n\n<p>可以通过 set 临时打开开关</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; set profiling=1;</span><br></pre></td></tr></table></figure>\n\n<p>打开收随便执行一条语句</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; select * from vote_record limit 100;</span><br></pre></td></tr></table></figure>\n\n<p>再通过 show profiles 就可以看到刚才执行的记录。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> show profiles;</span></span><br><span class=\"line\">+----------+------------+-------------------------------------+</span><br><span class=\"line\">| Query_ID | Duration   | Query                               |</span><br><span class=\"line\">+----------+------------+-------------------------------------+</span><br><span class=\"line\">|        1 | 0.00086200 | select * from vote_record limit 100 |</span><br><span class=\"line\">+----------+------------+-------------------------------------+</span><br><span class=\"line\">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>一共三列，分别代表执行的标识、执行时间、执行语句，除此之外还可以指定查询某个 ID 的详情。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> show profile <span class=\"keyword\">for</span> query 1;</span></span><br><span class=\"line\">+----------------------+----------+</span><br><span class=\"line\">| Status               | Duration |</span><br><span class=\"line\">+----------------------+----------+</span><br><span class=\"line\">| starting             | 0.000076 |</span><br><span class=\"line\">| checking permissions | 0.000021 |</span><br><span class=\"line\">| Opening tables       | 0.000067 |</span><br><span class=\"line\">| init                 | 0.000023 |</span><br><span class=\"line\">| System lock          | 0.000020 |</span><br><span class=\"line\">| optimizing           | 0.000014 |</span><br><span class=\"line\">| statistics           | 0.000026 |</span><br><span class=\"line\">| preparing            | 0.000021 |</span><br><span class=\"line\">| executing            | 0.000013 |</span><br><span class=\"line\">| Sending data         | 0.000340 |</span><br><span class=\"line\">| end                  | 0.000049 |</span><br><span class=\"line\">| query end            | 0.000038 |</span><br><span class=\"line\">| closing tables       | 0.000023 |</span><br><span class=\"line\">| freeing items        | 0.000060 |</span><br><span class=\"line\">| cleaning up          | 0.000072 |</span><br><span class=\"line\">+----------------------+----------+</span><br><span class=\"line\">15 rows in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>可以清晰地看出每个阶段执行耗时，实际并不止可以看阶段耗时，还能展示 CPU、IO、内存等信息，感兴趣可以自行尝试。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> show profile cpu, block io, memory <span class=\"keyword\">for</span> query 1;</span></span><br><span class=\"line\">+----------------------+----------+----------+------------+--------------+---------------+</span><br><span class=\"line\">| Status               | Duration | CPU_user | CPU_system | Block_ops_in | Block_ops_out |</span><br><span class=\"line\">+----------------------+----------+----------+------------+--------------+---------------+</span><br><span class=\"line\">| starting             | 0.000076 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| checking permissions | 0.000021 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| Opening tables       | 0.000067 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| init                 | 0.000023 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| System lock          | 0.000020 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| optimizing           | 0.000014 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| statistics           | 0.000026 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| preparing            | 0.000021 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| executing            | 0.000013 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| Sending data         | 0.000340 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| end                  | 0.000049 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| query end            | 0.000038 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| closing tables       | 0.000023 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| freeing items        | 0.000060 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">| cleaning up          | 0.000072 | 0.000000 |   0.000000 |            0 |             0 |</span><br><span class=\"line\">+----------------------+----------+----------+------------+--------------+---------------+</span><br><span class=\"line\">15 rows in set, 1 warning (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n"},{"title":"如何用Github钩子做自动部署","date":"2020-04-22T02:27:34.000Z","_content":"\n最近机缘巧合的购置了域名和服务器，不用实在是浪费，再加上一直没有属于自己的个人网站，所以打算用hexo在服务器上玩一下，这样也就不用再纠结用Github pages还是Gitee pages了。当然，今天的主题并不是博客搭建，而是如何利用Github的钩子，将博客代码部署到服务器上。\n\n毕竟Github的钩子已经历史悠久了，网上有很多开源项目可以拿来用，所以我并没有造轮子，而是去找了5K star的开源Go项目`webhook`，这个工具的作用是接收Github仓库的变动通知，然后调用你配置好的shell脚本，脚本可以写上代码拉取的命令或是编译的操作等，具体根据个人需求而定。简而言之，它只起着拉通Github与你服务器的作用。\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587526481705.png)\n\n### webhook工具安装\n\n因为webhook是Go语言开发的，所以要先安装Go语言。\n\n```shell\nyum install -y golang\n```\n\n然后就可以用go命令安装webhook了。\n\n```shell\ngo get github.com/adnanh/webhook\n```\n\n命令安装位置可以通过`go env`查看，GOPATH就是命令安装路径，比如我的命令就安装在/root/go/bin/webhook。\n\n```shell\ngo env\n...\nGOOS=\"linux\"\nGOPATH=\"/root/go\"\n...\n```\n\n### 生成ssh key\n\n在编写脚本之前确保服务器有权限拉取github代码，如果已经做了配置可跳过本节去看[部署脚本编写](#部署脚本编写)。ssh key是代码托管平台（github、gitee、coding、gitlab等）鉴别你是否有权拉取代码的身份标识，生成只需一行命令和一路回车就行了。\n\n```shell\nssh-keygen\n\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_rsa.\nYour public key has been saved in /root/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:M6sCf/J/hOu3zLxMkFUVmv3iWIa30CfbxiWqmWCt1YE root@iZwz96y36tk2ecnykzituxZ\nThe key's randomart image is:\n+---[RSA 2048]----+\n|            ..o. |\n|           . o   |\n|          . o    |\n|       . o .     |\n|      E S.  .    |\n|  .  . ..Oo ..   |\n|   oo o ==Boo .  |\n|   .++.+o#== .   |\n|    .=*+=+@o     |\n+----[SHA256]-----+\n```\n\n生成后可通过`cat ~/.ssh/id_rsa.pub`命令查看，最后将key加入github即可，加法不再赘述，请自行谷歌。\n\n```shell\ncat ~/.ssh/id_rsa.pub\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQHBAAABAQCv7LGVJUFdcLL+HZyRFTQIQCdre61Gch76lDVpmWSX9BGGRU3iQS7EU5qApFn1VSvt+yf4rMt2LEkuxGCm1wIyBKZ6LYDViZBeTAfx4BcM1mcpxOX6I/+r07mQ4llTz+poQB1Zp9Y60uk0tbGOVWlCoDBEvf9qeEnQ0qEczEkv7wcawV6pVhlXjFKZgq0EOQbCYoWMvPUl+dwDbTcl/h+7At1nlgfF7IuRHlKf18qvgnTRT2wpiuz4pWdoAi8LcY1JiR1z5OB0oCJ2euhyDND39G2NxZRS1FIVdgCEvioHtdoHOSoWBlcSj0fLFSnscBfRBrCd7yhOP7fFKfrowHMj root@iZwz96y36tk2ecnykzituxZ\n```\n\n### 部署脚本编写\n\n该shell脚本的主要目的是从github拉取代码，脚本内容很简单，只做了目录的简要判断，代码目录存在则更新，不存在则克隆仓库，工作目录和仓库名称、地址请换成自己的。\n\n```shell\n#!/bin/bash\n\ncd /home/www/website\n\nif [ ! -d \"go-home\" ]; then\n  git clone https://github.com/pingyeaa/go-home.git\nfi\n\ncd go-home\ngit pull\n```\n\n### webhook配置与启动\n\n编写配置文件hooks.json，格式如下。\n\n```json\n[\n  {\n    \"id\": \"deploy-webhook\",\n    \"execute-command\": \"deploy.sh\",\n    \"command-working-directory\": \"/home\"\n  }\n]\n```\n\n- id：钩子的id，可自定义\n- execute-command：要执行的脚本名，就是刚才编写的部署脚本\n- command-working-directory：脚本所在目录\n\n完成后通过webhook命令启动，可以看到id为deploy-webhook的配置已经加载了，我们需要注意的是监听的端口和路径，等下要用到。\n\n```shell\n/root/go/bin/webhook -hooks hooks.json -verbose\n\n[webhook] 2020/04/22 15:18:22 version 2.6.11 starting\n[webhook] 2020/04/22 15:18:22 setting up os signal watcher\n[webhook] 2020/04/22 15:18:22 attempting to load hooks from hooks.json\n[webhook] 2020/04/22 15:18:22 found 1 hook(s) in file\n[webhook] 2020/04/22 15:18:22   loaded: deploy-webhook\n[webhook] 2020/04/22 15:18:22 serving hooks on http://0.0.0.0:9000/hooks/{id}\n[webhook] 2020/04/22 15:18:22 os signal watcher ready\n```\n\n```shell\nhttp://0.0.0.0:9000/hooks/{id}\n```\n\n### Github Webhooks配置\n\n现在服务器已经启动了webhook程序监听9000端口，接下来仅需要告诉Github这个地址和端口就好了。\n\n打开仓库设置页，添加webhook。\n\n![](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587523289550.png)\n\n配置webhooks，Payload URL就是要通知的地址，把刚才打印出的端口和路径填上即可，其他默认。\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541102651.png)\n\n现在可以提交代码测试了，如果推送失败Github中会有错误提示，同样的，成功不仅在Github中能看到，服务器的打印日志也有记录。\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541394355.png)\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541482026.png)","source":"_posts/other/github-webhooks.md","raw":"---\ntitle: 如何用Github钩子做自动部署\ndate: 2020-04-22 10:27:34\ntags: \n- github\n- webhooks\n- 钩子\ncategories: \n- 杂谈\n---\n\n最近机缘巧合的购置了域名和服务器，不用实在是浪费，再加上一直没有属于自己的个人网站，所以打算用hexo在服务器上玩一下，这样也就不用再纠结用Github pages还是Gitee pages了。当然，今天的主题并不是博客搭建，而是如何利用Github的钩子，将博客代码部署到服务器上。\n\n毕竟Github的钩子已经历史悠久了，网上有很多开源项目可以拿来用，所以我并没有造轮子，而是去找了5K star的开源Go项目`webhook`，这个工具的作用是接收Github仓库的变动通知，然后调用你配置好的shell脚本，脚本可以写上代码拉取的命令或是编译的操作等，具体根据个人需求而定。简而言之，它只起着拉通Github与你服务器的作用。\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587526481705.png)\n\n### webhook工具安装\n\n因为webhook是Go语言开发的，所以要先安装Go语言。\n\n```shell\nyum install -y golang\n```\n\n然后就可以用go命令安装webhook了。\n\n```shell\ngo get github.com/adnanh/webhook\n```\n\n命令安装位置可以通过`go env`查看，GOPATH就是命令安装路径，比如我的命令就安装在/root/go/bin/webhook。\n\n```shell\ngo env\n...\nGOOS=\"linux\"\nGOPATH=\"/root/go\"\n...\n```\n\n### 生成ssh key\n\n在编写脚本之前确保服务器有权限拉取github代码，如果已经做了配置可跳过本节去看[部署脚本编写](#部署脚本编写)。ssh key是代码托管平台（github、gitee、coding、gitlab等）鉴别你是否有权拉取代码的身份标识，生成只需一行命令和一路回车就行了。\n\n```shell\nssh-keygen\n\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_rsa.\nYour public key has been saved in /root/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:M6sCf/J/hOu3zLxMkFUVmv3iWIa30CfbxiWqmWCt1YE root@iZwz96y36tk2ecnykzituxZ\nThe key's randomart image is:\n+---[RSA 2048]----+\n|            ..o. |\n|           . o   |\n|          . o    |\n|       . o .     |\n|      E S.  .    |\n|  .  . ..Oo ..   |\n|   oo o ==Boo .  |\n|   .++.+o#== .   |\n|    .=*+=+@o     |\n+----[SHA256]-----+\n```\n\n生成后可通过`cat ~/.ssh/id_rsa.pub`命令查看，最后将key加入github即可，加法不再赘述，请自行谷歌。\n\n```shell\ncat ~/.ssh/id_rsa.pub\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQHBAAABAQCv7LGVJUFdcLL+HZyRFTQIQCdre61Gch76lDVpmWSX9BGGRU3iQS7EU5qApFn1VSvt+yf4rMt2LEkuxGCm1wIyBKZ6LYDViZBeTAfx4BcM1mcpxOX6I/+r07mQ4llTz+poQB1Zp9Y60uk0tbGOVWlCoDBEvf9qeEnQ0qEczEkv7wcawV6pVhlXjFKZgq0EOQbCYoWMvPUl+dwDbTcl/h+7At1nlgfF7IuRHlKf18qvgnTRT2wpiuz4pWdoAi8LcY1JiR1z5OB0oCJ2euhyDND39G2NxZRS1FIVdgCEvioHtdoHOSoWBlcSj0fLFSnscBfRBrCd7yhOP7fFKfrowHMj root@iZwz96y36tk2ecnykzituxZ\n```\n\n### 部署脚本编写\n\n该shell脚本的主要目的是从github拉取代码，脚本内容很简单，只做了目录的简要判断，代码目录存在则更新，不存在则克隆仓库，工作目录和仓库名称、地址请换成自己的。\n\n```shell\n#!/bin/bash\n\ncd /home/www/website\n\nif [ ! -d \"go-home\" ]; then\n  git clone https://github.com/pingyeaa/go-home.git\nfi\n\ncd go-home\ngit pull\n```\n\n### webhook配置与启动\n\n编写配置文件hooks.json，格式如下。\n\n```json\n[\n  {\n    \"id\": \"deploy-webhook\",\n    \"execute-command\": \"deploy.sh\",\n    \"command-working-directory\": \"/home\"\n  }\n]\n```\n\n- id：钩子的id，可自定义\n- execute-command：要执行的脚本名，就是刚才编写的部署脚本\n- command-working-directory：脚本所在目录\n\n完成后通过webhook命令启动，可以看到id为deploy-webhook的配置已经加载了，我们需要注意的是监听的端口和路径，等下要用到。\n\n```shell\n/root/go/bin/webhook -hooks hooks.json -verbose\n\n[webhook] 2020/04/22 15:18:22 version 2.6.11 starting\n[webhook] 2020/04/22 15:18:22 setting up os signal watcher\n[webhook] 2020/04/22 15:18:22 attempting to load hooks from hooks.json\n[webhook] 2020/04/22 15:18:22 found 1 hook(s) in file\n[webhook] 2020/04/22 15:18:22   loaded: deploy-webhook\n[webhook] 2020/04/22 15:18:22 serving hooks on http://0.0.0.0:9000/hooks/{id}\n[webhook] 2020/04/22 15:18:22 os signal watcher ready\n```\n\n```shell\nhttp://0.0.0.0:9000/hooks/{id}\n```\n\n### Github Webhooks配置\n\n现在服务器已经启动了webhook程序监听9000端口，接下来仅需要告诉Github这个地址和端口就好了。\n\n打开仓库设置页，添加webhook。\n\n![](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587523289550.png)\n\n配置webhooks，Payload URL就是要通知的地址，把刚才打印出的端口和路径填上即可，其他默认。\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541102651.png)\n\n现在可以提交代码测试了，如果推送失败Github中会有错误提示，同样的，成功不仅在Github中能看到，服务器的打印日志也有记录。\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541394355.png)\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541482026.png)","slug":"other/github-webhooks","published":1,"updated":"2020-05-07T16:19:37.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9y8cr1400048yp484cq6wb7","content":"<p>最近机缘巧合的购置了域名和服务器，不用实在是浪费，再加上一直没有属于自己的个人网站，所以打算用hexo在服务器上玩一下，这样也就不用再纠结用Github pages还是Gitee pages了。当然，今天的主题并不是博客搭建，而是如何利用Github的钩子，将博客代码部署到服务器上。</p>\n<p>毕竟Github的钩子已经历史悠久了，网上有很多开源项目可以拿来用，所以我并没有造轮子，而是去找了5K star的开源Go项目<code>webhook</code>，这个工具的作用是接收Github仓库的变动通知，然后调用你配置好的shell脚本，脚本可以写上代码拉取的命令或是编译的操作等，具体根据个人需求而定。简而言之，它只起着拉通Github与你服务器的作用。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587526481705.png\" alt=\"file\"></p>\n<h3 id=\"webhook工具安装\"><a href=\"#webhook工具安装\" class=\"headerlink\" title=\"webhook工具安装\"></a>webhook工具安装</h3><p>因为webhook是Go语言开发的，所以要先安装Go语言。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y golang</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以用go命令安装webhook了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/adnanh/webhook</span><br></pre></td></tr></table></figure>\n\n<p>命令安装位置可以通过<code>go env</code>查看，GOPATH就是命令安装路径，比如我的命令就安装在/root/go/bin/webhook。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go env</span><br><span class=\"line\">...</span><br><span class=\"line\">GOOS=\"linux\"</span><br><span class=\"line\">GOPATH=\"/root/go\"</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成ssh-key\"><a href=\"#生成ssh-key\" class=\"headerlink\" title=\"生成ssh key\"></a>生成ssh key</h3><p>在编写脚本之前确保服务器有权限拉取github代码，如果已经做了配置可跳过本节去看<a href=\"#部署脚本编写\">部署脚本编写</a>。ssh key是代码托管平台（github、gitee、coding、gitlab等）鉴别你是否有权拉取代码的身份标识，生成只需一行命令和一路回车就行了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br><span class=\"line\"></span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class=\"line\">Enter passphrase (empty for no passphrase): </span><br><span class=\"line\">Enter same passphrase again: </span><br><span class=\"line\">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class=\"line\">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">SHA256:M6sCf/J/hOu3zLxMkFUVmv3iWIa30CfbxiWqmWCt1YE root@iZwz96y36tk2ecnykzituxZ</span><br><span class=\"line\">The key's randomart image is:</span><br><span class=\"line\">+---[RSA 2048]----+</span><br><span class=\"line\">|            ..o. |</span><br><span class=\"line\">|           . o   |</span><br><span class=\"line\">|          . o    |</span><br><span class=\"line\">|       . o .     |</span><br><span class=\"line\">|      E S.  .    |</span><br><span class=\"line\">|  .  . ..Oo ..   |</span><br><span class=\"line\">|   oo o ==Boo .  |</span><br><span class=\"line\">|   .++.+o#== .   |</span><br><span class=\"line\">|    .=*+=+@o     |</span><br><span class=\"line\">+----[SHA256]-----+</span><br></pre></td></tr></table></figure>\n\n<p>生成后可通过<code>cat ~/.ssh/id_rsa.pub</code>命令查看，最后将key加入github即可，加法不再赘述，请自行谷歌。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">ssh-rsa AAAAB3NzaC1yc2EAAAADAQHBAAABAQCv7LGVJUFdcLL+HZyRFTQIQCdre61Gch76lDVpmWSX9BGGRU3iQS7EU5qApFn1VSvt+yf4rMt2LEkuxGCm1wIyBKZ6LYDViZBeTAfx4BcM1mcpxOX6I/+r07mQ4llTz+poQB1Zp9Y60uk0tbGOVWlCoDBEvf9qeEnQ0qEczEkv7wcawV6pVhlXjFKZgq0EOQbCYoWMvPUl+dwDbTcl/h+7At1nlgfF7IuRHlKf18qvgnTRT2wpiuz4pWdoAi8LcY1JiR1z5OB0oCJ2euhyDND39G2NxZRS1FIVdgCEvioHtdoHOSoWBlcSj0fLFSnscBfRBrCd7yhOP7fFKfrowHMj root@iZwz96y36tk2ecnykzituxZ</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署脚本编写\"><a href=\"#部署脚本编写\" class=\"headerlink\" title=\"部署脚本编写\"></a>部署脚本编写</h3><p>该shell脚本的主要目的是从github拉取代码，脚本内容很简单，只做了目录的简要判断，代码目录存在则更新，不存在则克隆仓库，工作目录和仓库名称、地址请换成自己的。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/www/website</span><br><span class=\"line\"></span><br><span class=\"line\">if [ ! -d \"go-home\" ]; then</span><br><span class=\"line\">  git clone https://github.com/pingyeaa/go-home.git</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd go-home</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webhook配置与启动\"><a href=\"#webhook配置与启动\" class=\"headerlink\" title=\"webhook配置与启动\"></a>webhook配置与启动</h3><p>编写配置文件hooks.json，格式如下。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"deploy-webhook\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"execute-command\"</span>: <span class=\"string\">\"deploy.sh\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"command-working-directory\"</span>: <span class=\"string\">\"/home\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>id：钩子的id，可自定义</li>\n<li>execute-command：要执行的脚本名，就是刚才编写的部署脚本</li>\n<li>command-working-directory：脚本所在目录</li>\n</ul>\n<p>完成后通过webhook命令启动，可以看到id为deploy-webhook的配置已经加载了，我们需要注意的是监听的端口和路径，等下要用到。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/root/go/bin/webhook -hooks hooks.json -verbose</span><br><span class=\"line\"></span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 version 2.6.11 starting</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 setting up os signal watcher</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 attempting to load hooks from hooks.json</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 found 1 hook(s) in file</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22   loaded: deploy-webhook</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 serving hooks on http://0.0.0.0:9000/hooks/&#123;id&#125;</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 os signal watcher ready</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://0.0.0.0:9000/hooks/&#123;id&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github-Webhooks配置\"><a href=\"#Github-Webhooks配置\" class=\"headerlink\" title=\"Github Webhooks配置\"></a>Github Webhooks配置</h3><p>现在服务器已经启动了webhook程序监听9000端口，接下来仅需要告诉Github这个地址和端口就好了。</p>\n<p>打开仓库设置页，添加webhook。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587523289550.png\" alt=\"\"></p>\n<p>配置webhooks，Payload URL就是要通知的地址，把刚才打印出的端口和路径填上即可，其他默认。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541102651.png\" alt=\"file\"></p>\n<p>现在可以提交代码测试了，如果推送失败Github中会有错误提示，同样的，成功不仅在Github中能看到，服务器的打印日志也有记录。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541394355.png\" alt=\"file\"></p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541482026.png\" alt=\"file\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近机缘巧合的购置了域名和服务器，不用实在是浪费，再加上一直没有属于自己的个人网站，所以打算用hexo在服务器上玩一下，这样也就不用再纠结用Github pages还是Gitee pages了。当然，今天的主题并不是博客搭建，而是如何利用Github的钩子，将博客代码部署到服务器上。</p>\n<p>毕竟Github的钩子已经历史悠久了，网上有很多开源项目可以拿来用，所以我并没有造轮子，而是去找了5K star的开源Go项目<code>webhook</code>，这个工具的作用是接收Github仓库的变动通知，然后调用你配置好的shell脚本，脚本可以写上代码拉取的命令或是编译的操作等，具体根据个人需求而定。简而言之，它只起着拉通Github与你服务器的作用。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587526481705.png\" alt=\"file\"></p>\n<h3 id=\"webhook工具安装\"><a href=\"#webhook工具安装\" class=\"headerlink\" title=\"webhook工具安装\"></a>webhook工具安装</h3><p>因为webhook是Go语言开发的，所以要先安装Go语言。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y golang</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以用go命令安装webhook了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/adnanh/webhook</span><br></pre></td></tr></table></figure>\n\n<p>命令安装位置可以通过<code>go env</code>查看，GOPATH就是命令安装路径，比如我的命令就安装在/root/go/bin/webhook。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go env</span><br><span class=\"line\">...</span><br><span class=\"line\">GOOS=\"linux\"</span><br><span class=\"line\">GOPATH=\"/root/go\"</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成ssh-key\"><a href=\"#生成ssh-key\" class=\"headerlink\" title=\"生成ssh key\"></a>生成ssh key</h3><p>在编写脚本之前确保服务器有权限拉取github代码，如果已经做了配置可跳过本节去看<a href=\"#部署脚本编写\">部署脚本编写</a>。ssh key是代码托管平台（github、gitee、coding、gitlab等）鉴别你是否有权拉取代码的身份标识，生成只需一行命令和一路回车就行了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br><span class=\"line\"></span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class=\"line\">Enter passphrase (empty for no passphrase): </span><br><span class=\"line\">Enter same passphrase again: </span><br><span class=\"line\">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class=\"line\">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">SHA256:M6sCf/J/hOu3zLxMkFUVmv3iWIa30CfbxiWqmWCt1YE root@iZwz96y36tk2ecnykzituxZ</span><br><span class=\"line\">The key's randomart image is:</span><br><span class=\"line\">+---[RSA 2048]----+</span><br><span class=\"line\">|            ..o. |</span><br><span class=\"line\">|           . o   |</span><br><span class=\"line\">|          . o    |</span><br><span class=\"line\">|       . o .     |</span><br><span class=\"line\">|      E S.  .    |</span><br><span class=\"line\">|  .  . ..Oo ..   |</span><br><span class=\"line\">|   oo o ==Boo .  |</span><br><span class=\"line\">|   .++.+o#== .   |</span><br><span class=\"line\">|    .=*+=+@o     |</span><br><span class=\"line\">+----[SHA256]-----+</span><br></pre></td></tr></table></figure>\n\n<p>生成后可通过<code>cat ~/.ssh/id_rsa.pub</code>命令查看，最后将key加入github即可，加法不再赘述，请自行谷歌。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">ssh-rsa AAAAB3NzaC1yc2EAAAADAQHBAAABAQCv7LGVJUFdcLL+HZyRFTQIQCdre61Gch76lDVpmWSX9BGGRU3iQS7EU5qApFn1VSvt+yf4rMt2LEkuxGCm1wIyBKZ6LYDViZBeTAfx4BcM1mcpxOX6I/+r07mQ4llTz+poQB1Zp9Y60uk0tbGOVWlCoDBEvf9qeEnQ0qEczEkv7wcawV6pVhlXjFKZgq0EOQbCYoWMvPUl+dwDbTcl/h+7At1nlgfF7IuRHlKf18qvgnTRT2wpiuz4pWdoAi8LcY1JiR1z5OB0oCJ2euhyDND39G2NxZRS1FIVdgCEvioHtdoHOSoWBlcSj0fLFSnscBfRBrCd7yhOP7fFKfrowHMj root@iZwz96y36tk2ecnykzituxZ</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署脚本编写\"><a href=\"#部署脚本编写\" class=\"headerlink\" title=\"部署脚本编写\"></a>部署脚本编写</h3><p>该shell脚本的主要目的是从github拉取代码，脚本内容很简单，只做了目录的简要判断，代码目录存在则更新，不存在则克隆仓库，工作目录和仓库名称、地址请换成自己的。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/www/website</span><br><span class=\"line\"></span><br><span class=\"line\">if [ ! -d \"go-home\" ]; then</span><br><span class=\"line\">  git clone https://github.com/pingyeaa/go-home.git</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd go-home</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webhook配置与启动\"><a href=\"#webhook配置与启动\" class=\"headerlink\" title=\"webhook配置与启动\"></a>webhook配置与启动</h3><p>编写配置文件hooks.json，格式如下。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"deploy-webhook\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"execute-command\"</span>: <span class=\"string\">\"deploy.sh\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"command-working-directory\"</span>: <span class=\"string\">\"/home\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>id：钩子的id，可自定义</li>\n<li>execute-command：要执行的脚本名，就是刚才编写的部署脚本</li>\n<li>command-working-directory：脚本所在目录</li>\n</ul>\n<p>完成后通过webhook命令启动，可以看到id为deploy-webhook的配置已经加载了，我们需要注意的是监听的端口和路径，等下要用到。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/root/go/bin/webhook -hooks hooks.json -verbose</span><br><span class=\"line\"></span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 version 2.6.11 starting</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 setting up os signal watcher</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 attempting to load hooks from hooks.json</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 found 1 hook(s) in file</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22   loaded: deploy-webhook</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 serving hooks on http://0.0.0.0:9000/hooks/&#123;id&#125;</span><br><span class=\"line\">[webhook] 2020/04/22 15:18:22 os signal watcher ready</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://0.0.0.0:9000/hooks/&#123;id&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github-Webhooks配置\"><a href=\"#Github-Webhooks配置\" class=\"headerlink\" title=\"Github Webhooks配置\"></a>Github Webhooks配置</h3><p>现在服务器已经启动了webhook程序监听9000端口，接下来仅需要告诉Github这个地址和端口就好了。</p>\n<p>打开仓库设置页，添加webhook。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587523289550.png\" alt=\"\"></p>\n<p>配置webhooks，Payload URL就是要通知的地址，把刚才打印出的端口和路径填上即可，其他默认。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541102651.png\" alt=\"file\"></p>\n<p>现在可以提交代码测试了，如果推送失败Github中会有错误提示，同样的，成功不仅在Github中能看到，服务器的打印日志也有记录。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541394355.png\" alt=\"file\"></p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587541482026.png\" alt=\"file\"></p>\n"},{"title":"进程管理工具 Supervisor","date":"2020-04-23T06:30:29.000Z","_content":"\n> 我是平也，这有一个专注Gopher技术成长的开源项目[「go home」](https://github.com/pingyeaa/go-home)\n\n要想在终端后台常驻进程，首先想到的是在命令后加 & 符号，来达到隐藏程序在后台的目的，尽管看起来进程已经在后台运行了，实际上终端会话关闭时进程还是会被 kill 掉，这种问题一般是采用搭配 nohup 命令来解决的，nohup 作用是忽略 SIGHUP 信号，而会话关闭时正好发送了该信号给会话内所有运行程序，简而言之，nohup 命令搭配 & 不仅可以在后台运行，还不受会话关闭的影响。\n\n```shell\n$ nohup /bin/cat &\n```\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587648951163.png)\n\n那么问题来了，虽然做到了后台运行，也避免了挂断操作带来的影响，但是它避免不了常驻进程自己出现问题，一旦它因自身异常终止了进程，这对黄金搭档就无力回天了。那怎么才能把挂了的常驻进程拉起来呢？这就是我们要讲的主题 Supervisor。\n\n### Supervisor 介绍\n\nSupervisor 是专门用来在[类 Unix](#unix) 系统上监控管理进程的工具，发布于 2004 年，虽然名字气势磅礴，但它的志向并不是统筹整个操作系统的进程，而是致力于做一个听话的贴身助理，你只需要告诉它要管理的程序，它就按你的要求监控进程，救死扶伤，保证进程的持续运行。\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587649424854.png)\n\n<span id=\"unix\"></span>\n\n> 类 Unix 系统就是由 Unix 设计风格演变出的操作系统，除了 Windows 市面上绝大多数系统都是类 Unix 系统。\n\n官方文档介绍 Supervisor 是 C/S 架构体系，它对应的角色分别为 Supervisorctl 和 Supervisord。后者的主要作用是启动配置好的程序、响应 Supervisorctl 发过来的指令以及重启退出的子进程，而前者是 Supervisor 的客户端，它以命令行的形式提供了一系列参数，来方便用户向 Supervisord 发送指令，常用的有启动、暂停、移除、更新等命令。\n\n### Supervisor 安装与配置\n\n安装 Supervisor 很简单，在各大操作系统的软件包管理器中都可以直接安装。\n\n```shell\n$ yum install -y supervisor\n```\n\n安装好的 Supervisor 配置文件默认为 /etc/supervisor.conf，如果找不到配置文件可以[通过官方命令生成](#gen_conf)，该配置文件包含了一个空的配置目录 /etc/supervisor.d（不同 OS 可能不一样），只需在该目录添加配置文件即可动态扩展，所以 supervisor.conf 一般不需要做改动。\n\n我们以最简单的 cat 命令为例，cat 命令不加参数会阻塞住等待标准输入，所以很适合做常驻进程的演示。现在创建一个配置文件 cat.ini 到 /etc/supervisor.d/，第一行定义程序的名称，该名称用来做操作的标识，第二行定义命令路径，它才是程序执行的根本命令。\n\n```shell /etc/supervisor.d/cat.ini\n[program:foo]\ncommand=/bin/cat\n```\n\n配置好后，启动 supervisord 服务，注意通过 -c 指定 supervisor 的配置文件。\n\n```shell\n$ supervisord -c /etc/supervisord.conf\n```\n\n当然也可以不指定配置路径，那么它会按以下顺序逐个搜索配置文件：\n\n- $CWD/supervisord.conf\n- $CWD/etc/supervisord.conf\n- /etc/supervisord.conf\n- /etc/supervisor/supervisord.conf\n- ../etc/supervisord.conf\n- ../supervisord.conf\n\n<span id=\"gen_conf\"></span>\n\n如果你是通过 Mac OS 安装的 Supervisor，可能从上述目录都找不到配置文件，可以利用官方提供的命令生成配置。\n\n```shell\n$ echo_supervisord_conf > supervisor.conf\n```\n\n这个时候 cat 进程应该已经跑起来了。\n\n```shell\n$ ps aux | grep /bin/cat\n```\n\n杀掉进程，进程 id 会发生变化，证明 supervisor 又把 cat 拉了起来。\n\n```shell\n$ sudo kill 9 <进程ID>\n```\n\n### 核心配置讲解\n\n配置文件中的选项并不止 command，官方提供了很多配置项。\n\n```ini\n[program:name]\ncommand=sh /tmp/echo_time.sh\npriority=999\nnumprocs=1\nautostart=true\nautorestart=true\nstartsecs=10\nstartretries=3 \nexitcodes=0,2\nstopsignal=QUIT\nstopwaitsecs=10\nuser=root\nlog_stdout=true\nlog_stderr=true\nlogfile=/tmp/echo_time.log\nlogfile_maxbytes=1MB\nlogfile_backups=10 \nstdout_logfile_maxbytes=20MB \nstdout_logfile_backups=20 \nstdout_logfile=/tmp/echo_time.stdout.log\n```\n\n下面挑选几个配置简要说明\n\n- command：要执行的命令\n- priority：执行优先级，值越高就越晚启动，越早关闭\n- numprocs：进程数量\n- autostart：是否与 supervisord 一起启动\n- autorestart：自动重启\n- startsecs：延时启动时间，默认为 10 秒\n- startretries：启动重试次数，默认为 3 次\n- exitcodes：当程序的退出码为 0 或 2 时，重启\n- stopsignal：停止信号\n- stopwaitsecs：延时停止时间，收到停止指令后多久停止\n- user：以哪个用户执行\n\n### 动态操作子程序\n\n添加新的程序，只需增加配置文件，然后执行 supervisorctl update 即可动态添加新的程序，并不需要重启 supervisord 服务。如果出现 refused connection 的提示，可能是没找到配置文件，需要加上配置选项。\n\n```shell\n$ supervisorctl update\nfoo1: added process group\n```\n\n删除同理，remove 时会先将进程关闭，再从列表中移除。\n\n```shell\nfoo1: stopped\nfoo1: removed process group\n```\n\n如果需要单独停止某个程序，可以使用 stop 命令，stop 后跟的是 program 名称。\n\n```shell\n$ supervisorctl stop foo\nfoo: stopped\n```\n\n当然还可以通过 stop all 命令更加暴力的停止所有进程。\n\n```shell\n$ supervisorctl stop all\nfoo: stopped\nfoo1: stopped\n```\n\n反之亦然，启动进程只需要将 stop 改为 start。\n\n```shell\n$ supervisorctl start all\n```\n\n#### 连接到某个进程\n\n```shell\n$ supervisorctl fg <program 名称>\n```\n\n#### 重启 supervisord\n\n```shell\n$ supervisorctl reload\n```\n\n#### 动态加载 supervisor.conf\n\n```shell\n$ supervisorctl reread\n```\n\n#### 查看所有进程运行状况\n\n```shell\n$ supervisorctl status\n```\n\n### Web 界面操作\n\n官方提供了界面操作方式，需要在 supervisor.conf 中去掉 inet_http_server 的注释。\n\n```ini supervisor.conf\n[inet_http_server]         ; inet (TCP) server disabled by default\nport=127.0.0.1:9001        ; ip_address:port specifier, *:port for all iface\nusername=user              ; default is no username (open server)\npassword=123               ; default is no password (open server)\n```\n\n重启 supervisord。\n\n```shell\n$ supervisorctl reload\n```\n\n访问 http://localhost:9001 可以看到 supervisor 的操作界面。\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587696070630.png)\n\n今天文章就到这里，想要了解更多，欢迎查看[官方文档](http://supervisord.org/)。","source":"_posts/os/supervisor.md","raw":"---\ntitle: 进程管理工具 Supervisor\ndate: 2020-04-23 14:30:29\ncategories:\n- 操作系统\ntags:\n- supervisor\n- 进程\n- 监控\n---\n\n> 我是平也，这有一个专注Gopher技术成长的开源项目[「go home」](https://github.com/pingyeaa/go-home)\n\n要想在终端后台常驻进程，首先想到的是在命令后加 & 符号，来达到隐藏程序在后台的目的，尽管看起来进程已经在后台运行了，实际上终端会话关闭时进程还是会被 kill 掉，这种问题一般是采用搭配 nohup 命令来解决的，nohup 作用是忽略 SIGHUP 信号，而会话关闭时正好发送了该信号给会话内所有运行程序，简而言之，nohup 命令搭配 & 不仅可以在后台运行，还不受会话关闭的影响。\n\n```shell\n$ nohup /bin/cat &\n```\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587648951163.png)\n\n那么问题来了，虽然做到了后台运行，也避免了挂断操作带来的影响，但是它避免不了常驻进程自己出现问题，一旦它因自身异常终止了进程，这对黄金搭档就无力回天了。那怎么才能把挂了的常驻进程拉起来呢？这就是我们要讲的主题 Supervisor。\n\n### Supervisor 介绍\n\nSupervisor 是专门用来在[类 Unix](#unix) 系统上监控管理进程的工具，发布于 2004 年，虽然名字气势磅礴，但它的志向并不是统筹整个操作系统的进程，而是致力于做一个听话的贴身助理，你只需要告诉它要管理的程序，它就按你的要求监控进程，救死扶伤，保证进程的持续运行。\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587649424854.png)\n\n<span id=\"unix\"></span>\n\n> 类 Unix 系统就是由 Unix 设计风格演变出的操作系统，除了 Windows 市面上绝大多数系统都是类 Unix 系统。\n\n官方文档介绍 Supervisor 是 C/S 架构体系，它对应的角色分别为 Supervisorctl 和 Supervisord。后者的主要作用是启动配置好的程序、响应 Supervisorctl 发过来的指令以及重启退出的子进程，而前者是 Supervisor 的客户端，它以命令行的形式提供了一系列参数，来方便用户向 Supervisord 发送指令，常用的有启动、暂停、移除、更新等命令。\n\n### Supervisor 安装与配置\n\n安装 Supervisor 很简单，在各大操作系统的软件包管理器中都可以直接安装。\n\n```shell\n$ yum install -y supervisor\n```\n\n安装好的 Supervisor 配置文件默认为 /etc/supervisor.conf，如果找不到配置文件可以[通过官方命令生成](#gen_conf)，该配置文件包含了一个空的配置目录 /etc/supervisor.d（不同 OS 可能不一样），只需在该目录添加配置文件即可动态扩展，所以 supervisor.conf 一般不需要做改动。\n\n我们以最简单的 cat 命令为例，cat 命令不加参数会阻塞住等待标准输入，所以很适合做常驻进程的演示。现在创建一个配置文件 cat.ini 到 /etc/supervisor.d/，第一行定义程序的名称，该名称用来做操作的标识，第二行定义命令路径，它才是程序执行的根本命令。\n\n```shell /etc/supervisor.d/cat.ini\n[program:foo]\ncommand=/bin/cat\n```\n\n配置好后，启动 supervisord 服务，注意通过 -c 指定 supervisor 的配置文件。\n\n```shell\n$ supervisord -c /etc/supervisord.conf\n```\n\n当然也可以不指定配置路径，那么它会按以下顺序逐个搜索配置文件：\n\n- $CWD/supervisord.conf\n- $CWD/etc/supervisord.conf\n- /etc/supervisord.conf\n- /etc/supervisor/supervisord.conf\n- ../etc/supervisord.conf\n- ../supervisord.conf\n\n<span id=\"gen_conf\"></span>\n\n如果你是通过 Mac OS 安装的 Supervisor，可能从上述目录都找不到配置文件，可以利用官方提供的命令生成配置。\n\n```shell\n$ echo_supervisord_conf > supervisor.conf\n```\n\n这个时候 cat 进程应该已经跑起来了。\n\n```shell\n$ ps aux | grep /bin/cat\n```\n\n杀掉进程，进程 id 会发生变化，证明 supervisor 又把 cat 拉了起来。\n\n```shell\n$ sudo kill 9 <进程ID>\n```\n\n### 核心配置讲解\n\n配置文件中的选项并不止 command，官方提供了很多配置项。\n\n```ini\n[program:name]\ncommand=sh /tmp/echo_time.sh\npriority=999\nnumprocs=1\nautostart=true\nautorestart=true\nstartsecs=10\nstartretries=3 \nexitcodes=0,2\nstopsignal=QUIT\nstopwaitsecs=10\nuser=root\nlog_stdout=true\nlog_stderr=true\nlogfile=/tmp/echo_time.log\nlogfile_maxbytes=1MB\nlogfile_backups=10 \nstdout_logfile_maxbytes=20MB \nstdout_logfile_backups=20 \nstdout_logfile=/tmp/echo_time.stdout.log\n```\n\n下面挑选几个配置简要说明\n\n- command：要执行的命令\n- priority：执行优先级，值越高就越晚启动，越早关闭\n- numprocs：进程数量\n- autostart：是否与 supervisord 一起启动\n- autorestart：自动重启\n- startsecs：延时启动时间，默认为 10 秒\n- startretries：启动重试次数，默认为 3 次\n- exitcodes：当程序的退出码为 0 或 2 时，重启\n- stopsignal：停止信号\n- stopwaitsecs：延时停止时间，收到停止指令后多久停止\n- user：以哪个用户执行\n\n### 动态操作子程序\n\n添加新的程序，只需增加配置文件，然后执行 supervisorctl update 即可动态添加新的程序，并不需要重启 supervisord 服务。如果出现 refused connection 的提示，可能是没找到配置文件，需要加上配置选项。\n\n```shell\n$ supervisorctl update\nfoo1: added process group\n```\n\n删除同理，remove 时会先将进程关闭，再从列表中移除。\n\n```shell\nfoo1: stopped\nfoo1: removed process group\n```\n\n如果需要单独停止某个程序，可以使用 stop 命令，stop 后跟的是 program 名称。\n\n```shell\n$ supervisorctl stop foo\nfoo: stopped\n```\n\n当然还可以通过 stop all 命令更加暴力的停止所有进程。\n\n```shell\n$ supervisorctl stop all\nfoo: stopped\nfoo1: stopped\n```\n\n反之亦然，启动进程只需要将 stop 改为 start。\n\n```shell\n$ supervisorctl start all\n```\n\n#### 连接到某个进程\n\n```shell\n$ supervisorctl fg <program 名称>\n```\n\n#### 重启 supervisord\n\n```shell\n$ supervisorctl reload\n```\n\n#### 动态加载 supervisor.conf\n\n```shell\n$ supervisorctl reread\n```\n\n#### 查看所有进程运行状况\n\n```shell\n$ supervisorctl status\n```\n\n### Web 界面操作\n\n官方提供了界面操作方式，需要在 supervisor.conf 中去掉 inet_http_server 的注释。\n\n```ini supervisor.conf\n[inet_http_server]         ; inet (TCP) server disabled by default\nport=127.0.0.1:9001        ; ip_address:port specifier, *:port for all iface\nusername=user              ; default is no username (open server)\npassword=123               ; default is no password (open server)\n```\n\n重启 supervisord。\n\n```shell\n$ supervisorctl reload\n```\n\n访问 http://localhost:9001 可以看到 supervisor 的操作界面。\n\n![file](https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587696070630.png)\n\n今天文章就到这里，想要了解更多，欢迎查看[官方文档](http://supervisord.org/)。","slug":"os/supervisor","published":1,"updated":"2020-05-07T16:19:16.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9y8cr1600068yp4bn6tgaf8","content":"<blockquote>\n<p>我是平也，这有一个专注Gopher技术成长的开源项目<a href=\"https://github.com/pingyeaa/go-home\" target=\"_blank\" rel=\"noopener\">「go home」</a></p>\n</blockquote>\n<p>要想在终端后台常驻进程，首先想到的是在命令后加 &amp; 符号，来达到隐藏程序在后台的目的，尽管看起来进程已经在后台运行了，实际上终端会话关闭时进程还是会被 kill 掉，这种问题一般是采用搭配 nohup 命令来解决的，nohup 作用是忽略 SIGHUP 信号，而会话关闭时正好发送了该信号给会话内所有运行程序，简而言之，nohup 命令搭配 &amp; 不仅可以在后台运行，还不受会话关闭的影响。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> nohup /bin/cat &amp;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587648951163.png\" alt=\"file\"></p>\n<p>那么问题来了，虽然做到了后台运行，也避免了挂断操作带来的影响，但是它避免不了常驻进程自己出现问题，一旦它因自身异常终止了进程，这对黄金搭档就无力回天了。那怎么才能把挂了的常驻进程拉起来呢？这就是我们要讲的主题 Supervisor。</p>\n<h3 id=\"Supervisor-介绍\"><a href=\"#Supervisor-介绍\" class=\"headerlink\" title=\"Supervisor 介绍\"></a>Supervisor 介绍</h3><p>Supervisor 是专门用来在<a href=\"#unix\">类 Unix</a> 系统上监控管理进程的工具，发布于 2004 年，虽然名字气势磅礴，但它的志向并不是统筹整个操作系统的进程，而是致力于做一个听话的贴身助理，你只需要告诉它要管理的程序，它就按你的要求监控进程，救死扶伤，保证进程的持续运行。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587649424854.png\" alt=\"file\"></p>\n<p><span id=\"unix\"></span></p>\n<blockquote>\n<p>类 Unix 系统就是由 Unix 设计风格演变出的操作系统，除了 Windows 市面上绝大多数系统都是类 Unix 系统。</p>\n</blockquote>\n<p>官方文档介绍 Supervisor 是 C/S 架构体系，它对应的角色分别为 Supervisorctl 和 Supervisord。后者的主要作用是启动配置好的程序、响应 Supervisorctl 发过来的指令以及重启退出的子进程，而前者是 Supervisor 的客户端，它以命令行的形式提供了一系列参数，来方便用户向 Supervisord 发送指令，常用的有启动、暂停、移除、更新等命令。</p>\n<h3 id=\"Supervisor-安装与配置\"><a href=\"#Supervisor-安装与配置\" class=\"headerlink\" title=\"Supervisor 安装与配置\"></a>Supervisor 安装与配置</h3><p>安装 Supervisor 很简单，在各大操作系统的软件包管理器中都可以直接安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yum install -y supervisor</span></span><br></pre></td></tr></table></figure>\n\n<p>安装好的 Supervisor 配置文件默认为 /etc/supervisor.conf，如果找不到配置文件可以<a href=\"#gen_conf\">通过官方命令生成</a>，该配置文件包含了一个空的配置目录 /etc/supervisor.d（不同 OS 可能不一样），只需在该目录添加配置文件即可动态扩展，所以 supervisor.conf 一般不需要做改动。</p>\n<p>我们以最简单的 cat 命令为例，cat 命令不加参数会阻塞住等待标准输入，所以很适合做常驻进程的演示。现在创建一个配置文件 cat.ini 到 /etc/supervisor.d/，第一行定义程序的名称，该名称用来做操作的标识，第二行定义命令路径，它才是程序执行的根本命令。</p>\n<figure class=\"highlight shell\"><figcaption><span>/etc/supervisor.d/cat.ini</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:foo]</span><br><span class=\"line\">command=/bin/cat</span><br></pre></td></tr></table></figure>\n\n<p>配置好后，启动 supervisord 服务，注意通过 -c 指定 supervisor 的配置文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisord -c /etc/supervisord.conf</span></span><br></pre></td></tr></table></figure>\n\n<p>当然也可以不指定配置路径，那么它会按以下顺序逐个搜索配置文件：</p>\n<ul>\n<li>$CWD/supervisord.conf</li>\n<li>$CWD/etc/supervisord.conf</li>\n<li>/etc/supervisord.conf</li>\n<li>/etc/supervisor/supervisord.conf</li>\n<li>../etc/supervisord.conf</li>\n<li>../supervisord.conf</li>\n</ul>\n<p><span id=\"gen_conf\"></span></p>\n<p>如果你是通过 Mac OS 安装的 Supervisor，可能从上述目录都找不到配置文件，可以利用官方提供的命令生成配置。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> echo_supervisord_conf &gt; supervisor.conf</span></span><br></pre></td></tr></table></figure>\n\n<p>这个时候 cat 进程应该已经跑起来了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ps aux | grep /bin/cat</span></span><br></pre></td></tr></table></figure>\n\n<p>杀掉进程，进程 id 会发生变化，证明 supervisor 又把 cat 拉了起来。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo <span class=\"built_in\">kill</span> 9 &lt;进程ID&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"核心配置讲解\"><a href=\"#核心配置讲解\" class=\"headerlink\" title=\"核心配置讲解\"></a>核心配置讲解</h3><p>配置文件中的选项并不止 command，官方提供了很多配置项。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[program:name]</span></span><br><span class=\"line\"><span class=\"attr\">command</span>=sh /tmp/echo_time.sh</span><br><span class=\"line\"><span class=\"attr\">priority</span>=<span class=\"number\">999</span></span><br><span class=\"line\"><span class=\"attr\">numprocs</span>=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">autostart</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">autorestart</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">startsecs</span>=<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"attr\">startretries</span>=<span class=\"number\">3</span> </span><br><span class=\"line\"><span class=\"attr\">exitcodes</span>=<span class=\"number\">0</span>,<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">stopsignal</span>=QUIT</span><br><span class=\"line\"><span class=\"attr\">stopwaitsecs</span>=<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"attr\">user</span>=root</span><br><span class=\"line\"><span class=\"attr\">log_stdout</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">log_stderr</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">logfile</span>=/tmp/echo_time.log</span><br><span class=\"line\"><span class=\"attr\">logfile_maxbytes</span>=<span class=\"number\">1</span>MB</span><br><span class=\"line\"><span class=\"attr\">logfile_backups</span>=<span class=\"number\">10</span> </span><br><span class=\"line\"><span class=\"attr\">stdout_logfile_maxbytes</span>=<span class=\"number\">20</span>MB </span><br><span class=\"line\"><span class=\"attr\">stdout_logfile_backups</span>=<span class=\"number\">20</span> </span><br><span class=\"line\"><span class=\"attr\">stdout_logfile</span>=/tmp/echo_time.stdout.log</span><br></pre></td></tr></table></figure>\n\n<p>下面挑选几个配置简要说明</p>\n<ul>\n<li>command：要执行的命令</li>\n<li>priority：执行优先级，值越高就越晚启动，越早关闭</li>\n<li>numprocs：进程数量</li>\n<li>autostart：是否与 supervisord 一起启动</li>\n<li>autorestart：自动重启</li>\n<li>startsecs：延时启动时间，默认为 10 秒</li>\n<li>startretries：启动重试次数，默认为 3 次</li>\n<li>exitcodes：当程序的退出码为 0 或 2 时，重启</li>\n<li>stopsignal：停止信号</li>\n<li>stopwaitsecs：延时停止时间，收到停止指令后多久停止</li>\n<li>user：以哪个用户执行</li>\n</ul>\n<h3 id=\"动态操作子程序\"><a href=\"#动态操作子程序\" class=\"headerlink\" title=\"动态操作子程序\"></a>动态操作子程序</h3><p>添加新的程序，只需增加配置文件，然后执行 supervisorctl update 即可动态添加新的程序，并不需要重启 supervisord 服务。如果出现 refused connection 的提示，可能是没找到配置文件，需要加上配置选项。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl update</span></span><br><span class=\"line\">foo1: added process group</span><br></pre></td></tr></table></figure>\n\n<p>删除同理，remove 时会先将进程关闭，再从列表中移除。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo1: stopped</span><br><span class=\"line\">foo1: removed process group</span><br></pre></td></tr></table></figure>\n\n<p>如果需要单独停止某个程序，可以使用 stop 命令，stop 后跟的是 program 名称。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl stop foo</span></span><br><span class=\"line\">foo: stopped</span><br></pre></td></tr></table></figure>\n\n<p>当然还可以通过 stop all 命令更加暴力的停止所有进程。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl stop all</span></span><br><span class=\"line\">foo: stopped</span><br><span class=\"line\">foo1: stopped</span><br></pre></td></tr></table></figure>\n\n<p>反之亦然，启动进程只需要将 stop 改为 start。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl start all</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"连接到某个进程\"><a href=\"#连接到某个进程\" class=\"headerlink\" title=\"连接到某个进程\"></a>连接到某个进程</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl <span class=\"built_in\">fg</span> &lt;program 名称&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重启-supervisord\"><a href=\"#重启-supervisord\" class=\"headerlink\" title=\"重启 supervisord\"></a>重启 supervisord</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl reload</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"动态加载-supervisor-conf\"><a href=\"#动态加载-supervisor-conf\" class=\"headerlink\" title=\"动态加载 supervisor.conf\"></a>动态加载 supervisor.conf</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl reread</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看所有进程运行状况\"><a href=\"#查看所有进程运行状况\" class=\"headerlink\" title=\"查看所有进程运行状况\"></a>查看所有进程运行状况</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl status</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Web-界面操作\"><a href=\"#Web-界面操作\" class=\"headerlink\" title=\"Web 界面操作\"></a>Web 界面操作</h3><p>官方提供了界面操作方式，需要在 supervisor.conf 中去掉 inet_http_server 的注释。</p>\n<figure class=\"highlight ini\"><figcaption><span>supervisor.conf</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[inet_http_server]</span>         <span class=\"comment\">; inet (TCP) server disabled by default</span></span><br><span class=\"line\"><span class=\"attr\">port</span>=<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">9001</span>        <span class=\"comment\">; ip_address:port specifier, *:port for all iface</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=user              <span class=\"comment\">; default is no username (open server)</span></span><br><span class=\"line\"><span class=\"attr\">password</span>=<span class=\"number\">123</span>               <span class=\"comment\">; default is no password (open server)</span></span><br></pre></td></tr></table></figure>\n\n<p>重启 supervisord。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl reload</span></span><br></pre></td></tr></table></figure>\n\n<p>访问 <a href=\"http://localhost:9001\" target=\"_blank\" rel=\"noopener\">http://localhost:9001</a> 可以看到 supervisor 的操作界面。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587696070630.png\" alt=\"file\"></p>\n<p>今天文章就到这里，想要了解更多，欢迎查看<a href=\"http://supervisord.org/\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>我是平也，这有一个专注Gopher技术成长的开源项目<a href=\"https://github.com/pingyeaa/go-home\" target=\"_blank\" rel=\"noopener\">「go home」</a></p>\n</blockquote>\n<p>要想在终端后台常驻进程，首先想到的是在命令后加 &amp; 符号，来达到隐藏程序在后台的目的，尽管看起来进程已经在后台运行了，实际上终端会话关闭时进程还是会被 kill 掉，这种问题一般是采用搭配 nohup 命令来解决的，nohup 作用是忽略 SIGHUP 信号，而会话关闭时正好发送了该信号给会话内所有运行程序，简而言之，nohup 命令搭配 &amp; 不仅可以在后台运行，还不受会话关闭的影响。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> nohup /bin/cat &amp;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587648951163.png\" alt=\"file\"></p>\n<p>那么问题来了，虽然做到了后台运行，也避免了挂断操作带来的影响，但是它避免不了常驻进程自己出现问题，一旦它因自身异常终止了进程，这对黄金搭档就无力回天了。那怎么才能把挂了的常驻进程拉起来呢？这就是我们要讲的主题 Supervisor。</p>\n<h3 id=\"Supervisor-介绍\"><a href=\"#Supervisor-介绍\" class=\"headerlink\" title=\"Supervisor 介绍\"></a>Supervisor 介绍</h3><p>Supervisor 是专门用来在<a href=\"#unix\">类 Unix</a> 系统上监控管理进程的工具，发布于 2004 年，虽然名字气势磅礴，但它的志向并不是统筹整个操作系统的进程，而是致力于做一个听话的贴身助理，你只需要告诉它要管理的程序，它就按你的要求监控进程，救死扶伤，保证进程的持续运行。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587649424854.png\" alt=\"file\"></p>\n<p><span id=\"unix\"></span></p>\n<blockquote>\n<p>类 Unix 系统就是由 Unix 设计风格演变出的操作系统，除了 Windows 市面上绝大多数系统都是类 Unix 系统。</p>\n</blockquote>\n<p>官方文档介绍 Supervisor 是 C/S 架构体系，它对应的角色分别为 Supervisorctl 和 Supervisord。后者的主要作用是启动配置好的程序、响应 Supervisorctl 发过来的指令以及重启退出的子进程，而前者是 Supervisor 的客户端，它以命令行的形式提供了一系列参数，来方便用户向 Supervisord 发送指令，常用的有启动、暂停、移除、更新等命令。</p>\n<h3 id=\"Supervisor-安装与配置\"><a href=\"#Supervisor-安装与配置\" class=\"headerlink\" title=\"Supervisor 安装与配置\"></a>Supervisor 安装与配置</h3><p>安装 Supervisor 很简单，在各大操作系统的软件包管理器中都可以直接安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yum install -y supervisor</span></span><br></pre></td></tr></table></figure>\n\n<p>安装好的 Supervisor 配置文件默认为 /etc/supervisor.conf，如果找不到配置文件可以<a href=\"#gen_conf\">通过官方命令生成</a>，该配置文件包含了一个空的配置目录 /etc/supervisor.d（不同 OS 可能不一样），只需在该目录添加配置文件即可动态扩展，所以 supervisor.conf 一般不需要做改动。</p>\n<p>我们以最简单的 cat 命令为例，cat 命令不加参数会阻塞住等待标准输入，所以很适合做常驻进程的演示。现在创建一个配置文件 cat.ini 到 /etc/supervisor.d/，第一行定义程序的名称，该名称用来做操作的标识，第二行定义命令路径，它才是程序执行的根本命令。</p>\n<figure class=\"highlight shell\"><figcaption><span>/etc/supervisor.d/cat.ini</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:foo]</span><br><span class=\"line\">command=/bin/cat</span><br></pre></td></tr></table></figure>\n\n<p>配置好后，启动 supervisord 服务，注意通过 -c 指定 supervisor 的配置文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisord -c /etc/supervisord.conf</span></span><br></pre></td></tr></table></figure>\n\n<p>当然也可以不指定配置路径，那么它会按以下顺序逐个搜索配置文件：</p>\n<ul>\n<li>$CWD/supervisord.conf</li>\n<li>$CWD/etc/supervisord.conf</li>\n<li>/etc/supervisord.conf</li>\n<li>/etc/supervisor/supervisord.conf</li>\n<li>../etc/supervisord.conf</li>\n<li>../supervisord.conf</li>\n</ul>\n<p><span id=\"gen_conf\"></span></p>\n<p>如果你是通过 Mac OS 安装的 Supervisor，可能从上述目录都找不到配置文件，可以利用官方提供的命令生成配置。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> echo_supervisord_conf &gt; supervisor.conf</span></span><br></pre></td></tr></table></figure>\n\n<p>这个时候 cat 进程应该已经跑起来了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ps aux | grep /bin/cat</span></span><br></pre></td></tr></table></figure>\n\n<p>杀掉进程，进程 id 会发生变化，证明 supervisor 又把 cat 拉了起来。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo <span class=\"built_in\">kill</span> 9 &lt;进程ID&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"核心配置讲解\"><a href=\"#核心配置讲解\" class=\"headerlink\" title=\"核心配置讲解\"></a>核心配置讲解</h3><p>配置文件中的选项并不止 command，官方提供了很多配置项。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[program:name]</span></span><br><span class=\"line\"><span class=\"attr\">command</span>=sh /tmp/echo_time.sh</span><br><span class=\"line\"><span class=\"attr\">priority</span>=<span class=\"number\">999</span></span><br><span class=\"line\"><span class=\"attr\">numprocs</span>=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">autostart</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">autorestart</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">startsecs</span>=<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"attr\">startretries</span>=<span class=\"number\">3</span> </span><br><span class=\"line\"><span class=\"attr\">exitcodes</span>=<span class=\"number\">0</span>,<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">stopsignal</span>=QUIT</span><br><span class=\"line\"><span class=\"attr\">stopwaitsecs</span>=<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"attr\">user</span>=root</span><br><span class=\"line\"><span class=\"attr\">log_stdout</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">log_stderr</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">logfile</span>=/tmp/echo_time.log</span><br><span class=\"line\"><span class=\"attr\">logfile_maxbytes</span>=<span class=\"number\">1</span>MB</span><br><span class=\"line\"><span class=\"attr\">logfile_backups</span>=<span class=\"number\">10</span> </span><br><span class=\"line\"><span class=\"attr\">stdout_logfile_maxbytes</span>=<span class=\"number\">20</span>MB </span><br><span class=\"line\"><span class=\"attr\">stdout_logfile_backups</span>=<span class=\"number\">20</span> </span><br><span class=\"line\"><span class=\"attr\">stdout_logfile</span>=/tmp/echo_time.stdout.log</span><br></pre></td></tr></table></figure>\n\n<p>下面挑选几个配置简要说明</p>\n<ul>\n<li>command：要执行的命令</li>\n<li>priority：执行优先级，值越高就越晚启动，越早关闭</li>\n<li>numprocs：进程数量</li>\n<li>autostart：是否与 supervisord 一起启动</li>\n<li>autorestart：自动重启</li>\n<li>startsecs：延时启动时间，默认为 10 秒</li>\n<li>startretries：启动重试次数，默认为 3 次</li>\n<li>exitcodes：当程序的退出码为 0 或 2 时，重启</li>\n<li>stopsignal：停止信号</li>\n<li>stopwaitsecs：延时停止时间，收到停止指令后多久停止</li>\n<li>user：以哪个用户执行</li>\n</ul>\n<h3 id=\"动态操作子程序\"><a href=\"#动态操作子程序\" class=\"headerlink\" title=\"动态操作子程序\"></a>动态操作子程序</h3><p>添加新的程序，只需增加配置文件，然后执行 supervisorctl update 即可动态添加新的程序，并不需要重启 supervisord 服务。如果出现 refused connection 的提示，可能是没找到配置文件，需要加上配置选项。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl update</span></span><br><span class=\"line\">foo1: added process group</span><br></pre></td></tr></table></figure>\n\n<p>删除同理，remove 时会先将进程关闭，再从列表中移除。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo1: stopped</span><br><span class=\"line\">foo1: removed process group</span><br></pre></td></tr></table></figure>\n\n<p>如果需要单独停止某个程序，可以使用 stop 命令，stop 后跟的是 program 名称。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl stop foo</span></span><br><span class=\"line\">foo: stopped</span><br></pre></td></tr></table></figure>\n\n<p>当然还可以通过 stop all 命令更加暴力的停止所有进程。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl stop all</span></span><br><span class=\"line\">foo: stopped</span><br><span class=\"line\">foo1: stopped</span><br></pre></td></tr></table></figure>\n\n<p>反之亦然，启动进程只需要将 stop 改为 start。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl start all</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"连接到某个进程\"><a href=\"#连接到某个进程\" class=\"headerlink\" title=\"连接到某个进程\"></a>连接到某个进程</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl <span class=\"built_in\">fg</span> &lt;program 名称&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重启-supervisord\"><a href=\"#重启-supervisord\" class=\"headerlink\" title=\"重启 supervisord\"></a>重启 supervisord</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl reload</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"动态加载-supervisor-conf\"><a href=\"#动态加载-supervisor-conf\" class=\"headerlink\" title=\"动态加载 supervisor.conf\"></a>动态加载 supervisor.conf</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl reread</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看所有进程运行状况\"><a href=\"#查看所有进程运行状况\" class=\"headerlink\" title=\"查看所有进程运行状况\"></a>查看所有进程运行状况</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl status</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Web-界面操作\"><a href=\"#Web-界面操作\" class=\"headerlink\" title=\"Web 界面操作\"></a>Web 界面操作</h3><p>官方提供了界面操作方式，需要在 supervisor.conf 中去掉 inet_http_server 的注释。</p>\n<figure class=\"highlight ini\"><figcaption><span>supervisor.conf</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[inet_http_server]</span>         <span class=\"comment\">; inet (TCP) server disabled by default</span></span><br><span class=\"line\"><span class=\"attr\">port</span>=<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">9001</span>        <span class=\"comment\">; ip_address:port specifier, *:port for all iface</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=user              <span class=\"comment\">; default is no username (open server)</span></span><br><span class=\"line\"><span class=\"attr\">password</span>=<span class=\"number\">123</span>               <span class=\"comment\">; default is no password (open server)</span></span><br></pre></td></tr></table></figure>\n\n<p>重启 supervisord。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisorctl reload</span></span><br></pre></td></tr></table></figure>\n\n<p>访问 <a href=\"http://localhost:9001\" target=\"_blank\" rel=\"noopener\">http://localhost:9001</a> 可以看到 supervisor 的操作界面。</p>\n<p><img src=\"https://pingyeaa.oss-cn-shenzhen.aliyuncs.com/image-1587696070630.png\" alt=\"file\"></p>\n<p>今天文章就到这里，想要了解更多，欢迎查看<a href=\"http://supervisord.org/\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck9y8cr1400048yp484cq6wb7","category_id":"ck9y8cr1800098yp42pgehqz8","_id":"ck9y8cr19000e8yp44da7a8yp"},{"post_id":"ck9y8cr1600068yp4bn6tgaf8","category_id":"ck9y8cr18000b8yp44uuqcfsx","_id":"ck9y8cr1a000h8yp468zmay2w"},{"post_id":"ck9y8cr1200038yp49xit8tgg","category_id":"ck9y8cr1700078yp45hot0elk","_id":"ck9y8cr1b000k8yp4d0sid20f"},{"post_id":"ck9y8cr1200038yp49xit8tgg","category_id":"ck9y8cr19000g8yp4cl2t62s2","_id":"ck9y8cr1b000m8yp42g950fgs"}],"PostTag":[{"post_id":"ck9y8cr1200038yp49xit8tgg","tag_id":"ck9y8cr1500058yp4e4ij68bo","_id":"ck9y8cr19000c8yp44l4gcy73"},{"post_id":"ck9y8cr1200038yp49xit8tgg","tag_id":"ck9y8cr1800088yp43hx5ebxc","_id":"ck9y8cr19000d8yp4ezr8d9zu"},{"post_id":"ck9y8cr1400048yp484cq6wb7","tag_id":"ck9y8cr18000a8yp4b8r71by6","_id":"ck9y8cr1b000l8yp4dnt84nt8"},{"post_id":"ck9y8cr1400048yp484cq6wb7","tag_id":"ck9y8cr19000f8yp42dld2e4a","_id":"ck9y8cr1b000n8yp4azqf4k30"},{"post_id":"ck9y8cr1400048yp484cq6wb7","tag_id":"ck9y8cr1a000i8yp40djpho1l","_id":"ck9y8cr1b000p8yp4e0lj96vn"},{"post_id":"ck9y8cr1600068yp4bn6tgaf8","tag_id":"ck9y8cr1a000j8yp4ag7581bp","_id":"ck9y8cr1c000r8yp48tqgg0rr"},{"post_id":"ck9y8cr1600068yp4bn6tgaf8","tag_id":"ck9y8cr1b000o8yp45kd1hoqw","_id":"ck9y8cr1c000s8yp4hcrk4e5l"},{"post_id":"ck9y8cr1600068yp4bn6tgaf8","tag_id":"ck9y8cr1c000q8yp46mo61wbj","_id":"ck9y8cr1d000t8yp4csr0g6ky"}],"Tag":[{"name":"mysql","_id":"ck9y8cr1500058yp4e4ij68bo"},{"name":"性能","_id":"ck9y8cr1800088yp43hx5ebxc"},{"name":"github","_id":"ck9y8cr18000a8yp4b8r71by6"},{"name":"webhooks","_id":"ck9y8cr19000f8yp42dld2e4a"},{"name":"钩子","_id":"ck9y8cr1a000i8yp40djpho1l"},{"name":"supervisor","_id":"ck9y8cr1a000j8yp4ag7581bp"},{"name":"进程","_id":"ck9y8cr1b000o8yp45kd1hoqw"},{"name":"监控","_id":"ck9y8cr1c000q8yp46mo61wbj"}]}}